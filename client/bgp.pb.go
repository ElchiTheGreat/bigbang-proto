// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.1
// 	protoc        v5.28.2
// source: client/bgp.proto

package client

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// BGP Operation Types
type BgpOperationType int32

const (
	// Configuration operations
	BgpOperationType_BGP_GET_CONFIG BgpOperationType = 0 // Get BGP configuration
	BgpOperationType_BGP_SET_CONFIG BgpOperationType = 1 // Set BGP configuration
	BgpOperationType_BGP_GET_STATE  BgpOperationType = 2 // Get BGP state
	// Neighbor operations
	BgpOperationType_BGP_ADD_NEIGHBOR    BgpOperationType = 10 // Add BGP neighbor
	BgpOperationType_BGP_REMOVE_NEIGHBOR BgpOperationType = 11 // Remove BGP neighbor
	BgpOperationType_BGP_UPDATE_NEIGHBOR BgpOperationType = 12 // Update BGP neighbor
	BgpOperationType_BGP_RESET_NEIGHBOR  BgpOperationType = 13 // Reset BGP neighbor (clear)
	BgpOperationType_BGP_GET_NEIGHBORS   BgpOperationType = 14 // Get BGP neighbor states
	// Network operations
	BgpOperationType_BGP_ADD_NETWORK    BgpOperationType = 20 // Add BGP network announce
	BgpOperationType_BGP_REMOVE_NETWORK BgpOperationType = 21 // Remove BGP network announce
	BgpOperationType_BGP_GET_ROUTES     BgpOperationType = 22 // Get BGP routing table
	// Route-map operations
	BgpOperationType_BGP_ADD_ROUTE_MAP    BgpOperationType = 30 // Add Route-map
	BgpOperationType_BGP_REMOVE_ROUTE_MAP BgpOperationType = 31 // Remove Route-map
	BgpOperationType_BGP_UPDATE_ROUTE_MAP BgpOperationType = 32 // Update Route-map
	// Prefix-list operations
	BgpOperationType_BGP_ADD_PREFIX_LIST    BgpOperationType = 40 // Add Prefix-list
	BgpOperationType_BGP_REMOVE_PREFIX_LIST BgpOperationType = 41 // Remove Prefix-list
	BgpOperationType_BGP_UPDATE_PREFIX_LIST BgpOperationType = 42 // Update Prefix-list
	// Operational commands
	BgpOperationType_BGP_CLEAR_ALL      BgpOperationType = 50 // Clear all BGP sessions
	BgpOperationType_BGP_SOFT_RESET_IN  BgpOperationType = 51 // Soft reset inbound
	BgpOperationType_BGP_SOFT_RESET_OUT BgpOperationType = 52 // Soft reset outbound
	BgpOperationType_BGP_GET_STATISTICS BgpOperationType = 53 // Get BGP statistics
)

// Enum value maps for BgpOperationType.
var (
	BgpOperationType_name = map[int32]string{
		0:  "BGP_GET_CONFIG",
		1:  "BGP_SET_CONFIG",
		2:  "BGP_GET_STATE",
		10: "BGP_ADD_NEIGHBOR",
		11: "BGP_REMOVE_NEIGHBOR",
		12: "BGP_UPDATE_NEIGHBOR",
		13: "BGP_RESET_NEIGHBOR",
		14: "BGP_GET_NEIGHBORS",
		20: "BGP_ADD_NETWORK",
		21: "BGP_REMOVE_NETWORK",
		22: "BGP_GET_ROUTES",
		30: "BGP_ADD_ROUTE_MAP",
		31: "BGP_REMOVE_ROUTE_MAP",
		32: "BGP_UPDATE_ROUTE_MAP",
		40: "BGP_ADD_PREFIX_LIST",
		41: "BGP_REMOVE_PREFIX_LIST",
		42: "BGP_UPDATE_PREFIX_LIST",
		50: "BGP_CLEAR_ALL",
		51: "BGP_SOFT_RESET_IN",
		52: "BGP_SOFT_RESET_OUT",
		53: "BGP_GET_STATISTICS",
	}
	BgpOperationType_value = map[string]int32{
		"BGP_GET_CONFIG":         0,
		"BGP_SET_CONFIG":         1,
		"BGP_GET_STATE":          2,
		"BGP_ADD_NEIGHBOR":       10,
		"BGP_REMOVE_NEIGHBOR":    11,
		"BGP_UPDATE_NEIGHBOR":    12,
		"BGP_RESET_NEIGHBOR":     13,
		"BGP_GET_NEIGHBORS":      14,
		"BGP_ADD_NETWORK":        20,
		"BGP_REMOVE_NETWORK":     21,
		"BGP_GET_ROUTES":         22,
		"BGP_ADD_ROUTE_MAP":      30,
		"BGP_REMOVE_ROUTE_MAP":   31,
		"BGP_UPDATE_ROUTE_MAP":   32,
		"BGP_ADD_PREFIX_LIST":    40,
		"BGP_REMOVE_PREFIX_LIST": 41,
		"BGP_UPDATE_PREFIX_LIST": 42,
		"BGP_CLEAR_ALL":          50,
		"BGP_SOFT_RESET_IN":      51,
		"BGP_SOFT_RESET_OUT":     52,
		"BGP_GET_STATISTICS":     53,
	}
)

func (x BgpOperationType) Enum() *BgpOperationType {
	p := new(BgpOperationType)
	*p = x
	return p
}

func (x BgpOperationType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BgpOperationType) Descriptor() protoreflect.EnumDescriptor {
	return file_client_bgp_proto_enumTypes[0].Descriptor()
}

func (BgpOperationType) Type() protoreflect.EnumType {
	return &file_client_bgp_proto_enumTypes[0]
}

func (x BgpOperationType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BgpOperationType.Descriptor instead.
func (BgpOperationType) EnumDescriptor() ([]byte, []int) {
	return file_client_bgp_proto_rawDescGZIP(), []int{0}
}

type AddressFamily_Type int32

const (
	AddressFamily_IPV4_UNICAST   AddressFamily_Type = 0
	AddressFamily_IPV6_UNICAST   AddressFamily_Type = 1
	AddressFamily_IPV4_MULTICAST AddressFamily_Type = 2
	AddressFamily_IPV6_MULTICAST AddressFamily_Type = 3
	AddressFamily_VPNV4_UNICAST  AddressFamily_Type = 4
	AddressFamily_VPNV6_UNICAST  AddressFamily_Type = 5
	AddressFamily_EVPN           AddressFamily_Type = 6
)

// Enum value maps for AddressFamily_Type.
var (
	AddressFamily_Type_name = map[int32]string{
		0: "IPV4_UNICAST",
		1: "IPV6_UNICAST",
		2: "IPV4_MULTICAST",
		3: "IPV6_MULTICAST",
		4: "VPNV4_UNICAST",
		5: "VPNV6_UNICAST",
		6: "EVPN",
	}
	AddressFamily_Type_value = map[string]int32{
		"IPV4_UNICAST":   0,
		"IPV6_UNICAST":   1,
		"IPV4_MULTICAST": 2,
		"IPV6_MULTICAST": 3,
		"VPNV4_UNICAST":  4,
		"VPNV6_UNICAST":  5,
		"EVPN":           6,
	}
)

func (x AddressFamily_Type) Enum() *AddressFamily_Type {
	p := new(AddressFamily_Type)
	*p = x
	return p
}

func (x AddressFamily_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AddressFamily_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_client_bgp_proto_enumTypes[1].Descriptor()
}

func (AddressFamily_Type) Type() protoreflect.EnumType {
	return &file_client_bgp_proto_enumTypes[1]
}

func (x AddressFamily_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AddressFamily_Type.Descriptor instead.
func (AddressFamily_Type) EnumDescriptor() ([]byte, []int) {
	return file_client_bgp_proto_rawDescGZIP(), []int{3, 0}
}

type RouteMap_Action int32

const (
	RouteMap_PERMIT RouteMap_Action = 0
	RouteMap_DENY   RouteMap_Action = 1
)

// Enum value maps for RouteMap_Action.
var (
	RouteMap_Action_name = map[int32]string{
		0: "PERMIT",
		1: "DENY",
	}
	RouteMap_Action_value = map[string]int32{
		"PERMIT": 0,
		"DENY":   1,
	}
)

func (x RouteMap_Action) Enum() *RouteMap_Action {
	p := new(RouteMap_Action)
	*p = x
	return p
}

func (x RouteMap_Action) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RouteMap_Action) Descriptor() protoreflect.EnumDescriptor {
	return file_client_bgp_proto_enumTypes[2].Descriptor()
}

func (RouteMap_Action) Type() protoreflect.EnumType {
	return &file_client_bgp_proto_enumTypes[2]
}

func (x RouteMap_Action) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RouteMap_Action.Descriptor instead.
func (RouteMap_Action) EnumDescriptor() ([]byte, []int) {
	return file_client_bgp_proto_rawDescGZIP(), []int{6, 0}
}

type MatchCondition_Type int32

const (
	MatchCondition_IP_ADDRESS             MatchCondition_Type = 0  // Match IP address
	MatchCondition_IP_ADDRESS_PREFIX_LIST MatchCondition_Type = 1  // Match IP address prefix-list
	MatchCondition_AS_PATH                MatchCondition_Type = 2  // Match AS path
	MatchCondition_COMMUNITY              MatchCondition_Type = 3  // Match community
	MatchCondition_EXTENDED_COMMUNITY     MatchCondition_Type = 4  // Match extended community
	MatchCondition_LARGE_COMMUNITY        MatchCondition_Type = 5  // Match large community
	MatchCondition_ORIGIN                 MatchCondition_Type = 6  // Match origin
	MatchCondition_METRIC                 MatchCondition_Type = 7  // Match metric (MED)
	MatchCondition_LOCAL_PREFERENCE       MatchCondition_Type = 8  // Match local preference
	MatchCondition_TAG                    MatchCondition_Type = 9  // Match tag
	MatchCondition_INTERFACE              MatchCondition_Type = 10 // Match interface
)

// Enum value maps for MatchCondition_Type.
var (
	MatchCondition_Type_name = map[int32]string{
		0:  "IP_ADDRESS",
		1:  "IP_ADDRESS_PREFIX_LIST",
		2:  "AS_PATH",
		3:  "COMMUNITY",
		4:  "EXTENDED_COMMUNITY",
		5:  "LARGE_COMMUNITY",
		6:  "ORIGIN",
		7:  "METRIC",
		8:  "LOCAL_PREFERENCE",
		9:  "TAG",
		10: "INTERFACE",
	}
	MatchCondition_Type_value = map[string]int32{
		"IP_ADDRESS":             0,
		"IP_ADDRESS_PREFIX_LIST": 1,
		"AS_PATH":                2,
		"COMMUNITY":              3,
		"EXTENDED_COMMUNITY":     4,
		"LARGE_COMMUNITY":        5,
		"ORIGIN":                 6,
		"METRIC":                 7,
		"LOCAL_PREFERENCE":       8,
		"TAG":                    9,
		"INTERFACE":              10,
	}
)

func (x MatchCondition_Type) Enum() *MatchCondition_Type {
	p := new(MatchCondition_Type)
	*p = x
	return p
}

func (x MatchCondition_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MatchCondition_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_client_bgp_proto_enumTypes[3].Descriptor()
}

func (MatchCondition_Type) Type() protoreflect.EnumType {
	return &file_client_bgp_proto_enumTypes[3]
}

func (x MatchCondition_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MatchCondition_Type.Descriptor instead.
func (MatchCondition_Type) EnumDescriptor() ([]byte, []int) {
	return file_client_bgp_proto_rawDescGZIP(), []int{7, 0}
}

type SetAction_Type int32

const (
	SetAction_LOCAL_PREFERENCE   SetAction_Type = 0  // Set local preference
	SetAction_METRIC             SetAction_Type = 1  // Set metric (MED)
	SetAction_NEXT_HOP           SetAction_Type = 2  // Set next-hop
	SetAction_AS_PATH_PREPEND    SetAction_Type = 3  // AS path prepend
	SetAction_COMMUNITY          SetAction_Type = 4  // Set community
	SetAction_EXTENDED_COMMUNITY SetAction_Type = 5  // Set extended community
	SetAction_LARGE_COMMUNITY    SetAction_Type = 6  // Set large community
	SetAction_ORIGIN             SetAction_Type = 7  // Set origin
	SetAction_WEIGHT             SetAction_Type = 8  // Set weight
	SetAction_TAG                SetAction_Type = 9  // Set tag
	SetAction_ATOMIC_AGGREGATE   SetAction_Type = 10 // Set atomic aggregate
)

// Enum value maps for SetAction_Type.
var (
	SetAction_Type_name = map[int32]string{
		0:  "LOCAL_PREFERENCE",
		1:  "METRIC",
		2:  "NEXT_HOP",
		3:  "AS_PATH_PREPEND",
		4:  "COMMUNITY",
		5:  "EXTENDED_COMMUNITY",
		6:  "LARGE_COMMUNITY",
		7:  "ORIGIN",
		8:  "WEIGHT",
		9:  "TAG",
		10: "ATOMIC_AGGREGATE",
	}
	SetAction_Type_value = map[string]int32{
		"LOCAL_PREFERENCE":   0,
		"METRIC":             1,
		"NEXT_HOP":           2,
		"AS_PATH_PREPEND":    3,
		"COMMUNITY":          4,
		"EXTENDED_COMMUNITY": 5,
		"LARGE_COMMUNITY":    6,
		"ORIGIN":             7,
		"WEIGHT":             8,
		"TAG":                9,
		"ATOMIC_AGGREGATE":   10,
	}
)

func (x SetAction_Type) Enum() *SetAction_Type {
	p := new(SetAction_Type)
	*p = x
	return p
}

func (x SetAction_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SetAction_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_client_bgp_proto_enumTypes[4].Descriptor()
}

func (SetAction_Type) Type() protoreflect.EnumType {
	return &file_client_bgp_proto_enumTypes[4]
}

func (x SetAction_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SetAction_Type.Descriptor instead.
func (SetAction_Type) EnumDescriptor() ([]byte, []int) {
	return file_client_bgp_proto_rawDescGZIP(), []int{8, 0}
}

type PrefixList_Action int32

const (
	PrefixList_PERMIT PrefixList_Action = 0
	PrefixList_DENY   PrefixList_Action = 1
)

// Enum value maps for PrefixList_Action.
var (
	PrefixList_Action_name = map[int32]string{
		0: "PERMIT",
		1: "DENY",
	}
	PrefixList_Action_value = map[string]int32{
		"PERMIT": 0,
		"DENY":   1,
	}
)

func (x PrefixList_Action) Enum() *PrefixList_Action {
	p := new(PrefixList_Action)
	*p = x
	return p
}

func (x PrefixList_Action) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PrefixList_Action) Descriptor() protoreflect.EnumDescriptor {
	return file_client_bgp_proto_enumTypes[5].Descriptor()
}

func (PrefixList_Action) Type() protoreflect.EnumType {
	return &file_client_bgp_proto_enumTypes[5]
}

func (x PrefixList_Action) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PrefixList_Action.Descriptor instead.
func (PrefixList_Action) EnumDescriptor() ([]byte, []int) {
	return file_client_bgp_proto_rawDescGZIP(), []int{9, 0}
}

// BGP temel konfigürasyon
type BgpConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RouterId              uint32             `protobuf:"varint,1,opt,name=router_id,json=routerId,proto3" json:"router_id,omitempty"`                                        // Router ID (IP formated uint32)
	AutonomousSystem      uint32             `protobuf:"varint,2,opt,name=autonomous_system,json=autonomousSystem,proto3" json:"autonomous_system,omitempty"`                // AS Number
	RedistributeConnected bool               `protobuf:"varint,3,opt,name=redistribute_connected,json=redistributeConnected,proto3" json:"redistribute_connected,omitempty"` // Redistribute connected routes
	RedistributeStatic    bool               `protobuf:"varint,4,opt,name=redistribute_static,json=redistributeStatic,proto3" json:"redistribute_static,omitempty"`          // Redistribute static routes
	Neighbors             []*BgpNeighbor     `protobuf:"bytes,5,rep,name=neighbors,proto3" json:"neighbors,omitempty"`                                                       // BGP neighbors
	Networks              []*BgpNetwork      `protobuf:"bytes,6,rep,name=networks,proto3" json:"networks,omitempty"`                                                         // Announce networks
	GlobalSettings        *BgpGlobalSettings `protobuf:"bytes,7,opt,name=global_settings,json=globalSettings,proto3" json:"global_settings,omitempty"`                       // Global BGP settings
}

func (x *BgpConfig) Reset() {
	*x = BgpConfig{}
	mi := &file_client_bgp_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BgpConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpConfig) ProtoMessage() {}

func (x *BgpConfig) ProtoReflect() protoreflect.Message {
	mi := &file_client_bgp_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpConfig.ProtoReflect.Descriptor instead.
func (*BgpConfig) Descriptor() ([]byte, []int) {
	return file_client_bgp_proto_rawDescGZIP(), []int{0}
}

func (x *BgpConfig) GetRouterId() uint32 {
	if x != nil {
		return x.RouterId
	}
	return 0
}

func (x *BgpConfig) GetAutonomousSystem() uint32 {
	if x != nil {
		return x.AutonomousSystem
	}
	return 0
}

func (x *BgpConfig) GetRedistributeConnected() bool {
	if x != nil {
		return x.RedistributeConnected
	}
	return false
}

func (x *BgpConfig) GetRedistributeStatic() bool {
	if x != nil {
		return x.RedistributeStatic
	}
	return false
}

func (x *BgpConfig) GetNeighbors() []*BgpNeighbor {
	if x != nil {
		return x.Neighbors
	}
	return nil
}

func (x *BgpConfig) GetNetworks() []*BgpNetwork {
	if x != nil {
		return x.Networks
	}
	return nil
}

func (x *BgpConfig) GetGlobalSettings() *BgpGlobalSettings {
	if x != nil {
		return x.GlobalSettings
	}
	return nil
}

// BGP neighbor configuration
type BgpNeighbor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PeerIp      string `protobuf:"bytes,1,opt,name=peer_ip,json=peerIp,proto3" json:"peer_ip,omitempty"`        // Neighbor IP address
	RemoteAs    uint32 `protobuf:"varint,2,opt,name=remote_as,json=remoteAs,proto3" json:"remote_as,omitempty"` // Remote AS number
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`            // Neighbor açıklaması
	Enabled     bool   `protobuf:"varint,4,opt,name=enabled,proto3" json:"enabled,omitempty"`                   // Neighbor aktif mi?
	// Authentication
	Password string `protobuf:"bytes,5,opt,name=password,proto3" json:"password,omitempty"` // BGP MD5 password
	// Timers
	KeepaliveTime        uint32 `protobuf:"varint,6,opt,name=keepalive_time,json=keepaliveTime,proto3" json:"keepalive_time,omitempty"`                        // Keepalive timer (saniye)
	HoldTime             uint32 `protobuf:"varint,7,opt,name=hold_time,json=holdTime,proto3" json:"hold_time,omitempty"`                                       // Hold timer (saniye)
	ConnectRetryInterval uint32 `protobuf:"varint,8,opt,name=connect_retry_interval,json=connectRetryInterval,proto3" json:"connect_retry_interval,omitempty"` // Connect retry timer
	// Route filtering
	RouteMapIn    []*RouteMap   `protobuf:"bytes,9,rep,name=route_map_in,json=routeMapIn,proto3" json:"route_map_in,omitempty"`           // Incoming route-map
	RouteMapOut   []*RouteMap   `protobuf:"bytes,10,rep,name=route_map_out,json=routeMapOut,proto3" json:"route_map_out,omitempty"`       // Outgoing route-map
	PrefixListIn  []*PrefixList `protobuf:"bytes,11,rep,name=prefix_list_in,json=prefixListIn,proto3" json:"prefix_list_in,omitempty"`    // Incoming prefix-list
	PrefixListOut []*PrefixList `protobuf:"bytes,12,rep,name=prefix_list_out,json=prefixListOut,proto3" json:"prefix_list_out,omitempty"` // Outgoing prefix-list
	// Neighbor kapasiteleri
	Capabilities *BgpNeighborCapabilities `protobuf:"bytes,13,opt,name=capabilities,proto3" json:"capabilities,omitempty"`
	// Address families
	AddressFamilies []*AddressFamily `protobuf:"bytes,14,rep,name=address_families,json=addressFamilies,proto3" json:"address_families,omitempty"`
	// Soft reconfiguration
	SoftReconfigurationInbound bool `protobuf:"varint,15,opt,name=soft_reconfiguration_inbound,json=softReconfigurationInbound,proto3" json:"soft_reconfiguration_inbound,omitempty"`
	// Next-hop-self
	NextHopSelf bool `protobuf:"varint,16,opt,name=next_hop_self,json=nextHopSelf,proto3" json:"next_hop_self,omitempty"`
	// Remove private AS
	RemovePrivateAs bool `protobuf:"varint,17,opt,name=remove_private_as,json=removePrivateAs,proto3" json:"remove_private_as,omitempty"`
	// Maximum prefixes
	MaximumPrefixLimit           uint32 `protobuf:"varint,18,opt,name=maximum_prefix_limit,json=maximumPrefixLimit,proto3" json:"maximum_prefix_limit,omitempty"`
	MaximumPrefixThreshold       uint32 `protobuf:"varint,19,opt,name=maximum_prefix_threshold,json=maximumPrefixThreshold,proto3" json:"maximum_prefix_threshold,omitempty"`                     // Warning threshold %
	MaximumPrefixRestart         bool   `protobuf:"varint,20,opt,name=maximum_prefix_restart,json=maximumPrefixRestart,proto3" json:"maximum_prefix_restart,omitempty"`                           // Auto restart after limit
	MaximumPrefixRestartInterval uint32 `protobuf:"varint,21,opt,name=maximum_prefix_restart_interval,json=maximumPrefixRestartInterval,proto3" json:"maximum_prefix_restart_interval,omitempty"` // Restart interval (dakika)
}

func (x *BgpNeighbor) Reset() {
	*x = BgpNeighbor{}
	mi := &file_client_bgp_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BgpNeighbor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpNeighbor) ProtoMessage() {}

func (x *BgpNeighbor) ProtoReflect() protoreflect.Message {
	mi := &file_client_bgp_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpNeighbor.ProtoReflect.Descriptor instead.
func (*BgpNeighbor) Descriptor() ([]byte, []int) {
	return file_client_bgp_proto_rawDescGZIP(), []int{1}
}

func (x *BgpNeighbor) GetPeerIp() string {
	if x != nil {
		return x.PeerIp
	}
	return ""
}

func (x *BgpNeighbor) GetRemoteAs() uint32 {
	if x != nil {
		return x.RemoteAs
	}
	return 0
}

func (x *BgpNeighbor) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *BgpNeighbor) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *BgpNeighbor) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *BgpNeighbor) GetKeepaliveTime() uint32 {
	if x != nil {
		return x.KeepaliveTime
	}
	return 0
}

func (x *BgpNeighbor) GetHoldTime() uint32 {
	if x != nil {
		return x.HoldTime
	}
	return 0
}

func (x *BgpNeighbor) GetConnectRetryInterval() uint32 {
	if x != nil {
		return x.ConnectRetryInterval
	}
	return 0
}

func (x *BgpNeighbor) GetRouteMapIn() []*RouteMap {
	if x != nil {
		return x.RouteMapIn
	}
	return nil
}

func (x *BgpNeighbor) GetRouteMapOut() []*RouteMap {
	if x != nil {
		return x.RouteMapOut
	}
	return nil
}

func (x *BgpNeighbor) GetPrefixListIn() []*PrefixList {
	if x != nil {
		return x.PrefixListIn
	}
	return nil
}

func (x *BgpNeighbor) GetPrefixListOut() []*PrefixList {
	if x != nil {
		return x.PrefixListOut
	}
	return nil
}

func (x *BgpNeighbor) GetCapabilities() *BgpNeighborCapabilities {
	if x != nil {
		return x.Capabilities
	}
	return nil
}

func (x *BgpNeighbor) GetAddressFamilies() []*AddressFamily {
	if x != nil {
		return x.AddressFamilies
	}
	return nil
}

func (x *BgpNeighbor) GetSoftReconfigurationInbound() bool {
	if x != nil {
		return x.SoftReconfigurationInbound
	}
	return false
}

func (x *BgpNeighbor) GetNextHopSelf() bool {
	if x != nil {
		return x.NextHopSelf
	}
	return false
}

func (x *BgpNeighbor) GetRemovePrivateAs() bool {
	if x != nil {
		return x.RemovePrivateAs
	}
	return false
}

func (x *BgpNeighbor) GetMaximumPrefixLimit() uint32 {
	if x != nil {
		return x.MaximumPrefixLimit
	}
	return 0
}

func (x *BgpNeighbor) GetMaximumPrefixThreshold() uint32 {
	if x != nil {
		return x.MaximumPrefixThreshold
	}
	return 0
}

func (x *BgpNeighbor) GetMaximumPrefixRestart() bool {
	if x != nil {
		return x.MaximumPrefixRestart
	}
	return false
}

func (x *BgpNeighbor) GetMaximumPrefixRestartInterval() uint32 {
	if x != nil {
		return x.MaximumPrefixRestartInterval
	}
	return 0
}

// BGP neighbor capabilities
type BgpNeighborCapabilities struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GracefulRestart bool `protobuf:"varint,1,opt,name=graceful_restart,json=gracefulRestart,proto3" json:"graceful_restart,omitempty"` // Graceful restart support
	RouteRefresh    bool `protobuf:"varint,2,opt,name=route_refresh,json=routeRefresh,proto3" json:"route_refresh,omitempty"`          // Route refresh support
	FourOctetAs     bool `protobuf:"varint,3,opt,name=four_octet_as,json=fourOctetAs,proto3" json:"four_octet_as,omitempty"`           // 4-byte AS number support
	AddPath         bool `protobuf:"varint,4,opt,name=add_path,json=addPath,proto3" json:"add_path,omitempty"`                         // Add-path support
	ExtendedNexthop bool `protobuf:"varint,5,opt,name=extended_nexthop,json=extendedNexthop,proto3" json:"extended_nexthop,omitempty"` // Extended next-hop support
}

func (x *BgpNeighborCapabilities) Reset() {
	*x = BgpNeighborCapabilities{}
	mi := &file_client_bgp_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BgpNeighborCapabilities) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpNeighborCapabilities) ProtoMessage() {}

func (x *BgpNeighborCapabilities) ProtoReflect() protoreflect.Message {
	mi := &file_client_bgp_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpNeighborCapabilities.ProtoReflect.Descriptor instead.
func (*BgpNeighborCapabilities) Descriptor() ([]byte, []int) {
	return file_client_bgp_proto_rawDescGZIP(), []int{2}
}

func (x *BgpNeighborCapabilities) GetGracefulRestart() bool {
	if x != nil {
		return x.GracefulRestart
	}
	return false
}

func (x *BgpNeighborCapabilities) GetRouteRefresh() bool {
	if x != nil {
		return x.RouteRefresh
	}
	return false
}

func (x *BgpNeighborCapabilities) GetFourOctetAs() bool {
	if x != nil {
		return x.FourOctetAs
	}
	return false
}

func (x *BgpNeighborCapabilities) GetAddPath() bool {
	if x != nil {
		return x.AddPath
	}
	return false
}

func (x *BgpNeighborCapabilities) GetExtendedNexthop() bool {
	if x != nil {
		return x.ExtendedNexthop
	}
	return false
}

// Address Family configuration
type AddressFamily struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FamilyType            AddressFamily_Type `protobuf:"varint,1,opt,name=family_type,json=familyType,proto3,enum=client.AddressFamily_Type" json:"family_type,omitempty"`
	Activated             bool               `protobuf:"varint,2,opt,name=activated,proto3" json:"activated,omitempty"`                                                        // Is this AF active?
	SendCommunity         bool               `protobuf:"varint,3,opt,name=send_community,json=sendCommunity,proto3" json:"send_community,omitempty"`                           // Send community attribute
	SendExtendedCommunity bool               `protobuf:"varint,4,opt,name=send_extended_community,json=sendExtendedCommunity,proto3" json:"send_extended_community,omitempty"` // Send extended community
	SendLargeCommunity    bool               `protobuf:"varint,5,opt,name=send_large_community,json=sendLargeCommunity,proto3" json:"send_large_community,omitempty"`          // Send large community
	ReflectorClient       bool               `protobuf:"varint,6,opt,name=reflector_client,json=reflectorClient,proto3" json:"reflector_client,omitempty"`                     // Route reflector client
	NextHopUnchanged      bool               `protobuf:"varint,7,opt,name=next_hop_unchanged,json=nextHopUnchanged,proto3" json:"next_hop_unchanged,omitempty"`                // Next-hop change
	RouteMapIn            string             `protobuf:"bytes,8,opt,name=route_map_in,json=routeMapIn,proto3" json:"route_map_in,omitempty"`                                   // AF-specific route-map in
	RouteMapOut           string             `protobuf:"bytes,9,opt,name=route_map_out,json=routeMapOut,proto3" json:"route_map_out,omitempty"`                                // AF-specific route-map out
}

func (x *AddressFamily) Reset() {
	*x = AddressFamily{}
	mi := &file_client_bgp_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddressFamily) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddressFamily) ProtoMessage() {}

func (x *AddressFamily) ProtoReflect() protoreflect.Message {
	mi := &file_client_bgp_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddressFamily.ProtoReflect.Descriptor instead.
func (*AddressFamily) Descriptor() ([]byte, []int) {
	return file_client_bgp_proto_rawDescGZIP(), []int{3}
}

func (x *AddressFamily) GetFamilyType() AddressFamily_Type {
	if x != nil {
		return x.FamilyType
	}
	return AddressFamily_IPV4_UNICAST
}

func (x *AddressFamily) GetActivated() bool {
	if x != nil {
		return x.Activated
	}
	return false
}

func (x *AddressFamily) GetSendCommunity() bool {
	if x != nil {
		return x.SendCommunity
	}
	return false
}

func (x *AddressFamily) GetSendExtendedCommunity() bool {
	if x != nil {
		return x.SendExtendedCommunity
	}
	return false
}

func (x *AddressFamily) GetSendLargeCommunity() bool {
	if x != nil {
		return x.SendLargeCommunity
	}
	return false
}

func (x *AddressFamily) GetReflectorClient() bool {
	if x != nil {
		return x.ReflectorClient
	}
	return false
}

func (x *AddressFamily) GetNextHopUnchanged() bool {
	if x != nil {
		return x.NextHopUnchanged
	}
	return false
}

func (x *AddressFamily) GetRouteMapIn() string {
	if x != nil {
		return x.RouteMapIn
	}
	return ""
}

func (x *AddressFamily) GetRouteMapOut() string {
	if x != nil {
		return x.RouteMapOut
	}
	return ""
}

// Announce edilecek network
type BgpNetwork struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Network  string `protobuf:"bytes,1,opt,name=network,proto3" json:"network,omitempty"`                   // Network CIDR (e.g. 192.168.1.0/24)
	RouteMap string `protobuf:"bytes,2,opt,name=route_map,json=routeMap,proto3" json:"route_map,omitempty"` // Optional route-map
	Backdoor uint32 `protobuf:"varint,3,opt,name=backdoor,proto3" json:"backdoor,omitempty"`                // Backdoor route (administrative distance)
}

func (x *BgpNetwork) Reset() {
	*x = BgpNetwork{}
	mi := &file_client_bgp_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BgpNetwork) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpNetwork) ProtoMessage() {}

func (x *BgpNetwork) ProtoReflect() protoreflect.Message {
	mi := &file_client_bgp_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpNetwork.ProtoReflect.Descriptor instead.
func (*BgpNetwork) Descriptor() ([]byte, []int) {
	return file_client_bgp_proto_rawDescGZIP(), []int{4}
}

func (x *BgpNetwork) GetNetwork() string {
	if x != nil {
		return x.Network
	}
	return ""
}

func (x *BgpNetwork) GetRouteMap() string {
	if x != nil {
		return x.RouteMap
	}
	return ""
}

func (x *BgpNetwork) GetBackdoor() uint32 {
	if x != nil {
		return x.Backdoor
	}
	return 0
}

// Global BGP settings
type BgpGlobalSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeterministicMed           bool     `protobuf:"varint,1,opt,name=deterministic_med,json=deterministicMed,proto3" json:"deterministic_med,omitempty"`                                     // Deterministic MED
	AlwaysCompareMed           bool     `protobuf:"varint,2,opt,name=always_compare_med,json=alwaysCompareMed,proto3" json:"always_compare_med,omitempty"`                                   // Always compare MED
	BestpathAsPathIgnore       bool     `protobuf:"varint,3,opt,name=bestpath_as_path_ignore,json=bestpathAsPathIgnore,proto3" json:"bestpath_as_path_ignore,omitempty"`                     // AS-path ignore in bestpath
	BestpathAsPathConfed       bool     `protobuf:"varint,4,opt,name=bestpath_as_path_confed,json=bestpathAsPathConfed,proto3" json:"bestpath_as_path_confed,omitempty"`                     // AS-path confederation in bestpath
	BestpathMedConfed          bool     `protobuf:"varint,5,opt,name=bestpath_med_confed,json=bestpathMedConfed,proto3" json:"bestpath_med_confed,omitempty"`                                // MED confederation in bestpath
	BestpathMedMissingAsWorst  bool     `protobuf:"varint,6,opt,name=bestpath_med_missing_as_worst,json=bestpathMedMissingAsWorst,proto3" json:"bestpath_med_missing_as_worst,omitempty"`    // Missing MED as worst
	NoClientToClientReflection bool     `protobuf:"varint,7,opt,name=no_client_to_client_reflection,json=noClientToClientReflection,proto3" json:"no_client_to_client_reflection,omitempty"` // Disable client-to-client reflection
	ClusterId                  string   `protobuf:"bytes,8,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`                                                           // Route reflector cluster ID
	GracefulRestart            bool     `protobuf:"varint,9,opt,name=graceful_restart,json=gracefulRestart,proto3" json:"graceful_restart,omitempty"`                                        // Global graceful restart
	GracefulRestartTime        uint32   `protobuf:"varint,10,opt,name=graceful_restart_time,json=gracefulRestartTime,proto3" json:"graceful_restart_time,omitempty"`                         // Graceful restart timer
	StalepathTime              uint32   `protobuf:"varint,11,opt,name=stalepath_time,json=stalepathTime,proto3" json:"stalepath_time,omitempty"`                                             // Stale path timer
	LogNeighborChanges         bool     `protobuf:"varint,12,opt,name=log_neighbor_changes,json=logNeighborChanges,proto3" json:"log_neighbor_changes,omitempty"`                            // Log neighbor state changes
	DefaultLocalPreference     uint32   `protobuf:"varint,13,opt,name=default_local_preference,json=defaultLocalPreference,proto3" json:"default_local_preference,omitempty"`                // Default local preference
	ConfederationPeers         []string `protobuf:"bytes,14,rep,name=confederation_peers,json=confederationPeers,proto3" json:"confederation_peers,omitempty"`                               // Confederation peers
	ConfederationIdentifier    uint32   `protobuf:"varint,15,opt,name=confederation_identifier,json=confederationIdentifier,proto3" json:"confederation_identifier,omitempty"`               // Confederation identifier
}

func (x *BgpGlobalSettings) Reset() {
	*x = BgpGlobalSettings{}
	mi := &file_client_bgp_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BgpGlobalSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpGlobalSettings) ProtoMessage() {}

func (x *BgpGlobalSettings) ProtoReflect() protoreflect.Message {
	mi := &file_client_bgp_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpGlobalSettings.ProtoReflect.Descriptor instead.
func (*BgpGlobalSettings) Descriptor() ([]byte, []int) {
	return file_client_bgp_proto_rawDescGZIP(), []int{5}
}

func (x *BgpGlobalSettings) GetDeterministicMed() bool {
	if x != nil {
		return x.DeterministicMed
	}
	return false
}

func (x *BgpGlobalSettings) GetAlwaysCompareMed() bool {
	if x != nil {
		return x.AlwaysCompareMed
	}
	return false
}

func (x *BgpGlobalSettings) GetBestpathAsPathIgnore() bool {
	if x != nil {
		return x.BestpathAsPathIgnore
	}
	return false
}

func (x *BgpGlobalSettings) GetBestpathAsPathConfed() bool {
	if x != nil {
		return x.BestpathAsPathConfed
	}
	return false
}

func (x *BgpGlobalSettings) GetBestpathMedConfed() bool {
	if x != nil {
		return x.BestpathMedConfed
	}
	return false
}

func (x *BgpGlobalSettings) GetBestpathMedMissingAsWorst() bool {
	if x != nil {
		return x.BestpathMedMissingAsWorst
	}
	return false
}

func (x *BgpGlobalSettings) GetNoClientToClientReflection() bool {
	if x != nil {
		return x.NoClientToClientReflection
	}
	return false
}

func (x *BgpGlobalSettings) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *BgpGlobalSettings) GetGracefulRestart() bool {
	if x != nil {
		return x.GracefulRestart
	}
	return false
}

func (x *BgpGlobalSettings) GetGracefulRestartTime() uint32 {
	if x != nil {
		return x.GracefulRestartTime
	}
	return 0
}

func (x *BgpGlobalSettings) GetStalepathTime() uint32 {
	if x != nil {
		return x.StalepathTime
	}
	return 0
}

func (x *BgpGlobalSettings) GetLogNeighborChanges() bool {
	if x != nil {
		return x.LogNeighborChanges
	}
	return false
}

func (x *BgpGlobalSettings) GetDefaultLocalPreference() uint32 {
	if x != nil {
		return x.DefaultLocalPreference
	}
	return 0
}

func (x *BgpGlobalSettings) GetConfederationPeers() []string {
	if x != nil {
		return x.ConfederationPeers
	}
	return nil
}

func (x *BgpGlobalSettings) GetConfederationIdentifier() uint32 {
	if x != nil {
		return x.ConfederationIdentifier
	}
	return 0
}

// Route-map configuration
type RouteMap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name            string            `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`                                              // Route-map name
	Sequence        uint32            `protobuf:"varint,2,opt,name=sequence,proto3" json:"sequence,omitempty"`                                     // Sequence number
	Action          RouteMap_Action   `protobuf:"varint,3,opt,name=action,proto3,enum=client.RouteMap_Action" json:"action,omitempty"`             // Permit/Deny
	MatchConditions []*MatchCondition `protobuf:"bytes,4,rep,name=match_conditions,json=matchConditions,proto3" json:"match_conditions,omitempty"` // Match conditions
	SetActions      []*SetAction      `protobuf:"bytes,5,rep,name=set_actions,json=setActions,proto3" json:"set_actions,omitempty"`                // Set actions
}

func (x *RouteMap) Reset() {
	*x = RouteMap{}
	mi := &file_client_bgp_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RouteMap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RouteMap) ProtoMessage() {}

func (x *RouteMap) ProtoReflect() protoreflect.Message {
	mi := &file_client_bgp_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RouteMap.ProtoReflect.Descriptor instead.
func (*RouteMap) Descriptor() ([]byte, []int) {
	return file_client_bgp_proto_rawDescGZIP(), []int{6}
}

func (x *RouteMap) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RouteMap) GetSequence() uint32 {
	if x != nil {
		return x.Sequence
	}
	return 0
}

func (x *RouteMap) GetAction() RouteMap_Action {
	if x != nil {
		return x.Action
	}
	return RouteMap_PERMIT
}

func (x *RouteMap) GetMatchConditions() []*MatchCondition {
	if x != nil {
		return x.MatchConditions
	}
	return nil
}

func (x *RouteMap) GetSetActions() []*SetAction {
	if x != nil {
		return x.SetActions
	}
	return nil
}

// Route-map match conditions
type MatchCondition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConditionType MatchCondition_Type `protobuf:"varint,1,opt,name=condition_type,json=conditionType,proto3,enum=client.MatchCondition_Type" json:"condition_type,omitempty"`
	Value         string              `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"` // Match value
}

func (x *MatchCondition) Reset() {
	*x = MatchCondition{}
	mi := &file_client_bgp_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MatchCondition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchCondition) ProtoMessage() {}

func (x *MatchCondition) ProtoReflect() protoreflect.Message {
	mi := &file_client_bgp_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchCondition.ProtoReflect.Descriptor instead.
func (*MatchCondition) Descriptor() ([]byte, []int) {
	return file_client_bgp_proto_rawDescGZIP(), []int{7}
}

func (x *MatchCondition) GetConditionType() MatchCondition_Type {
	if x != nil {
		return x.ConditionType
	}
	return MatchCondition_IP_ADDRESS
}

func (x *MatchCondition) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

// Route-map set actions
type SetAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActionType SetAction_Type `protobuf:"varint,1,opt,name=action_type,json=actionType,proto3,enum=client.SetAction_Type" json:"action_type,omitempty"`
	Value      string         `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"` // Set value
}

func (x *SetAction) Reset() {
	*x = SetAction{}
	mi := &file_client_bgp_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetAction) ProtoMessage() {}

func (x *SetAction) ProtoReflect() protoreflect.Message {
	mi := &file_client_bgp_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetAction.ProtoReflect.Descriptor instead.
func (*SetAction) Descriptor() ([]byte, []int) {
	return file_client_bgp_proto_rawDescGZIP(), []int{8}
}

func (x *SetAction) GetActionType() SetAction_Type {
	if x != nil {
		return x.ActionType
	}
	return SetAction_LOCAL_PREFERENCE
}

func (x *SetAction) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

// Prefix-list configuration
type PrefixList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name     string            `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`                                    // Prefix-list name
	Sequence uint32            `protobuf:"varint,2,opt,name=sequence,proto3" json:"sequence,omitempty"`                           // Sequence number
	Action   PrefixList_Action `protobuf:"varint,3,opt,name=action,proto3,enum=client.PrefixList_Action" json:"action,omitempty"` // Permit/Deny
	Prefix   string            `protobuf:"bytes,4,opt,name=prefix,proto3" json:"prefix,omitempty"`                                // Network prefix (CIDR)
	Ge       uint32            `protobuf:"varint,5,opt,name=ge,proto3" json:"ge,omitempty"`                                       // Greater or equal prefix length
	Le       uint32            `protobuf:"varint,6,opt,name=le,proto3" json:"le,omitempty"`                                       // Less or equal prefix length
}

func (x *PrefixList) Reset() {
	*x = PrefixList{}
	mi := &file_client_bgp_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PrefixList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrefixList) ProtoMessage() {}

func (x *PrefixList) ProtoReflect() protoreflect.Message {
	mi := &file_client_bgp_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrefixList.ProtoReflect.Descriptor instead.
func (*PrefixList) Descriptor() ([]byte, []int) {
	return file_client_bgp_proto_rawDescGZIP(), []int{9}
}

func (x *PrefixList) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PrefixList) GetSequence() uint32 {
	if x != nil {
		return x.Sequence
	}
	return 0
}

func (x *PrefixList) GetAction() PrefixList_Action {
	if x != nil {
		return x.Action
	}
	return PrefixList_PERMIT
}

func (x *PrefixList) GetPrefix() string {
	if x != nil {
		return x.Prefix
	}
	return ""
}

func (x *PrefixList) GetGe() uint32 {
	if x != nil {
		return x.Ge
	}
	return 0
}

func (x *PrefixList) GetLe() uint32 {
	if x != nil {
		return x.Le
	}
	return 0
}

// BGP state information (read-only)
type BgpState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Running          bool                `protobuf:"varint,1,opt,name=running,proto3" json:"running,omitempty"`                                           // Is BGP daemon running?
	RouterId         string              `protobuf:"bytes,2,opt,name=router_id,json=routerId,proto3" json:"router_id,omitempty"`                          // Active router ID
	AutonomousSystem uint32              `protobuf:"varint,3,opt,name=autonomous_system,json=autonomousSystem,proto3" json:"autonomous_system,omitempty"` // Active AS number
	NeighborStates   []*BgpNeighborState `protobuf:"bytes,4,rep,name=neighbor_states,json=neighborStates,proto3" json:"neighbor_states,omitempty"`        // Neighbor states
	Routes           []*BgpRoute         `protobuf:"bytes,5,rep,name=routes,proto3" json:"routes,omitempty"`                                              // BGP routing table
	Statistics       *BgpStatistics      `protobuf:"bytes,6,opt,name=statistics,proto3" json:"statistics,omitempty"`                                      // BGP statistics
}

func (x *BgpState) Reset() {
	*x = BgpState{}
	mi := &file_client_bgp_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BgpState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpState) ProtoMessage() {}

func (x *BgpState) ProtoReflect() protoreflect.Message {
	mi := &file_client_bgp_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpState.ProtoReflect.Descriptor instead.
func (*BgpState) Descriptor() ([]byte, []int) {
	return file_client_bgp_proto_rawDescGZIP(), []int{10}
}

func (x *BgpState) GetRunning() bool {
	if x != nil {
		return x.Running
	}
	return false
}

func (x *BgpState) GetRouterId() string {
	if x != nil {
		return x.RouterId
	}
	return ""
}

func (x *BgpState) GetAutonomousSystem() uint32 {
	if x != nil {
		return x.AutonomousSystem
	}
	return 0
}

func (x *BgpState) GetNeighborStates() []*BgpNeighborState {
	if x != nil {
		return x.NeighborStates
	}
	return nil
}

func (x *BgpState) GetRoutes() []*BgpRoute {
	if x != nil {
		return x.Routes
	}
	return nil
}

func (x *BgpState) GetStatistics() *BgpStatistics {
	if x != nil {
		return x.Statistics
	}
	return nil
}

// BGP neighbor state
type BgpNeighborState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PeerIp              string                `protobuf:"bytes,1,opt,name=peer_ip,json=peerIp,proto3" json:"peer_ip,omitempty"`                                          // Neighbor IP
	RemoteAs            uint32                `protobuf:"varint,2,opt,name=remote_as,json=remoteAs,proto3" json:"remote_as,omitempty"`                                   // Remote AS
	State               string                `protobuf:"bytes,3,opt,name=state,proto3" json:"state,omitempty"`                                                          // BGP state (Idle, Connect, OpenSent, etc.)
	Uptime              uint64                `protobuf:"varint,4,opt,name=uptime,proto3" json:"uptime,omitempty"`                                                       // Uptime (seconds)
	PrefixesReceived    uint64                `protobuf:"varint,5,opt,name=prefixes_received,json=prefixesReceived,proto3" json:"prefixes_received,omitempty"`           // Received prefixes
	PrefixesSent        uint64                `protobuf:"varint,6,opt,name=prefixes_sent,json=prefixesSent,proto3" json:"prefixes_sent,omitempty"`                       // Sent prefixes
	LastError           string                `protobuf:"bytes,7,opt,name=last_error,json=lastError,proto3" json:"last_error,omitempty"`                                 // Last error message
	AddressFamilyStates []*AddressFamilyState `protobuf:"bytes,8,rep,name=address_family_states,json=addressFamilyStates,proto3" json:"address_family_states,omitempty"` // AF durumları
}

func (x *BgpNeighborState) Reset() {
	*x = BgpNeighborState{}
	mi := &file_client_bgp_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BgpNeighborState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpNeighborState) ProtoMessage() {}

func (x *BgpNeighborState) ProtoReflect() protoreflect.Message {
	mi := &file_client_bgp_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpNeighborState.ProtoReflect.Descriptor instead.
func (*BgpNeighborState) Descriptor() ([]byte, []int) {
	return file_client_bgp_proto_rawDescGZIP(), []int{11}
}

func (x *BgpNeighborState) GetPeerIp() string {
	if x != nil {
		return x.PeerIp
	}
	return ""
}

func (x *BgpNeighborState) GetRemoteAs() uint32 {
	if x != nil {
		return x.RemoteAs
	}
	return 0
}

func (x *BgpNeighborState) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *BgpNeighborState) GetUptime() uint64 {
	if x != nil {
		return x.Uptime
	}
	return 0
}

func (x *BgpNeighborState) GetPrefixesReceived() uint64 {
	if x != nil {
		return x.PrefixesReceived
	}
	return 0
}

func (x *BgpNeighborState) GetPrefixesSent() uint64 {
	if x != nil {
		return x.PrefixesSent
	}
	return 0
}

func (x *BgpNeighborState) GetLastError() string {
	if x != nil {
		return x.LastError
	}
	return ""
}

func (x *BgpNeighborState) GetAddressFamilyStates() []*AddressFamilyState {
	if x != nil {
		return x.AddressFamilyStates
	}
	return nil
}

// Address Family state
type AddressFamilyState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FamilyType       AddressFamily_Type `protobuf:"varint,1,opt,name=family_type,json=familyType,proto3,enum=client.AddressFamily_Type" json:"family_type,omitempty"`
	Active           bool               `protobuf:"varint,2,opt,name=active,proto3" json:"active,omitempty"`
	PrefixesReceived uint64             `protobuf:"varint,3,opt,name=prefixes_received,json=prefixesReceived,proto3" json:"prefixes_received,omitempty"`
	PrefixesSent     uint64             `protobuf:"varint,4,opt,name=prefixes_sent,json=prefixesSent,proto3" json:"prefixes_sent,omitempty"`
	PrefixesAccepted uint64             `protobuf:"varint,5,opt,name=prefixes_accepted,json=prefixesAccepted,proto3" json:"prefixes_accepted,omitempty"`
	PrefixesFiltered uint64             `protobuf:"varint,6,opt,name=prefixes_filtered,json=prefixesFiltered,proto3" json:"prefixes_filtered,omitempty"`
}

func (x *AddressFamilyState) Reset() {
	*x = AddressFamilyState{}
	mi := &file_client_bgp_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddressFamilyState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddressFamilyState) ProtoMessage() {}

func (x *AddressFamilyState) ProtoReflect() protoreflect.Message {
	mi := &file_client_bgp_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddressFamilyState.ProtoReflect.Descriptor instead.
func (*AddressFamilyState) Descriptor() ([]byte, []int) {
	return file_client_bgp_proto_rawDescGZIP(), []int{12}
}

func (x *AddressFamilyState) GetFamilyType() AddressFamily_Type {
	if x != nil {
		return x.FamilyType
	}
	return AddressFamily_IPV4_UNICAST
}

func (x *AddressFamilyState) GetActive() bool {
	if x != nil {
		return x.Active
	}
	return false
}

func (x *AddressFamilyState) GetPrefixesReceived() uint64 {
	if x != nil {
		return x.PrefixesReceived
	}
	return 0
}

func (x *AddressFamilyState) GetPrefixesSent() uint64 {
	if x != nil {
		return x.PrefixesSent
	}
	return 0
}

func (x *AddressFamilyState) GetPrefixesAccepted() uint64 {
	if x != nil {
		return x.PrefixesAccepted
	}
	return 0
}

func (x *AddressFamilyState) GetPrefixesFiltered() uint64 {
	if x != nil {
		return x.PrefixesFiltered
	}
	return 0
}

// BGP route information
type BgpRoute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Network         string   `protobuf:"bytes,1,opt,name=network,proto3" json:"network,omitempty"`                                         // Network CIDR
	NextHop         string   `protobuf:"bytes,2,opt,name=next_hop,json=nextHop,proto3" json:"next_hop,omitempty"`                          // Next-hop IP
	Metric          uint32   `protobuf:"varint,3,opt,name=metric,proto3" json:"metric,omitempty"`                                          // MED value
	LocalPreference uint32   `protobuf:"varint,4,opt,name=local_preference,json=localPreference,proto3" json:"local_preference,omitempty"` // Local preference
	AsPath          string   `protobuf:"bytes,5,opt,name=as_path,json=asPath,proto3" json:"as_path,omitempty"`                             // AS path string
	Origin          string   `protobuf:"bytes,6,opt,name=origin,proto3" json:"origin,omitempty"`                                           // Origin (i, e, ?)
	Communities     []string `protobuf:"bytes,7,rep,name=communities,proto3" json:"communities,omitempty"`                                 // Community list
	Best            bool     `protobuf:"varint,8,opt,name=best,proto3" json:"best,omitempty"`                                              // Best path?
	Source          string   `protobuf:"bytes,9,opt,name=source,proto3" json:"source,omitempty"`                                           // Route source (neighbor IP)
	Age             uint64   `protobuf:"varint,10,opt,name=age,proto3" json:"age,omitempty"`                                               // Route age (seconds)
}

func (x *BgpRoute) Reset() {
	*x = BgpRoute{}
	mi := &file_client_bgp_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BgpRoute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpRoute) ProtoMessage() {}

func (x *BgpRoute) ProtoReflect() protoreflect.Message {
	mi := &file_client_bgp_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpRoute.ProtoReflect.Descriptor instead.
func (*BgpRoute) Descriptor() ([]byte, []int) {
	return file_client_bgp_proto_rawDescGZIP(), []int{13}
}

func (x *BgpRoute) GetNetwork() string {
	if x != nil {
		return x.Network
	}
	return ""
}

func (x *BgpRoute) GetNextHop() string {
	if x != nil {
		return x.NextHop
	}
	return ""
}

func (x *BgpRoute) GetMetric() uint32 {
	if x != nil {
		return x.Metric
	}
	return 0
}

func (x *BgpRoute) GetLocalPreference() uint32 {
	if x != nil {
		return x.LocalPreference
	}
	return 0
}

func (x *BgpRoute) GetAsPath() string {
	if x != nil {
		return x.AsPath
	}
	return ""
}

func (x *BgpRoute) GetOrigin() string {
	if x != nil {
		return x.Origin
	}
	return ""
}

func (x *BgpRoute) GetCommunities() []string {
	if x != nil {
		return x.Communities
	}
	return nil
}

func (x *BgpRoute) GetBest() bool {
	if x != nil {
		return x.Best
	}
	return false
}

func (x *BgpRoute) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *BgpRoute) GetAge() uint64 {
	if x != nil {
		return x.Age
	}
	return 0
}

// BGP statistics
type BgpStatistics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TotalNeighbors               uint64 `protobuf:"varint,1,opt,name=total_neighbors,json=totalNeighbors,proto3" json:"total_neighbors,omitempty"`                                             // Total neighbors
	EstablishedNeighbors         uint64 `protobuf:"varint,2,opt,name=established_neighbors,json=establishedNeighbors,proto3" json:"established_neighbors,omitempty"`                           // Established neighbors
	TotalRoutes                  uint64 `protobuf:"varint,3,opt,name=total_routes,json=totalRoutes,proto3" json:"total_routes,omitempty"`                                                      // Total routes
	BestRoutes                   uint64 `protobuf:"varint,4,opt,name=best_routes,json=bestRoutes,proto3" json:"best_routes,omitempty"`                                                         // Best routes
	MemoryUsage                  uint64 `protobuf:"varint,5,opt,name=memory_usage,json=memoryUsage,proto3" json:"memory_usage,omitempty"`                                                      // Memory usage (bytes)
	UpdateMessagesSent           uint64 `protobuf:"varint,6,opt,name=update_messages_sent,json=updateMessagesSent,proto3" json:"update_messages_sent,omitempty"`                               // Sent UPDATE messages
	UpdateMessagesReceived       uint64 `protobuf:"varint,7,opt,name=update_messages_received,json=updateMessagesReceived,proto3" json:"update_messages_received,omitempty"`                   // Received UPDATE messages
	NotificationMessagesSent     uint64 `protobuf:"varint,8,opt,name=notification_messages_sent,json=notificationMessagesSent,proto3" json:"notification_messages_sent,omitempty"`             // Sent NOTIFICATION messages
	NotificationMessagesReceived uint64 `protobuf:"varint,9,opt,name=notification_messages_received,json=notificationMessagesReceived,proto3" json:"notification_messages_received,omitempty"` // Received NOTIFICATION messages
}

func (x *BgpStatistics) Reset() {
	*x = BgpStatistics{}
	mi := &file_client_bgp_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BgpStatistics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpStatistics) ProtoMessage() {}

func (x *BgpStatistics) ProtoReflect() protoreflect.Message {
	mi := &file_client_bgp_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpStatistics.ProtoReflect.Descriptor instead.
func (*BgpStatistics) Descriptor() ([]byte, []int) {
	return file_client_bgp_proto_rawDescGZIP(), []int{14}
}

func (x *BgpStatistics) GetTotalNeighbors() uint64 {
	if x != nil {
		return x.TotalNeighbors
	}
	return 0
}

func (x *BgpStatistics) GetEstablishedNeighbors() uint64 {
	if x != nil {
		return x.EstablishedNeighbors
	}
	return 0
}

func (x *BgpStatistics) GetTotalRoutes() uint64 {
	if x != nil {
		return x.TotalRoutes
	}
	return 0
}

func (x *BgpStatistics) GetBestRoutes() uint64 {
	if x != nil {
		return x.BestRoutes
	}
	return 0
}

func (x *BgpStatistics) GetMemoryUsage() uint64 {
	if x != nil {
		return x.MemoryUsage
	}
	return 0
}

func (x *BgpStatistics) GetUpdateMessagesSent() uint64 {
	if x != nil {
		return x.UpdateMessagesSent
	}
	return 0
}

func (x *BgpStatistics) GetUpdateMessagesReceived() uint64 {
	if x != nil {
		return x.UpdateMessagesReceived
	}
	return 0
}

func (x *BgpStatistics) GetNotificationMessagesSent() uint64 {
	if x != nil {
		return x.NotificationMessagesSent
	}
	return 0
}

func (x *BgpStatistics) GetNotificationMessagesReceived() uint64 {
	if x != nil {
		return x.NotificationMessagesReceived
	}
	return 0
}

var File_client_bgp_proto protoreflect.FileDescriptor

var file_client_bgp_proto_rawDesc = []byte{
	0x0a, 0x10, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2f, 0x62, 0x67, 0x70, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x06, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x22, 0xe4, 0x02, 0x0a, 0x09, 0x42,
	0x67, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x11, 0x61, 0x75, 0x74, 0x6f, 0x6e, 0x6f, 0x6d,
	0x6f, 0x75, 0x73, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x10, 0x61, 0x75, 0x74, 0x6f, 0x6e, 0x6f, 0x6d, 0x6f, 0x75, 0x73, 0x53, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x12, 0x35, 0x0a, 0x16, 0x72, 0x65, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x15, 0x72, 0x65, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x12, 0x2f, 0x0a, 0x13, 0x72, 0x65, 0x64,
	0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x72, 0x65, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x12, 0x31, 0x0a, 0x09, 0x6e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x42, 0x67, 0x70, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x52, 0x09, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x12, 0x2e, 0x0a,
	0x08, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x42, 0x67, 0x70, 0x4e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x52, 0x08, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x12, 0x42, 0x0a,
	0x0f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e,
	0x42, 0x67, 0x70, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x52, 0x0e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x22, 0xf7, 0x07, 0x0a, 0x0b, 0x42, 0x67, 0x70, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f,
	0x72, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x69, 0x70, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x70, 0x65, 0x65, 0x72, 0x49, 0x70, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65,
	0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x61, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x72,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x41, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12,
	0x25, 0x0a, 0x0e, 0x6b, 0x65, 0x65, 0x70, 0x61, 0x6c, 0x69, 0x76, 0x65, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x6b, 0x65, 0x65, 0x70, 0x61, 0x6c, 0x69,
	0x76, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x68, 0x6f, 0x6c, 0x64, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x68, 0x6f, 0x6c, 0x64, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x16, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x5f, 0x72,
	0x65, 0x74, 0x72, 0x79, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x14, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x52, 0x65, 0x74, 0x72,
	0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x32, 0x0a, 0x0c, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x5f, 0x6d, 0x61, 0x70, 0x5f, 0x69, 0x6e, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x10, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x4d, 0x61,
	0x70, 0x52, 0x0a, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x4d, 0x61, 0x70, 0x49, 0x6e, 0x12, 0x34, 0x0a,
	0x0d, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x70, 0x5f, 0x6f, 0x75, 0x74, 0x18, 0x0a,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x52, 0x6f,
	0x75, 0x74, 0x65, 0x4d, 0x61, 0x70, 0x52, 0x0b, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x4d, 0x61, 0x70,
	0x4f, 0x75, 0x74, 0x12, 0x38, 0x0a, 0x0e, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x5f, 0x69, 0x6e, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x2e, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x0c, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x12, 0x3a, 0x0a,
	0x0f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x6f, 0x75, 0x74,
	0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e,
	0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x0d, 0x70, 0x72, 0x65, 0x66,
	0x69, 0x78, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x75, 0x74, 0x12, 0x43, 0x0a, 0x0c, 0x63, 0x61, 0x70,
	0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x42, 0x67, 0x70, 0x4e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73,
	0x52, 0x0c, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x40,
	0x0a, 0x10, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x69,
	0x65, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x52,
	0x0f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x69, 0x65, 0x73,
	0x12, 0x40, 0x0a, 0x1c, 0x73, 0x6f, 0x66, 0x74, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1a, 0x73, 0x6f, 0x66, 0x74, 0x52, 0x65, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x62, 0x6f, 0x75,
	0x6e, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x68, 0x6f, 0x70, 0x5f, 0x73,
	0x65, 0x6c, 0x66, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x6e, 0x65, 0x78, 0x74, 0x48,
	0x6f, 0x70, 0x53, 0x65, 0x6c, 0x66, 0x12, 0x2a, 0x0a, 0x11, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x5f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0f, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65,
	0x41, 0x73, 0x12, 0x30, 0x0a, 0x14, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x70, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x12, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x12, 0x38, 0x0a, 0x18, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x5f,
	0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64,
	0x18, 0x13, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x16, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x50,
	0x72, 0x65, 0x66, 0x69, 0x78, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x34,
	0x0a, 0x16, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78,
	0x5f, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14,
	0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x52, 0x65, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x12, 0x45, 0x0a, 0x1f, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x5f,
	0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1c, 0x6d,
	0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x52, 0x65, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x22, 0xd3, 0x01, 0x0a, 0x17,
	0x42, 0x67, 0x70, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x43, 0x61, 0x70, 0x61, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x67, 0x72, 0x61, 0x63, 0x65,
	0x66, 0x75, 0x6c, 0x5f, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0f, 0x67, 0x72, 0x61, 0x63, 0x65, 0x66, 0x75, 0x6c, 0x52, 0x65, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x72,
	0x65, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x12, 0x22, 0x0a, 0x0d, 0x66, 0x6f, 0x75, 0x72, 0x5f,
	0x6f, 0x63, 0x74, 0x65, 0x74, 0x5f, 0x61, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b,
	0x66, 0x6f, 0x75, 0x72, 0x4f, 0x63, 0x74, 0x65, 0x74, 0x41, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x61,
	0x64, 0x64, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x61,
	0x64, 0x64, 0x50, 0x61, 0x74, 0x68, 0x12, 0x29, 0x0a, 0x10, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64,
	0x65, 0x64, 0x5f, 0x6e, 0x65, 0x78, 0x74, 0x68, 0x6f, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x4e, 0x65, 0x78, 0x74, 0x68, 0x6f,
	0x70, 0x22, 0x9f, 0x04, 0x0a, 0x0d, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x46, 0x61, 0x6d,
	0x69, 0x6c, 0x79, 0x12, 0x3b, 0x0a, 0x0b, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x2e,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x09, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x64, 0x12, 0x25,
	0x0a, 0x0e, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x73, 0x65, 0x6e, 0x64, 0x43, 0x6f, 0x6d, 0x6d,
	0x75, 0x6e, 0x69, 0x74, 0x79, 0x12, 0x36, 0x0a, 0x17, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x73, 0x65, 0x6e, 0x64, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x64, 0x65, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x12, 0x30, 0x0a,
	0x14, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x6c, 0x61, 0x72, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x6d,
	0x75, 0x6e, 0x69, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x73, 0x65, 0x6e,
	0x64, 0x4c, 0x61, 0x72, 0x67, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x12,
	0x29, 0x0a, 0x10, 0x72, 0x65, 0x66, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x72, 0x65, 0x66, 0x6c, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x6e, 0x65,
	0x78, 0x74, 0x5f, 0x68, 0x6f, 0x70, 0x5f, 0x75, 0x6e, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x6e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x55,
	0x6e, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x12, 0x20, 0x0a, 0x0c, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x5f, 0x6d, 0x61, 0x70, 0x5f, 0x69, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x4d, 0x61, 0x70, 0x49, 0x6e, 0x12, 0x22, 0x0a, 0x0d, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x70, 0x5f, 0x6f, 0x75, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x4d, 0x61, 0x70, 0x4f, 0x75, 0x74, 0x22, 0x82,
	0x01, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x0c, 0x49, 0x50, 0x56, 0x34, 0x5f,
	0x55, 0x4e, 0x49, 0x43, 0x41, 0x53, 0x54, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x49, 0x50, 0x56,
	0x36, 0x5f, 0x55, 0x4e, 0x49, 0x43, 0x41, 0x53, 0x54, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x49,
	0x50, 0x56, 0x34, 0x5f, 0x4d, 0x55, 0x4c, 0x54, 0x49, 0x43, 0x41, 0x53, 0x54, 0x10, 0x02, 0x12,
	0x12, 0x0a, 0x0e, 0x49, 0x50, 0x56, 0x36, 0x5f, 0x4d, 0x55, 0x4c, 0x54, 0x49, 0x43, 0x41, 0x53,
	0x54, 0x10, 0x03, 0x12, 0x11, 0x0a, 0x0d, 0x56, 0x50, 0x4e, 0x56, 0x34, 0x5f, 0x55, 0x4e, 0x49,
	0x43, 0x41, 0x53, 0x54, 0x10, 0x04, 0x12, 0x11, 0x0a, 0x0d, 0x56, 0x50, 0x4e, 0x56, 0x36, 0x5f,
	0x55, 0x4e, 0x49, 0x43, 0x41, 0x53, 0x54, 0x10, 0x05, 0x12, 0x08, 0x0a, 0x04, 0x45, 0x56, 0x50,
	0x4e, 0x10, 0x06, 0x22, 0x5f, 0x0a, 0x0a, 0x42, 0x67, 0x70, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x12, 0x18, 0x0a, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x1b, 0x0a, 0x09, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x4d, 0x61, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x61, 0x63, 0x6b,
	0x64, 0x6f, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x62, 0x61, 0x63, 0x6b,
	0x64, 0x6f, 0x6f, 0x72, 0x22, 0x8f, 0x06, 0x0a, 0x11, 0x42, 0x67, 0x70, 0x47, 0x6c, 0x6f, 0x62,
	0x61, 0x6c, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x2b, 0x0a, 0x11, 0x64, 0x65,
	0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x69, 0x63, 0x5f, 0x6d, 0x65, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x4d, 0x65, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x61, 0x6c, 0x77, 0x61, 0x79,
	0x73, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x5f, 0x6d, 0x65, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x10, 0x61, 0x6c, 0x77, 0x61, 0x79, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x61,
	0x72, 0x65, 0x4d, 0x65, 0x64, 0x12, 0x35, 0x0a, 0x17, 0x62, 0x65, 0x73, 0x74, 0x70, 0x61, 0x74,
	0x68, 0x5f, 0x61, 0x73, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x62, 0x65, 0x73, 0x74, 0x70, 0x61, 0x74, 0x68,
	0x41, 0x73, 0x50, 0x61, 0x74, 0x68, 0x49, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x12, 0x35, 0x0a, 0x17,
	0x62, 0x65, 0x73, 0x74, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x61, 0x73, 0x5f, 0x70, 0x61, 0x74, 0x68,
	0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x62,
	0x65, 0x73, 0x74, 0x70, 0x61, 0x74, 0x68, 0x41, 0x73, 0x50, 0x61, 0x74, 0x68, 0x43, 0x6f, 0x6e,
	0x66, 0x65, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x62, 0x65, 0x73, 0x74, 0x70, 0x61, 0x74, 0x68, 0x5f,
	0x6d, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x11, 0x62, 0x65, 0x73, 0x74, 0x70, 0x61, 0x74, 0x68, 0x4d, 0x65, 0x64, 0x43, 0x6f, 0x6e,
	0x66, 0x65, 0x64, 0x12, 0x40, 0x0a, 0x1d, 0x62, 0x65, 0x73, 0x74, 0x70, 0x61, 0x74, 0x68, 0x5f,
	0x6d, 0x65, 0x64, 0x5f, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x73, 0x5f, 0x77,
	0x6f, 0x72, 0x73, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x19, 0x62, 0x65, 0x73, 0x74,
	0x70, 0x61, 0x74, 0x68, 0x4d, 0x65, 0x64, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x41, 0x73,
	0x57, 0x6f, 0x72, 0x73, 0x74, 0x12, 0x42, 0x0a, 0x1e, 0x6e, 0x6f, 0x5f, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x5f, 0x74, 0x6f, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x66,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1a, 0x6e,
	0x6f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x66, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x67, 0x72, 0x61, 0x63,
	0x65, 0x66, 0x75, 0x6c, 0x5f, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0f, 0x67, 0x72, 0x61, 0x63, 0x65, 0x66, 0x75, 0x6c, 0x52, 0x65, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x12, 0x32, 0x0a, 0x15, 0x67, 0x72, 0x61, 0x63, 0x65, 0x66, 0x75, 0x6c, 0x5f,
	0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x13, 0x67, 0x72, 0x61, 0x63, 0x65, 0x66, 0x75, 0x6c, 0x52, 0x65, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x74, 0x61, 0x6c, 0x65,
	0x70, 0x61, 0x74, 0x68, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0d, 0x73, 0x74, 0x61, 0x6c, 0x65, 0x70, 0x61, 0x74, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x30,
	0x0a, 0x14, 0x6c, 0x6f, 0x67, 0x5f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x5f, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x6c, 0x6f,
	0x67, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73,
	0x12, 0x38, 0x0a, 0x18, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x6c, 0x6f, 0x63, 0x61,
	0x6c, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x16, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x6c,
	0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x2f, 0x0a, 0x13, 0x63, 0x6f,
	0x6e, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x65, 0x65, 0x72,
	0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x09, 0x52, 0x12, 0x63, 0x6f, 0x6e, 0x66, 0x65, 0x64, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x65, 0x65, 0x72, 0x73, 0x12, 0x39, 0x0a, 0x18, 0x63,
	0x6f, 0x6e, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x17, 0x63,
	0x6f, 0x6e, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x22, 0x82, 0x02, 0x0a, 0x08, 0x52, 0x6f, 0x75, 0x74, 0x65,
	0x4d, 0x61, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65,
	0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65,
	0x6e, 0x63, 0x65, 0x12, 0x2f, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x52, 0x6f, 0x75,
	0x74, 0x65, 0x4d, 0x61, 0x70, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x41, 0x0a, 0x10, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x63, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x32, 0x0a, 0x0b, 0x73, 0x65, 0x74, 0x5f, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x0a, 0x73, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x1e, 0x0a, 0x06, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0a, 0x0a, 0x06, 0x50, 0x45, 0x52, 0x4d, 0x49, 0x54, 0x10,
	0x00, 0x12, 0x08, 0x0a, 0x04, 0x44, 0x45, 0x4e, 0x59, 0x10, 0x01, 0x22, 0xae, 0x02, 0x0a, 0x0e,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x42,
	0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xc1, 0x01, 0x0a, 0x04, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x0e, 0x0a, 0x0a, 0x49, 0x50, 0x5f, 0x41, 0x44, 0x44, 0x52, 0x45, 0x53, 0x53, 0x10,
	0x00, 0x12, 0x1a, 0x0a, 0x16, 0x49, 0x50, 0x5f, 0x41, 0x44, 0x44, 0x52, 0x45, 0x53, 0x53, 0x5f,
	0x50, 0x52, 0x45, 0x46, 0x49, 0x58, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x10, 0x01, 0x12, 0x0b, 0x0a,
	0x07, 0x41, 0x53, 0x5f, 0x50, 0x41, 0x54, 0x48, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x4f,
	0x4d, 0x4d, 0x55, 0x4e, 0x49, 0x54, 0x59, 0x10, 0x03, 0x12, 0x16, 0x0a, 0x12, 0x45, 0x58, 0x54,
	0x45, 0x4e, 0x44, 0x45, 0x44, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x55, 0x4e, 0x49, 0x54, 0x59, 0x10,
	0x04, 0x12, 0x13, 0x0a, 0x0f, 0x4c, 0x41, 0x52, 0x47, 0x45, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x55,
	0x4e, 0x49, 0x54, 0x59, 0x10, 0x05, 0x12, 0x0a, 0x0a, 0x06, 0x4f, 0x52, 0x49, 0x47, 0x49, 0x4e,
	0x10, 0x06, 0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x45, 0x54, 0x52, 0x49, 0x43, 0x10, 0x07, 0x12, 0x14,
	0x0a, 0x10, 0x4c, 0x4f, 0x43, 0x41, 0x4c, 0x5f, 0x50, 0x52, 0x45, 0x46, 0x45, 0x52, 0x45, 0x4e,
	0x43, 0x45, 0x10, 0x08, 0x12, 0x07, 0x0a, 0x03, 0x54, 0x41, 0x47, 0x10, 0x09, 0x12, 0x0d, 0x0a,
	0x09, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x10, 0x0a, 0x22, 0x9b, 0x02, 0x0a,
	0x09, 0x53, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x37, 0x0a, 0x0b, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x16, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xbe, 0x01, 0x0a, 0x04, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x4c, 0x4f, 0x43, 0x41, 0x4c, 0x5f, 0x50, 0x52, 0x45, 0x46,
	0x45, 0x52, 0x45, 0x4e, 0x43, 0x45, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x45, 0x54, 0x52,
	0x49, 0x43, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x4e, 0x45, 0x58, 0x54, 0x5f, 0x48, 0x4f, 0x50,
	0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x41, 0x53, 0x5f, 0x50, 0x41, 0x54, 0x48, 0x5f, 0x50, 0x52,
	0x45, 0x50, 0x45, 0x4e, 0x44, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x4f, 0x4d, 0x4d, 0x55,
	0x4e, 0x49, 0x54, 0x59, 0x10, 0x04, 0x12, 0x16, 0x0a, 0x12, 0x45, 0x58, 0x54, 0x45, 0x4e, 0x44,
	0x45, 0x44, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x55, 0x4e, 0x49, 0x54, 0x59, 0x10, 0x05, 0x12, 0x13,
	0x0a, 0x0f, 0x4c, 0x41, 0x52, 0x47, 0x45, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x55, 0x4e, 0x49, 0x54,
	0x59, 0x10, 0x06, 0x12, 0x0a, 0x0a, 0x06, 0x4f, 0x52, 0x49, 0x47, 0x49, 0x4e, 0x10, 0x07, 0x12,
	0x0a, 0x0a, 0x06, 0x57, 0x45, 0x49, 0x47, 0x48, 0x54, 0x10, 0x08, 0x12, 0x07, 0x0a, 0x03, 0x54,
	0x41, 0x47, 0x10, 0x09, 0x12, 0x14, 0x0a, 0x10, 0x41, 0x54, 0x4f, 0x4d, 0x49, 0x43, 0x5f, 0x41,
	0x47, 0x47, 0x52, 0x45, 0x47, 0x41, 0x54, 0x45, 0x10, 0x0a, 0x22, 0xc7, 0x01, 0x0a, 0x0a, 0x50,
	0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x2e, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x69, 0x73, 0x74, 0x2e, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06,
	0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x12, 0x0e, 0x0a, 0x02, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x02, 0x67, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x02, 0x6c, 0x65, 0x22, 0x1e, 0x0a, 0x06, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0a,
	0x0a, 0x06, 0x50, 0x45, 0x52, 0x4d, 0x49, 0x54, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x44, 0x45,
	0x4e, 0x59, 0x10, 0x01, 0x22, 0x92, 0x02, 0x0a, 0x08, 0x42, 0x67, 0x70, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x1b, 0x0a, 0x09, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x11, 0x61, 0x75, 0x74, 0x6f,
	0x6e, 0x6f, 0x6d, 0x6f, 0x75, 0x73, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x10, 0x61, 0x75, 0x74, 0x6f, 0x6e, 0x6f, 0x6d, 0x6f, 0x75, 0x73, 0x53,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x41, 0x0a, 0x0f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f,
	0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x42, 0x67, 0x70, 0x4e, 0x65, 0x69, 0x67, 0x68,
	0x62, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0e, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x12, 0x28, 0x0a, 0x06, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x2e, 0x42, 0x67, 0x70, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x06, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x73, 0x12, 0x35, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e,
	0x42, 0x67, 0x70, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x0a, 0x73,
	0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x22, 0xb7, 0x02, 0x0a, 0x10, 0x42, 0x67,
	0x70, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x17,
	0x0a, 0x07, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x69, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x70, 0x65, 0x65, 0x72, 0x49, 0x70, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x5f, 0x61, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x72, 0x65, 0x6d, 0x6f,
	0x74, 0x65, 0x41, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x70,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x75, 0x70, 0x74, 0x69,
	0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x5f, 0x72,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x70,
	0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x12,
	0x23, 0x0a, 0x0d, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x6e, 0x74,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73,
	0x53, 0x65, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x12, 0x4e, 0x0a, 0x15, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x66,
	0x61, 0x6d, 0x69, 0x6c, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x73, 0x18, 0x08, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x13,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x73, 0x22, 0x95, 0x02, 0x0a, 0x12, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x46,
	0x61, 0x6d, 0x69, 0x6c, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x66, 0x61,
	0x6d, 0x69, 0x6c, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1a, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x66, 0x61, 0x6d,
	0x69, 0x6c, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12,
	0x2b, 0x0a, 0x11, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x70, 0x72, 0x65, 0x66,
	0x69, 0x78, 0x65, 0x73, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x12, 0x23, 0x0a, 0x0d,
	0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0c, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x53, 0x65, 0x6e,
	0x74, 0x12, 0x2b, 0x0a, 0x11, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x5f, 0x61, 0x63,
	0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x70, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x12, 0x2b,
	0x0a, 0x11, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x70, 0x72, 0x65, 0x66, 0x69,
	0x78, 0x65, 0x73, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x65, 0x64, 0x22, 0x93, 0x02, 0x0a, 0x08,
	0x42, 0x67, 0x70, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x12, 0x19, 0x0a, 0x08, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x68, 0x6f, 0x70, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x12, 0x16, 0x0a,
	0x06, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x12, 0x29, 0x0a, 0x10, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x70,
	0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x12, 0x17, 0x0a, 0x07, 0x61, 0x73, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x61, 0x73, 0x50, 0x61, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x72, 0x69,
	0x67, 0x69, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69,
	0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x69, 0x65, 0x73,
	0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74,
	0x69, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x65, 0x73, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x04, 0x62, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12,
	0x10, 0x0a, 0x03, 0x61, 0x67, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x61, 0x67,
	0x65, 0x22, 0xc4, 0x03, 0x0a, 0x0d, 0x42, 0x67, 0x70, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x6e, 0x65, 0x69,
	0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x12, 0x33, 0x0a, 0x15,
	0x65, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x5f, 0x6e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x14, 0x65, 0x73, 0x74,
	0x61, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x73, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x6f,
	0x75, 0x74, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x62, 0x65, 0x73, 0x74, 0x52,
	0x6f, 0x75, 0x74, 0x65, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f,
	0x75, 0x73, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x6d, 0x65, 0x6d,
	0x6f, 0x72, 0x79, 0x55, 0x73, 0x61, 0x67, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x6e, 0x74,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x12, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x53, 0x65, 0x6e, 0x74, 0x12, 0x38, 0x0a, 0x18, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x72, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x16, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x64, 0x12, 0x3c, 0x0a, 0x1a, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x73, 0x65,
	0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x18, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x53, 0x65,
	0x6e, 0x74, 0x12, 0x44, 0x0a, 0x1e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x1c, 0x6e, 0x6f, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x2a, 0xfb, 0x03, 0x0a, 0x10, 0x42, 0x67, 0x70,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a,
	0x0e, 0x42, 0x47, 0x50, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x10,
	0x00, 0x12, 0x12, 0x0a, 0x0e, 0x42, 0x47, 0x50, 0x5f, 0x53, 0x45, 0x54, 0x5f, 0x43, 0x4f, 0x4e,
	0x46, 0x49, 0x47, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x42, 0x47, 0x50, 0x5f, 0x47, 0x45, 0x54,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x42, 0x47, 0x50, 0x5f,
	0x41, 0x44, 0x44, 0x5f, 0x4e, 0x45, 0x49, 0x47, 0x48, 0x42, 0x4f, 0x52, 0x10, 0x0a, 0x12, 0x17,
	0x0a, 0x13, 0x42, 0x47, 0x50, 0x5f, 0x52, 0x45, 0x4d, 0x4f, 0x56, 0x45, 0x5f, 0x4e, 0x45, 0x49,
	0x47, 0x48, 0x42, 0x4f, 0x52, 0x10, 0x0b, 0x12, 0x17, 0x0a, 0x13, 0x42, 0x47, 0x50, 0x5f, 0x55,
	0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x4e, 0x45, 0x49, 0x47, 0x48, 0x42, 0x4f, 0x52, 0x10, 0x0c,
	0x12, 0x16, 0x0a, 0x12, 0x42, 0x47, 0x50, 0x5f, 0x52, 0x45, 0x53, 0x45, 0x54, 0x5f, 0x4e, 0x45,
	0x49, 0x47, 0x48, 0x42, 0x4f, 0x52, 0x10, 0x0d, 0x12, 0x15, 0x0a, 0x11, 0x42, 0x47, 0x50, 0x5f,
	0x47, 0x45, 0x54, 0x5f, 0x4e, 0x45, 0x49, 0x47, 0x48, 0x42, 0x4f, 0x52, 0x53, 0x10, 0x0e, 0x12,
	0x13, 0x0a, 0x0f, 0x42, 0x47, 0x50, 0x5f, 0x41, 0x44, 0x44, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f,
	0x52, 0x4b, 0x10, 0x14, 0x12, 0x16, 0x0a, 0x12, 0x42, 0x47, 0x50, 0x5f, 0x52, 0x45, 0x4d, 0x4f,
	0x56, 0x45, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x10, 0x15, 0x12, 0x12, 0x0a, 0x0e,
	0x42, 0x47, 0x50, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x53, 0x10, 0x16,
	0x12, 0x15, 0x0a, 0x11, 0x42, 0x47, 0x50, 0x5f, 0x41, 0x44, 0x44, 0x5f, 0x52, 0x4f, 0x55, 0x54,
	0x45, 0x5f, 0x4d, 0x41, 0x50, 0x10, 0x1e, 0x12, 0x18, 0x0a, 0x14, 0x42, 0x47, 0x50, 0x5f, 0x52,
	0x45, 0x4d, 0x4f, 0x56, 0x45, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x5f, 0x4d, 0x41, 0x50, 0x10,
	0x1f, 0x12, 0x18, 0x0a, 0x14, 0x42, 0x47, 0x50, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f,
	0x52, 0x4f, 0x55, 0x54, 0x45, 0x5f, 0x4d, 0x41, 0x50, 0x10, 0x20, 0x12, 0x17, 0x0a, 0x13, 0x42,
	0x47, 0x50, 0x5f, 0x41, 0x44, 0x44, 0x5f, 0x50, 0x52, 0x45, 0x46, 0x49, 0x58, 0x5f, 0x4c, 0x49,
	0x53, 0x54, 0x10, 0x28, 0x12, 0x1a, 0x0a, 0x16, 0x42, 0x47, 0x50, 0x5f, 0x52, 0x45, 0x4d, 0x4f,
	0x56, 0x45, 0x5f, 0x50, 0x52, 0x45, 0x46, 0x49, 0x58, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x10, 0x29,
	0x12, 0x1a, 0x0a, 0x16, 0x42, 0x47, 0x50, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x50,
	0x52, 0x45, 0x46, 0x49, 0x58, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x10, 0x2a, 0x12, 0x11, 0x0a, 0x0d,
	0x42, 0x47, 0x50, 0x5f, 0x43, 0x4c, 0x45, 0x41, 0x52, 0x5f, 0x41, 0x4c, 0x4c, 0x10, 0x32, 0x12,
	0x15, 0x0a, 0x11, 0x42, 0x47, 0x50, 0x5f, 0x53, 0x4f, 0x46, 0x54, 0x5f, 0x52, 0x45, 0x53, 0x45,
	0x54, 0x5f, 0x49, 0x4e, 0x10, 0x33, 0x12, 0x16, 0x0a, 0x12, 0x42, 0x47, 0x50, 0x5f, 0x53, 0x4f,
	0x46, 0x54, 0x5f, 0x52, 0x45, 0x53, 0x45, 0x54, 0x5f, 0x4f, 0x55, 0x54, 0x10, 0x34, 0x12, 0x16,
	0x0a, 0x12, 0x42, 0x47, 0x50, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x49, 0x53,
	0x54, 0x49, 0x43, 0x53, 0x10, 0x35, 0x42, 0x2d, 0x5a, 0x2b, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x45, 0x6c, 0x63, 0x68, 0x69, 0x54, 0x68, 0x65, 0x47, 0x72, 0x65,
	0x61, 0x74, 0x2f, 0x65, 0x6c, 0x63, 0x68, 0x69, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_client_bgp_proto_rawDescOnce sync.Once
	file_client_bgp_proto_rawDescData = file_client_bgp_proto_rawDesc
)

func file_client_bgp_proto_rawDescGZIP() []byte {
	file_client_bgp_proto_rawDescOnce.Do(func() {
		file_client_bgp_proto_rawDescData = protoimpl.X.CompressGZIP(file_client_bgp_proto_rawDescData)
	})
	return file_client_bgp_proto_rawDescData
}

var file_client_bgp_proto_enumTypes = make([]protoimpl.EnumInfo, 6)
var file_client_bgp_proto_msgTypes = make([]protoimpl.MessageInfo, 15)
var file_client_bgp_proto_goTypes = []any{
	(BgpOperationType)(0),           // 0: client.BgpOperationType
	(AddressFamily_Type)(0),         // 1: client.AddressFamily.Type
	(RouteMap_Action)(0),            // 2: client.RouteMap.Action
	(MatchCondition_Type)(0),        // 3: client.MatchCondition.Type
	(SetAction_Type)(0),             // 4: client.SetAction.Type
	(PrefixList_Action)(0),          // 5: client.PrefixList.Action
	(*BgpConfig)(nil),               // 6: client.BgpConfig
	(*BgpNeighbor)(nil),             // 7: client.BgpNeighbor
	(*BgpNeighborCapabilities)(nil), // 8: client.BgpNeighborCapabilities
	(*AddressFamily)(nil),           // 9: client.AddressFamily
	(*BgpNetwork)(nil),              // 10: client.BgpNetwork
	(*BgpGlobalSettings)(nil),       // 11: client.BgpGlobalSettings
	(*RouteMap)(nil),                // 12: client.RouteMap
	(*MatchCondition)(nil),          // 13: client.MatchCondition
	(*SetAction)(nil),               // 14: client.SetAction
	(*PrefixList)(nil),              // 15: client.PrefixList
	(*BgpState)(nil),                // 16: client.BgpState
	(*BgpNeighborState)(nil),        // 17: client.BgpNeighborState
	(*AddressFamilyState)(nil),      // 18: client.AddressFamilyState
	(*BgpRoute)(nil),                // 19: client.BgpRoute
	(*BgpStatistics)(nil),           // 20: client.BgpStatistics
}
var file_client_bgp_proto_depIdxs = []int32{
	7,  // 0: client.BgpConfig.neighbors:type_name -> client.BgpNeighbor
	10, // 1: client.BgpConfig.networks:type_name -> client.BgpNetwork
	11, // 2: client.BgpConfig.global_settings:type_name -> client.BgpGlobalSettings
	12, // 3: client.BgpNeighbor.route_map_in:type_name -> client.RouteMap
	12, // 4: client.BgpNeighbor.route_map_out:type_name -> client.RouteMap
	15, // 5: client.BgpNeighbor.prefix_list_in:type_name -> client.PrefixList
	15, // 6: client.BgpNeighbor.prefix_list_out:type_name -> client.PrefixList
	8,  // 7: client.BgpNeighbor.capabilities:type_name -> client.BgpNeighborCapabilities
	9,  // 8: client.BgpNeighbor.address_families:type_name -> client.AddressFamily
	1,  // 9: client.AddressFamily.family_type:type_name -> client.AddressFamily.Type
	2,  // 10: client.RouteMap.action:type_name -> client.RouteMap.Action
	13, // 11: client.RouteMap.match_conditions:type_name -> client.MatchCondition
	14, // 12: client.RouteMap.set_actions:type_name -> client.SetAction
	3,  // 13: client.MatchCondition.condition_type:type_name -> client.MatchCondition.Type
	4,  // 14: client.SetAction.action_type:type_name -> client.SetAction.Type
	5,  // 15: client.PrefixList.action:type_name -> client.PrefixList.Action
	17, // 16: client.BgpState.neighbor_states:type_name -> client.BgpNeighborState
	19, // 17: client.BgpState.routes:type_name -> client.BgpRoute
	20, // 18: client.BgpState.statistics:type_name -> client.BgpStatistics
	18, // 19: client.BgpNeighborState.address_family_states:type_name -> client.AddressFamilyState
	1,  // 20: client.AddressFamilyState.family_type:type_name -> client.AddressFamily.Type
	21, // [21:21] is the sub-list for method output_type
	21, // [21:21] is the sub-list for method input_type
	21, // [21:21] is the sub-list for extension type_name
	21, // [21:21] is the sub-list for extension extendee
	0,  // [0:21] is the sub-list for field type_name
}

func init() { file_client_bgp_proto_init() }
func file_client_bgp_proto_init() {
	if File_client_bgp_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_client_bgp_proto_rawDesc,
			NumEnums:      6,
			NumMessages:   15,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_client_bgp_proto_goTypes,
		DependencyIndexes: file_client_bgp_proto_depIdxs,
		EnumInfos:         file_client_bgp_proto_enumTypes,
		MessageInfos:      file_client_bgp_proto_msgTypes,
	}.Build()
	File_client_bgp_proto = out.File
	file_client_bgp_proto_rawDesc = nil
	file_client_bgp_proto_goTypes = nil
	file_client_bgp_proto_depIdxs = nil
}
