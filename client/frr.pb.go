// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.1
// 	protoc        v5.28.2
// source: client/frr.proto

package client

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type FrrProtocolType int32

const (
	FrrProtocolType_FRR_PROTOCOL_BGP    FrrProtocolType = 0
	FrrProtocolType_FRR_PROTOCOL_STATIC FrrProtocolType = 1
)

// Enum value maps for FrrProtocolType.
var (
	FrrProtocolType_name = map[int32]string{
		0: "FRR_PROTOCOL_BGP",
		1: "FRR_PROTOCOL_STATIC",
	}
	FrrProtocolType_value = map[string]int32{
		"FRR_PROTOCOL_BGP":    0,
		"FRR_PROTOCOL_STATIC": 1,
	}
)

func (x FrrProtocolType) Enum() *FrrProtocolType {
	p := new(FrrProtocolType)
	*p = x
	return p
}

func (x FrrProtocolType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FrrProtocolType) Descriptor() protoreflect.EnumDescriptor {
	return file_client_frr_proto_enumTypes[0].Descriptor()
}

func (FrrProtocolType) Type() protoreflect.EnumType {
	return &file_client_frr_proto_enumTypes[0]
}

func (x FrrProtocolType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FrrProtocolType.Descriptor instead.
func (FrrProtocolType) EnumDescriptor() ([]byte, []int) {
	return file_client_frr_proto_rawDescGZIP(), []int{0}
}

type BgpOperationType int32

const (
	BgpOperationType_BGP_GET_CONFIG      BgpOperationType = 0
	BgpOperationType_BGP_SET_CONFIG      BgpOperationType = 1
	BgpOperationType_BGP_GET_STATE       BgpOperationType = 2
	BgpOperationType_BGP_ADD_NEIGHBOR    BgpOperationType = 3
	BgpOperationType_BGP_REMOVE_NEIGHBOR BgpOperationType = 4
	BgpOperationType_BGP_UPDATE_NEIGHBOR BgpOperationType = 5
	BgpOperationType_BGP_RESET_NEIGHBOR  BgpOperationType = 6
	BgpOperationType_BGP_GET_NEIGHBORS   BgpOperationType = 7
	BgpOperationType_BGP_ADD_NETWORK     BgpOperationType = 8
	BgpOperationType_BGP_REMOVE_NETWORK  BgpOperationType = 9
	BgpOperationType_BGP_GET_ROUTES      BgpOperationType = 10
	BgpOperationType_BGP_GET_STATISTICS  BgpOperationType = 11
	BgpOperationType_BGP_CLEAR_SESSIONS  BgpOperationType = 12
	BgpOperationType_BGP_SOFT_RESET      BgpOperationType = 13
	BgpOperationType_BGP_SHUTDOWN        BgpOperationType = 14
	BgpOperationType_BGP_NO_SHUTDOWN     BgpOperationType = 15
)

// Enum value maps for BgpOperationType.
var (
	BgpOperationType_name = map[int32]string{
		0:  "BGP_GET_CONFIG",
		1:  "BGP_SET_CONFIG",
		2:  "BGP_GET_STATE",
		3:  "BGP_ADD_NEIGHBOR",
		4:  "BGP_REMOVE_NEIGHBOR",
		5:  "BGP_UPDATE_NEIGHBOR",
		6:  "BGP_RESET_NEIGHBOR",
		7:  "BGP_GET_NEIGHBORS",
		8:  "BGP_ADD_NETWORK",
		9:  "BGP_REMOVE_NETWORK",
		10: "BGP_GET_ROUTES",
		11: "BGP_GET_STATISTICS",
		12: "BGP_CLEAR_SESSIONS",
		13: "BGP_SOFT_RESET",
		14: "BGP_SHUTDOWN",
		15: "BGP_NO_SHUTDOWN",
	}
	BgpOperationType_value = map[string]int32{
		"BGP_GET_CONFIG":      0,
		"BGP_SET_CONFIG":      1,
		"BGP_GET_STATE":       2,
		"BGP_ADD_NEIGHBOR":    3,
		"BGP_REMOVE_NEIGHBOR": 4,
		"BGP_UPDATE_NEIGHBOR": 5,
		"BGP_RESET_NEIGHBOR":  6,
		"BGP_GET_NEIGHBORS":   7,
		"BGP_ADD_NETWORK":     8,
		"BGP_REMOVE_NETWORK":  9,
		"BGP_GET_ROUTES":      10,
		"BGP_GET_STATISTICS":  11,
		"BGP_CLEAR_SESSIONS":  12,
		"BGP_SOFT_RESET":      13,
		"BGP_SHUTDOWN":        14,
		"BGP_NO_SHUTDOWN":     15,
	}
)

func (x BgpOperationType) Enum() *BgpOperationType {
	p := new(BgpOperationType)
	*p = x
	return p
}

func (x BgpOperationType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BgpOperationType) Descriptor() protoreflect.EnumDescriptor {
	return file_client_frr_proto_enumTypes[1].Descriptor()
}

func (BgpOperationType) Type() protoreflect.EnumType {
	return &file_client_frr_proto_enumTypes[1]
}

func (x BgpOperationType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BgpOperationType.Descriptor instead.
func (BgpOperationType) EnumDescriptor() ([]byte, []int) {
	return file_client_frr_proto_rawDescGZIP(), []int{1}
}

type StaticOperationType int32

const (
	StaticOperationType_STATIC_GET_ROUTES       StaticOperationType = 0
	StaticOperationType_STATIC_ADD_ROUTE        StaticOperationType = 1
	StaticOperationType_STATIC_REMOVE_ROUTE     StaticOperationType = 2
	StaticOperationType_STATIC_UPDATE_ROUTE     StaticOperationType = 3
	StaticOperationType_STATIC_GET_CONFIG       StaticOperationType = 4
	StaticOperationType_STATIC_SET_CONFIG       StaticOperationType = 5
	StaticOperationType_STATIC_CLEAR_ALL_ROUTES StaticOperationType = 6
	StaticOperationType_STATIC_GET_STATISTICS   StaticOperationType = 7
	StaticOperationType_STATIC_RELOAD           StaticOperationType = 8
)

// Enum value maps for StaticOperationType.
var (
	StaticOperationType_name = map[int32]string{
		0: "STATIC_GET_ROUTES",
		1: "STATIC_ADD_ROUTE",
		2: "STATIC_REMOVE_ROUTE",
		3: "STATIC_UPDATE_ROUTE",
		4: "STATIC_GET_CONFIG",
		5: "STATIC_SET_CONFIG",
		6: "STATIC_CLEAR_ALL_ROUTES",
		7: "STATIC_GET_STATISTICS",
		8: "STATIC_RELOAD",
	}
	StaticOperationType_value = map[string]int32{
		"STATIC_GET_ROUTES":       0,
		"STATIC_ADD_ROUTE":        1,
		"STATIC_REMOVE_ROUTE":     2,
		"STATIC_UPDATE_ROUTE":     3,
		"STATIC_GET_CONFIG":       4,
		"STATIC_SET_CONFIG":       5,
		"STATIC_CLEAR_ALL_ROUTES": 6,
		"STATIC_GET_STATISTICS":   7,
		"STATIC_RELOAD":           8,
	}
)

func (x StaticOperationType) Enum() *StaticOperationType {
	p := new(StaticOperationType)
	*p = x
	return p
}

func (x StaticOperationType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StaticOperationType) Descriptor() protoreflect.EnumDescriptor {
	return file_client_frr_proto_enumTypes[2].Descriptor()
}

func (StaticOperationType) Type() protoreflect.EnumType {
	return &file_client_frr_proto_enumTypes[2]
}

func (x StaticOperationType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StaticOperationType.Descriptor instead.
func (StaticOperationType) EnumDescriptor() ([]byte, []int) {
	return file_client_frr_proto_rawDescGZIP(), []int{2}
}

type RequestBgp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Operation BgpOperationType `protobuf:"varint,1,opt,name=operation,proto3,enum=client.BgpOperationType" json:"operation,omitempty"`
	Config    *BgpConfig       `protobuf:"bytes,2,opt,name=config,proto3" json:"config,omitempty"`
	Neighbor  *BgpNeighbor     `protobuf:"bytes,3,opt,name=neighbor,proto3" json:"neighbor,omitempty"`
	Network   *BgpNetwork      `protobuf:"bytes,4,opt,name=network,proto3" json:"network,omitempty"`
}

func (x *RequestBgp) Reset() {
	*x = RequestBgp{}
	mi := &file_client_frr_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RequestBgp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestBgp) ProtoMessage() {}

func (x *RequestBgp) ProtoReflect() protoreflect.Message {
	mi := &file_client_frr_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestBgp.ProtoReflect.Descriptor instead.
func (*RequestBgp) Descriptor() ([]byte, []int) {
	return file_client_frr_proto_rawDescGZIP(), []int{0}
}

func (x *RequestBgp) GetOperation() BgpOperationType {
	if x != nil {
		return x.Operation
	}
	return BgpOperationType_BGP_GET_CONFIG
}

func (x *RequestBgp) GetConfig() *BgpConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *RequestBgp) GetNeighbor() *BgpNeighbor {
	if x != nil {
		return x.Neighbor
	}
	return nil
}

func (x *RequestBgp) GetNetwork() *BgpNetwork {
	if x != nil {
		return x.Network
	}
	return nil
}

type ResponseBgp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Operation  BgpOperationType `protobuf:"varint,1,opt,name=operation,proto3,enum=client.BgpOperationType" json:"operation,omitempty"`
	Config     *BgpConfig       `protobuf:"bytes,2,opt,name=config,proto3" json:"config,omitempty"`
	Neighbors  []*BgpNeighbor   `protobuf:"bytes,3,rep,name=neighbors,proto3" json:"neighbors,omitempty"`
	Networks   []*BgpNetwork    `protobuf:"bytes,4,rep,name=networks,proto3" json:"networks,omitempty"`
	State      *BgpState        `protobuf:"bytes,5,opt,name=state,proto3" json:"state,omitempty"`
	Statistics *BgpStatistics   `protobuf:"bytes,6,opt,name=statistics,proto3" json:"statistics,omitempty"`
	Message    string           `protobuf:"bytes,7,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *ResponseBgp) Reset() {
	*x = ResponseBgp{}
	mi := &file_client_frr_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResponseBgp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseBgp) ProtoMessage() {}

func (x *ResponseBgp) ProtoReflect() protoreflect.Message {
	mi := &file_client_frr_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseBgp.ProtoReflect.Descriptor instead.
func (*ResponseBgp) Descriptor() ([]byte, []int) {
	return file_client_frr_proto_rawDescGZIP(), []int{1}
}

func (x *ResponseBgp) GetOperation() BgpOperationType {
	if x != nil {
		return x.Operation
	}
	return BgpOperationType_BGP_GET_CONFIG
}

func (x *ResponseBgp) GetConfig() *BgpConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *ResponseBgp) GetNeighbors() []*BgpNeighbor {
	if x != nil {
		return x.Neighbors
	}
	return nil
}

func (x *ResponseBgp) GetNetworks() []*BgpNetwork {
	if x != nil {
		return x.Networks
	}
	return nil
}

func (x *ResponseBgp) GetState() *BgpState {
	if x != nil {
		return x.State
	}
	return nil
}

func (x *ResponseBgp) GetStatistics() *BgpStatistics {
	if x != nil {
		return x.Statistics
	}
	return nil
}

func (x *ResponseBgp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type BgpConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AutonomousSystem      uint32         `protobuf:"varint,1,opt,name=autonomous_system,json=autonomousSystem,proto3" json:"autonomous_system,omitempty"`
	RouterId              string         `protobuf:"bytes,2,opt,name=router_id,json=routerId,proto3" json:"router_id,omitempty"`
	Neighbors             []*BgpNeighbor `protobuf:"bytes,3,rep,name=neighbors,proto3" json:"neighbors,omitempty"`
	Networks              []*BgpNetwork  `protobuf:"bytes,4,rep,name=networks,proto3" json:"networks,omitempty"`
	RedistributeConnected bool           `protobuf:"varint,5,opt,name=redistribute_connected,json=redistributeConnected,proto3" json:"redistribute_connected,omitempty"`
	RedistributeStatic    bool           `protobuf:"varint,6,opt,name=redistribute_static,json=redistributeStatic,proto3" json:"redistribute_static,omitempty"`
	KeepaliveTime         uint32         `protobuf:"varint,7,opt,name=keepalive_time,json=keepaliveTime,proto3" json:"keepalive_time,omitempty"`
	HoldTime              uint32         `protobuf:"varint,8,opt,name=hold_time,json=holdTime,proto3" json:"hold_time,omitempty"`
}

func (x *BgpConfig) Reset() {
	*x = BgpConfig{}
	mi := &file_client_frr_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BgpConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpConfig) ProtoMessage() {}

func (x *BgpConfig) ProtoReflect() protoreflect.Message {
	mi := &file_client_frr_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpConfig.ProtoReflect.Descriptor instead.
func (*BgpConfig) Descriptor() ([]byte, []int) {
	return file_client_frr_proto_rawDescGZIP(), []int{2}
}

func (x *BgpConfig) GetAutonomousSystem() uint32 {
	if x != nil {
		return x.AutonomousSystem
	}
	return 0
}

func (x *BgpConfig) GetRouterId() string {
	if x != nil {
		return x.RouterId
	}
	return ""
}

func (x *BgpConfig) GetNeighbors() []*BgpNeighbor {
	if x != nil {
		return x.Neighbors
	}
	return nil
}

func (x *BgpConfig) GetNetworks() []*BgpNetwork {
	if x != nil {
		return x.Networks
	}
	return nil
}

func (x *BgpConfig) GetRedistributeConnected() bool {
	if x != nil {
		return x.RedistributeConnected
	}
	return false
}

func (x *BgpConfig) GetRedistributeStatic() bool {
	if x != nil {
		return x.RedistributeStatic
	}
	return false
}

func (x *BgpConfig) GetKeepaliveTime() uint32 {
	if x != nil {
		return x.KeepaliveTime
	}
	return 0
}

func (x *BgpConfig) GetHoldTime() uint32 {
	if x != nil {
		return x.HoldTime
	}
	return 0
}

type BgpNeighbor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PeerIp       string   `protobuf:"bytes,1,opt,name=peer_ip,json=peerIp,proto3" json:"peer_ip,omitempty"`
	RemoteAs     uint32   `protobuf:"varint,2,opt,name=remote_as,json=remoteAs,proto3" json:"remote_as,omitempty"`
	Description  string   `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Password     string   `protobuf:"bytes,4,opt,name=password,proto3" json:"password,omitempty"`
	Enabled      bool     `protobuf:"varint,5,opt,name=enabled,proto3" json:"enabled,omitempty"`
	NextHopSelf  bool     `protobuf:"varint,6,opt,name=next_hop_self,json=nextHopSelf,proto3" json:"next_hop_self,omitempty"`
	Weight       uint32   `protobuf:"varint,7,opt,name=weight,proto3" json:"weight,omitempty"`
	RouteMapsIn  []string `protobuf:"bytes,8,rep,name=route_maps_in,json=routeMapsIn,proto3" json:"route_maps_in,omitempty"`
	RouteMapsOut []string `protobuf:"bytes,9,rep,name=route_maps_out,json=routeMapsOut,proto3" json:"route_maps_out,omitempty"`
}

func (x *BgpNeighbor) Reset() {
	*x = BgpNeighbor{}
	mi := &file_client_frr_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BgpNeighbor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpNeighbor) ProtoMessage() {}

func (x *BgpNeighbor) ProtoReflect() protoreflect.Message {
	mi := &file_client_frr_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpNeighbor.ProtoReflect.Descriptor instead.
func (*BgpNeighbor) Descriptor() ([]byte, []int) {
	return file_client_frr_proto_rawDescGZIP(), []int{3}
}

func (x *BgpNeighbor) GetPeerIp() string {
	if x != nil {
		return x.PeerIp
	}
	return ""
}

func (x *BgpNeighbor) GetRemoteAs() uint32 {
	if x != nil {
		return x.RemoteAs
	}
	return 0
}

func (x *BgpNeighbor) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *BgpNeighbor) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *BgpNeighbor) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *BgpNeighbor) GetNextHopSelf() bool {
	if x != nil {
		return x.NextHopSelf
	}
	return false
}

func (x *BgpNeighbor) GetWeight() uint32 {
	if x != nil {
		return x.Weight
	}
	return 0
}

func (x *BgpNeighbor) GetRouteMapsIn() []string {
	if x != nil {
		return x.RouteMapsIn
	}
	return nil
}

func (x *BgpNeighbor) GetRouteMapsOut() []string {
	if x != nil {
		return x.RouteMapsOut
	}
	return nil
}

type BgpNetwork struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Network   string `protobuf:"bytes,1,opt,name=network,proto3" json:"network,omitempty"`
	Mask      string `protobuf:"bytes,2,opt,name=mask,proto3" json:"mask,omitempty"`
	Advertise bool   `protobuf:"varint,3,opt,name=advertise,proto3" json:"advertise,omitempty"`
}

func (x *BgpNetwork) Reset() {
	*x = BgpNetwork{}
	mi := &file_client_frr_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BgpNetwork) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpNetwork) ProtoMessage() {}

func (x *BgpNetwork) ProtoReflect() protoreflect.Message {
	mi := &file_client_frr_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpNetwork.ProtoReflect.Descriptor instead.
func (*BgpNetwork) Descriptor() ([]byte, []int) {
	return file_client_frr_proto_rawDescGZIP(), []int{4}
}

func (x *BgpNetwork) GetNetwork() string {
	if x != nil {
		return x.Network
	}
	return ""
}

func (x *BgpNetwork) GetMask() string {
	if x != nil {
		return x.Mask
	}
	return ""
}

func (x *BgpNetwork) GetAdvertise() bool {
	if x != nil {
		return x.Advertise
	}
	return false
}

type BgpState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status         string              `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Uptime         uint32              `protobuf:"varint,2,opt,name=uptime,proto3" json:"uptime,omitempty"`
	NeighborStates []*BgpNeighborState `protobuf:"bytes,3,rep,name=neighbor_states,json=neighborStates,proto3" json:"neighbor_states,omitempty"`
	TotalRoutes    uint32              `protobuf:"varint,4,opt,name=total_routes,json=totalRoutes,proto3" json:"total_routes,omitempty"`
	BestRoutes     uint32              `protobuf:"varint,5,opt,name=best_routes,json=bestRoutes,proto3" json:"best_routes,omitempty"`
}

func (x *BgpState) Reset() {
	*x = BgpState{}
	mi := &file_client_frr_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BgpState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpState) ProtoMessage() {}

func (x *BgpState) ProtoReflect() protoreflect.Message {
	mi := &file_client_frr_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpState.ProtoReflect.Descriptor instead.
func (*BgpState) Descriptor() ([]byte, []int) {
	return file_client_frr_proto_rawDescGZIP(), []int{5}
}

func (x *BgpState) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *BgpState) GetUptime() uint32 {
	if x != nil {
		return x.Uptime
	}
	return 0
}

func (x *BgpState) GetNeighborStates() []*BgpNeighborState {
	if x != nil {
		return x.NeighborStates
	}
	return nil
}

func (x *BgpState) GetTotalRoutes() uint32 {
	if x != nil {
		return x.TotalRoutes
	}
	return 0
}

func (x *BgpState) GetBestRoutes() uint32 {
	if x != nil {
		return x.BestRoutes
	}
	return 0
}

type BgpNeighborState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PeerIp         string `protobuf:"bytes,1,opt,name=peer_ip,json=peerIp,proto3" json:"peer_ip,omitempty"`
	State          string `protobuf:"bytes,2,opt,name=state,proto3" json:"state,omitempty"`
	Uptime         uint32 `protobuf:"varint,3,opt,name=uptime,proto3" json:"uptime,omitempty"`
	ReceivedRoutes uint32 `protobuf:"varint,4,opt,name=received_routes,json=receivedRoutes,proto3" json:"received_routes,omitempty"`
	SentRoutes     uint32 `protobuf:"varint,5,opt,name=sent_routes,json=sentRoutes,proto3" json:"sent_routes,omitempty"`
}

func (x *BgpNeighborState) Reset() {
	*x = BgpNeighborState{}
	mi := &file_client_frr_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BgpNeighborState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpNeighborState) ProtoMessage() {}

func (x *BgpNeighborState) ProtoReflect() protoreflect.Message {
	mi := &file_client_frr_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpNeighborState.ProtoReflect.Descriptor instead.
func (*BgpNeighborState) Descriptor() ([]byte, []int) {
	return file_client_frr_proto_rawDescGZIP(), []int{6}
}

func (x *BgpNeighborState) GetPeerIp() string {
	if x != nil {
		return x.PeerIp
	}
	return ""
}

func (x *BgpNeighborState) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *BgpNeighborState) GetUptime() uint32 {
	if x != nil {
		return x.Uptime
	}
	return 0
}

func (x *BgpNeighborState) GetReceivedRoutes() uint32 {
	if x != nil {
		return x.ReceivedRoutes
	}
	return 0
}

func (x *BgpNeighborState) GetSentRoutes() uint32 {
	if x != nil {
		return x.SentRoutes
	}
	return 0
}

type BgpStatistics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TotalNeighbors       uint32 `protobuf:"varint,1,opt,name=total_neighbors,json=totalNeighbors,proto3" json:"total_neighbors,omitempty"`
	EstablishedNeighbors uint32 `protobuf:"varint,2,opt,name=established_neighbors,json=establishedNeighbors,proto3" json:"established_neighbors,omitempty"`
	TotalRoutes          uint32 `protobuf:"varint,3,opt,name=total_routes,json=totalRoutes,proto3" json:"total_routes,omitempty"`
	Ipv4Routes           uint32 `protobuf:"varint,4,opt,name=ipv4_routes,json=ipv4Routes,proto3" json:"ipv4_routes,omitempty"`
	Ipv6Routes           uint32 `protobuf:"varint,5,opt,name=ipv6_routes,json=ipv6Routes,proto3" json:"ipv6_routes,omitempty"`
	MemoryUsage          uint32 `protobuf:"varint,6,opt,name=memory_usage,json=memoryUsage,proto3" json:"memory_usage,omitempty"`
}

func (x *BgpStatistics) Reset() {
	*x = BgpStatistics{}
	mi := &file_client_frr_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BgpStatistics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpStatistics) ProtoMessage() {}

func (x *BgpStatistics) ProtoReflect() protoreflect.Message {
	mi := &file_client_frr_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpStatistics.ProtoReflect.Descriptor instead.
func (*BgpStatistics) Descriptor() ([]byte, []int) {
	return file_client_frr_proto_rawDescGZIP(), []int{7}
}

func (x *BgpStatistics) GetTotalNeighbors() uint32 {
	if x != nil {
		return x.TotalNeighbors
	}
	return 0
}

func (x *BgpStatistics) GetEstablishedNeighbors() uint32 {
	if x != nil {
		return x.EstablishedNeighbors
	}
	return 0
}

func (x *BgpStatistics) GetTotalRoutes() uint32 {
	if x != nil {
		return x.TotalRoutes
	}
	return 0
}

func (x *BgpStatistics) GetIpv4Routes() uint32 {
	if x != nil {
		return x.Ipv4Routes
	}
	return 0
}

func (x *BgpStatistics) GetIpv6Routes() uint32 {
	if x != nil {
		return x.Ipv6Routes
	}
	return 0
}

func (x *BgpStatistics) GetMemoryUsage() uint32 {
	if x != nil {
		return x.MemoryUsage
	}
	return 0
}

type RequestStatic struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Operation StaticOperationType `protobuf:"varint,1,opt,name=operation,proto3,enum=client.StaticOperationType" json:"operation,omitempty"`
	Config    *StaticConfig       `protobuf:"bytes,2,opt,name=config,proto3" json:"config,omitempty"`
	Route     *StaticRoute        `protobuf:"bytes,3,opt,name=route,proto3" json:"route,omitempty"`
	Routes    []*StaticRoute      `protobuf:"bytes,4,rep,name=routes,proto3" json:"routes,omitempty"`
}

func (x *RequestStatic) Reset() {
	*x = RequestStatic{}
	mi := &file_client_frr_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RequestStatic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestStatic) ProtoMessage() {}

func (x *RequestStatic) ProtoReflect() protoreflect.Message {
	mi := &file_client_frr_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestStatic.ProtoReflect.Descriptor instead.
func (*RequestStatic) Descriptor() ([]byte, []int) {
	return file_client_frr_proto_rawDescGZIP(), []int{8}
}

func (x *RequestStatic) GetOperation() StaticOperationType {
	if x != nil {
		return x.Operation
	}
	return StaticOperationType_STATIC_GET_ROUTES
}

func (x *RequestStatic) GetConfig() *StaticConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *RequestStatic) GetRoute() *StaticRoute {
	if x != nil {
		return x.Route
	}
	return nil
}

func (x *RequestStatic) GetRoutes() []*StaticRoute {
	if x != nil {
		return x.Routes
	}
	return nil
}

type ResponseStatic struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Operation  StaticOperationType `protobuf:"varint,1,opt,name=operation,proto3,enum=client.StaticOperationType" json:"operation,omitempty"`
	Config     *StaticConfig       `protobuf:"bytes,2,opt,name=config,proto3" json:"config,omitempty"`
	Routes     []*StaticRoute      `protobuf:"bytes,3,rep,name=routes,proto3" json:"routes,omitempty"`
	Statistics *StaticStatistics   `protobuf:"bytes,4,opt,name=statistics,proto3" json:"statistics,omitempty"`
	Message    string              `protobuf:"bytes,5,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *ResponseStatic) Reset() {
	*x = ResponseStatic{}
	mi := &file_client_frr_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResponseStatic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseStatic) ProtoMessage() {}

func (x *ResponseStatic) ProtoReflect() protoreflect.Message {
	mi := &file_client_frr_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseStatic.ProtoReflect.Descriptor instead.
func (*ResponseStatic) Descriptor() ([]byte, []int) {
	return file_client_frr_proto_rawDescGZIP(), []int{9}
}

func (x *ResponseStatic) GetOperation() StaticOperationType {
	if x != nil {
		return x.Operation
	}
	return StaticOperationType_STATIC_GET_ROUTES
}

func (x *ResponseStatic) GetConfig() *StaticConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *ResponseStatic) GetRoutes() []*StaticRoute {
	if x != nil {
		return x.Routes
	}
	return nil
}

func (x *ResponseStatic) GetStatistics() *StaticStatistics {
	if x != nil {
		return x.Statistics
	}
	return nil
}

func (x *ResponseStatic) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type StaticRoute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Destination string   `protobuf:"bytes,1,opt,name=destination,proto3" json:"destination,omitempty"` // 192.168.1.0/24
	Gateway     string   `protobuf:"bytes,2,opt,name=gateway,proto3" json:"gateway,omitempty"`         // 10.0.0.1
	Interface   string   `protobuf:"bytes,3,opt,name=interface,proto3" json:"interface,omitempty"`     // eth0 (optional)
	Metric      uint32   `protobuf:"varint,4,opt,name=metric,proto3" json:"metric,omitempty"`          // Route metric
	Distance    uint32   `protobuf:"varint,5,opt,name=distance,proto3" json:"distance,omitempty"`      // Administrative distance (1-255)
	Tag         string   `protobuf:"bytes,6,opt,name=tag,proto3" json:"tag,omitempty"`                 // Route tag (optional)
	Blackhole   bool     `protobuf:"varint,7,opt,name=blackhole,proto3" json:"blackhole,omitempty"`    // Blackhole route
	Reject      bool     `protobuf:"varint,8,opt,name=reject,proto3" json:"reject,omitempty"`          // Reject route
	Vrf         string   `protobuf:"bytes,9,opt,name=vrf,proto3" json:"vrf,omitempty"`                 // VRF name (optional)
	Nexthops    []string `protobuf:"bytes,10,rep,name=nexthops,proto3" json:"nexthops,omitempty"`      // Multiple nexthops for ECMP
	Enabled     bool     `protobuf:"varint,11,opt,name=enabled,proto3" json:"enabled,omitempty"`       // Route enabled/disabled
}

func (x *StaticRoute) Reset() {
	*x = StaticRoute{}
	mi := &file_client_frr_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StaticRoute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StaticRoute) ProtoMessage() {}

func (x *StaticRoute) ProtoReflect() protoreflect.Message {
	mi := &file_client_frr_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StaticRoute.ProtoReflect.Descriptor instead.
func (*StaticRoute) Descriptor() ([]byte, []int) {
	return file_client_frr_proto_rawDescGZIP(), []int{10}
}

func (x *StaticRoute) GetDestination() string {
	if x != nil {
		return x.Destination
	}
	return ""
}

func (x *StaticRoute) GetGateway() string {
	if x != nil {
		return x.Gateway
	}
	return ""
}

func (x *StaticRoute) GetInterface() string {
	if x != nil {
		return x.Interface
	}
	return ""
}

func (x *StaticRoute) GetMetric() uint32 {
	if x != nil {
		return x.Metric
	}
	return 0
}

func (x *StaticRoute) GetDistance() uint32 {
	if x != nil {
		return x.Distance
	}
	return 0
}

func (x *StaticRoute) GetTag() string {
	if x != nil {
		return x.Tag
	}
	return ""
}

func (x *StaticRoute) GetBlackhole() bool {
	if x != nil {
		return x.Blackhole
	}
	return false
}

func (x *StaticRoute) GetReject() bool {
	if x != nil {
		return x.Reject
	}
	return false
}

func (x *StaticRoute) GetVrf() string {
	if x != nil {
		return x.Vrf
	}
	return ""
}

func (x *StaticRoute) GetNexthops() []string {
	if x != nil {
		return x.Nexthops
	}
	return nil
}

func (x *StaticRoute) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

type StaticConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Routes          []*StaticRoute `protobuf:"bytes,1,rep,name=routes,proto3" json:"routes,omitempty"`
	Ipv6Enabled     bool           `protobuf:"varint,2,opt,name=ipv6_enabled,json=ipv6Enabled,proto3" json:"ipv6_enabled,omitempty"`
	DefaultDistance uint32         `protobuf:"varint,3,opt,name=default_distance,json=defaultDistance,proto3" json:"default_distance,omitempty"`
	Vrfs            []string       `protobuf:"bytes,4,rep,name=vrfs,proto3" json:"vrfs,omitempty"`
	EcmpEnabled     bool           `protobuf:"varint,5,opt,name=ecmp_enabled,json=ecmpEnabled,proto3" json:"ecmp_enabled,omitempty"`
}

func (x *StaticConfig) Reset() {
	*x = StaticConfig{}
	mi := &file_client_frr_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StaticConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StaticConfig) ProtoMessage() {}

func (x *StaticConfig) ProtoReflect() protoreflect.Message {
	mi := &file_client_frr_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StaticConfig.ProtoReflect.Descriptor instead.
func (*StaticConfig) Descriptor() ([]byte, []int) {
	return file_client_frr_proto_rawDescGZIP(), []int{11}
}

func (x *StaticConfig) GetRoutes() []*StaticRoute {
	if x != nil {
		return x.Routes
	}
	return nil
}

func (x *StaticConfig) GetIpv6Enabled() bool {
	if x != nil {
		return x.Ipv6Enabled
	}
	return false
}

func (x *StaticConfig) GetDefaultDistance() uint32 {
	if x != nil {
		return x.DefaultDistance
	}
	return 0
}

func (x *StaticConfig) GetVrfs() []string {
	if x != nil {
		return x.Vrfs
	}
	return nil
}

func (x *StaticConfig) GetEcmpEnabled() bool {
	if x != nil {
		return x.EcmpEnabled
	}
	return false
}

type StaticStatistics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TotalRoutes     uint32               `protobuf:"varint,1,opt,name=total_routes,json=totalRoutes,proto3" json:"total_routes,omitempty"`
	Ipv4Routes      uint32               `protobuf:"varint,2,opt,name=ipv4_routes,json=ipv4Routes,proto3" json:"ipv4_routes,omitempty"`
	Ipv6Routes      uint32               `protobuf:"varint,3,opt,name=ipv6_routes,json=ipv6Routes,proto3" json:"ipv6_routes,omitempty"`
	BlackholeRoutes uint32               `protobuf:"varint,4,opt,name=blackhole_routes,json=blackholeRoutes,proto3" json:"blackhole_routes,omitempty"`
	RejectRoutes    uint32               `protobuf:"varint,5,opt,name=reject_routes,json=rejectRoutes,proto3" json:"reject_routes,omitempty"`
	ActiveRoutes    uint32               `protobuf:"varint,6,opt,name=active_routes,json=activeRoutes,proto3" json:"active_routes,omitempty"`
	InactiveRoutes  uint32               `protobuf:"varint,7,opt,name=inactive_routes,json=inactiveRoutes,proto3" json:"inactive_routes,omitempty"`
	RouteStatus     []*StaticRouteStatus `protobuf:"bytes,8,rep,name=route_status,json=routeStatus,proto3" json:"route_status,omitempty"`
}

func (x *StaticStatistics) Reset() {
	*x = StaticStatistics{}
	mi := &file_client_frr_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StaticStatistics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StaticStatistics) ProtoMessage() {}

func (x *StaticStatistics) ProtoReflect() protoreflect.Message {
	mi := &file_client_frr_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StaticStatistics.ProtoReflect.Descriptor instead.
func (*StaticStatistics) Descriptor() ([]byte, []int) {
	return file_client_frr_proto_rawDescGZIP(), []int{12}
}

func (x *StaticStatistics) GetTotalRoutes() uint32 {
	if x != nil {
		return x.TotalRoutes
	}
	return 0
}

func (x *StaticStatistics) GetIpv4Routes() uint32 {
	if x != nil {
		return x.Ipv4Routes
	}
	return 0
}

func (x *StaticStatistics) GetIpv6Routes() uint32 {
	if x != nil {
		return x.Ipv6Routes
	}
	return 0
}

func (x *StaticStatistics) GetBlackholeRoutes() uint32 {
	if x != nil {
		return x.BlackholeRoutes
	}
	return 0
}

func (x *StaticStatistics) GetRejectRoutes() uint32 {
	if x != nil {
		return x.RejectRoutes
	}
	return 0
}

func (x *StaticStatistics) GetActiveRoutes() uint32 {
	if x != nil {
		return x.ActiveRoutes
	}
	return 0
}

func (x *StaticStatistics) GetInactiveRoutes() uint32 {
	if x != nil {
		return x.InactiveRoutes
	}
	return 0
}

func (x *StaticStatistics) GetRouteStatus() []*StaticRouteStatus {
	if x != nil {
		return x.RouteStatus
	}
	return nil
}

type StaticRouteStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Destination string `protobuf:"bytes,1,opt,name=destination,proto3" json:"destination,omitempty"`
	Gateway     string `protobuf:"bytes,2,opt,name=gateway,proto3" json:"gateway,omitempty"`
	Active      bool   `protobuf:"varint,3,opt,name=active,proto3" json:"active,omitempty"`
	Status      string `protobuf:"bytes,4,opt,name=status,proto3" json:"status,omitempty"` // "installed", "pending", "failed"
	LastUpdate  string `protobuf:"bytes,5,opt,name=last_update,json=lastUpdate,proto3" json:"last_update,omitempty"`
	Interface   string `protobuf:"bytes,6,opt,name=interface,proto3" json:"interface,omitempty"`
}

func (x *StaticRouteStatus) Reset() {
	*x = StaticRouteStatus{}
	mi := &file_client_frr_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StaticRouteStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StaticRouteStatus) ProtoMessage() {}

func (x *StaticRouteStatus) ProtoReflect() protoreflect.Message {
	mi := &file_client_frr_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StaticRouteStatus.ProtoReflect.Descriptor instead.
func (*StaticRouteStatus) Descriptor() ([]byte, []int) {
	return file_client_frr_proto_rawDescGZIP(), []int{13}
}

func (x *StaticRouteStatus) GetDestination() string {
	if x != nil {
		return x.Destination
	}
	return ""
}

func (x *StaticRouteStatus) GetGateway() string {
	if x != nil {
		return x.Gateway
	}
	return ""
}

func (x *StaticRouteStatus) GetActive() bool {
	if x != nil {
		return x.Active
	}
	return false
}

func (x *StaticRouteStatus) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *StaticRouteStatus) GetLastUpdate() string {
	if x != nil {
		return x.LastUpdate
	}
	return ""
}

func (x *StaticRouteStatus) GetInterface() string {
	if x != nil {
		return x.Interface
	}
	return ""
}

var File_client_frr_proto protoreflect.FileDescriptor

var file_client_frr_proto_rawDesc = []byte{
	0x0a, 0x10, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2f, 0x66, 0x72, 0x72, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x06, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x22, 0xce, 0x01, 0x0a, 0x0a, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x67, 0x70, 0x12, 0x36, 0x0a, 0x09, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x42, 0x67, 0x70, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x29, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x42, 0x67, 0x70, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x2f, 0x0a, 0x08,
	0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x42, 0x67, 0x70, 0x4e, 0x65, 0x69, 0x67, 0x68,
	0x62, 0x6f, 0x72, 0x52, 0x08, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x12, 0x2c, 0x0a,
	0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x42, 0x67, 0x70, 0x4e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x52, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x22, 0xcc, 0x02, 0x0a, 0x0b,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x67, 0x70, 0x12, 0x36, 0x0a, 0x09, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18,
	0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x42, 0x67, 0x70, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x42, 0x67, 0x70,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x31,
	0x0a, 0x09, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x42, 0x67, 0x70, 0x4e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x52, 0x09, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x73, 0x12, 0x2e, 0x0a, 0x08, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x42, 0x67, 0x70,
	0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x08, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x73, 0x12, 0x26, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x10, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x42, 0x67, 0x70, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x35, 0x0a, 0x0a, 0x73, 0x74, 0x61,
	0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x42, 0x67, 0x70, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x73, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73,
	0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xe4, 0x02, 0x0a, 0x09, 0x42,
	0x67, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x2b, 0x0a, 0x11, 0x61, 0x75, 0x74, 0x6f,
	0x6e, 0x6f, 0x6d, 0x6f, 0x75, 0x73, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x10, 0x61, 0x75, 0x74, 0x6f, 0x6e, 0x6f, 0x6d, 0x6f, 0x75, 0x73, 0x53,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x31, 0x0a, 0x09, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x42,
	0x67, 0x70, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x52, 0x09, 0x6e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x73, 0x12, 0x2e, 0x0a, 0x08, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x2e, 0x42, 0x67, 0x70, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x08, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x73, 0x12, 0x35, 0x0a, 0x16, 0x72, 0x65, 0x64, 0x69, 0x73, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x72, 0x65, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x12, 0x2f, 0x0a, 0x13,
	0x72, 0x65, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x69, 0x63, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x72, 0x65, 0x64, 0x69, 0x73,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x12, 0x25, 0x0a,
	0x0e, 0x6b, 0x65, 0x65, 0x70, 0x61, 0x6c, 0x69, 0x76, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x6b, 0x65, 0x65, 0x70, 0x61, 0x6c, 0x69, 0x76, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x68, 0x6f, 0x6c, 0x64, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x68, 0x6f, 0x6c, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x22, 0xa1, 0x02, 0x0a, 0x0b, 0x42, 0x67, 0x70, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f,
	0x72, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x69, 0x70, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x70, 0x65, 0x65, 0x72, 0x49, 0x70, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65,
	0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x61, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x72,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x41, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12,
	0x22, 0x0a, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x68, 0x6f, 0x70, 0x5f, 0x73, 0x65, 0x6c, 0x66,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x6e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x53,
	0x65, 0x6c, 0x66, 0x12, 0x16, 0x0a, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x22, 0x0a, 0x0d, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x70, 0x73, 0x5f, 0x69, 0x6e, 0x18, 0x08, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0b, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x4d, 0x61, 0x70, 0x73, 0x49, 0x6e, 0x12,
	0x24, 0x0a, 0x0e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x70, 0x73, 0x5f, 0x6f, 0x75,
	0x74, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x4d, 0x61,
	0x70, 0x73, 0x4f, 0x75, 0x74, 0x22, 0x58, 0x0a, 0x0a, 0x42, 0x67, 0x70, 0x4e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x12, 0x18, 0x0a, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x12, 0x0a,
	0x04, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x61, 0x73,
	0x6b, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x22,
	0xc1, 0x01, 0x0a, 0x08, 0x42, 0x67, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x75, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x41, 0x0a, 0x0f,
	0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x42,
	0x67, 0x70, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52,
	0x0e, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x12,
	0x21, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x6f, 0x75, 0x74,
	0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x62, 0x65, 0x73, 0x74, 0x52, 0x6f, 0x75,
	0x74, 0x65, 0x73, 0x22, 0xa3, 0x01, 0x0a, 0x10, 0x42, 0x67, 0x70, 0x4e, 0x65, 0x69, 0x67, 0x68,
	0x62, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x65, 0x65, 0x72,
	0x5f, 0x69, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x65, 0x65, 0x72, 0x49,
	0x70, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x70, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x75, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x12,
	0x27, 0x0a, 0x0f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x5f, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x64, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x6e, 0x74,
	0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73,
	0x65, 0x6e, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x22, 0xf5, 0x01, 0x0a, 0x0d, 0x42, 0x67,
	0x70, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4e, 0x65, 0x69, 0x67, 0x68,
	0x62, 0x6f, 0x72, 0x73, 0x12, 0x33, 0x0a, 0x15, 0x65, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x69, 0x73,
	0x68, 0x65, 0x64, 0x5f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x14, 0x65, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64,
	0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b,
	0x69, 0x70, 0x76, 0x34, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0a, 0x69, 0x70, 0x76, 0x34, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x12, 0x1f, 0x0a,
	0x0b, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0a, 0x69, 0x70, 0x76, 0x36, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x12, 0x21,
	0x0a, 0x0c, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x55, 0x73, 0x61, 0x67,
	0x65, 0x22, 0xd0, 0x01, 0x0a, 0x0d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x69, 0x63, 0x12, 0x39, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2c,
	0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x29, 0x0a, 0x05,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x52, 0x6f, 0x75, 0x74, 0x65,
	0x52, 0x05, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x12, 0x2b, 0x0a, 0x06, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x06, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x73, 0x22, 0xfa, 0x01, 0x0a, 0x0e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x12, 0x39, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x69, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x2b, 0x0a, 0x06, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63,
	0x52, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x06, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x12, 0x38, 0x0a,
	0x0a, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69,
	0x63, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x0a, 0x73, 0x74, 0x61,
	0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x22, 0xab, 0x02, 0x0a, 0x0b, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x52, 0x6f, 0x75, 0x74,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x12, 0x1c, 0x0a,
	0x09, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12,
	0x10, 0x0a, 0x03, 0x74, 0x61, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x74, 0x61,
	0x67, 0x12, 0x1c, 0x0a, 0x09, 0x62, 0x6c, 0x61, 0x63, 0x6b, 0x68, 0x6f, 0x6c, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x62, 0x6c, 0x61, 0x63, 0x6b, 0x68, 0x6f, 0x6c, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x06, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x76, 0x72, 0x66, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x76, 0x72, 0x66, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x65, 0x78,
	0x74, 0x68, 0x6f, 0x70, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x65, 0x78,
	0x74, 0x68, 0x6f, 0x70, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x22,
	0xc0, 0x01, 0x0a, 0x0c, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x2b, 0x0a, 0x06, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63,
	0x52, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x06, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x12, 0x21, 0x0a,
	0x0c, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x70, 0x76, 0x36, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x12, 0x29, 0x0a, 0x10, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x64, 0x69, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x64, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x44, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x76,
	0x72, 0x66, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x76, 0x72, 0x66, 0x73, 0x12,
	0x21, 0x0a, 0x0c, 0x65, 0x63, 0x6d, 0x70, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x65, 0x63, 0x6d, 0x70, 0x45, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x22, 0xd3, 0x02, 0x0a, 0x10, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x53, 0x74, 0x61,
	0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x70,
	0x76, 0x34, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0a, 0x69, 0x70, 0x76, 0x34, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x69,
	0x70, 0x76, 0x36, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0a, 0x69, 0x70, 0x76, 0x36, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x12, 0x29, 0x0a, 0x10,
	0x62, 0x6c, 0x61, 0x63, 0x6b, 0x68, 0x6f, 0x6c, 0x65, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x62, 0x6c, 0x61, 0x63, 0x6b, 0x68, 0x6f, 0x6c,
	0x65, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x6a, 0x65, 0x63,
	0x74, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c,
	0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x12, 0x23, 0x0a, 0x0d,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x52, 0x6f, 0x75, 0x74, 0x65,
	0x73, 0x12, 0x27, 0x0a, 0x0f, 0x69, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x69, 0x6e, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x12, 0x3c, 0x0a, 0x0c, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63,
	0x52, 0x6f, 0x75, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0b, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xbe, 0x01, 0x0a, 0x11, 0x53, 0x74, 0x61,
	0x74, 0x69, 0x63, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x20,
	0x0a, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x18, 0x0a, 0x07, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x61,
	0x73, 0x74, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2a, 0x40, 0x0a, 0x0f, 0x46, 0x72, 0x72,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x10,
	0x46, 0x52, 0x52, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x42, 0x47, 0x50,
	0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x46, 0x52, 0x52, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43,
	0x4f, 0x4c, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x49, 0x43, 0x10, 0x01, 0x2a, 0xf0, 0x02, 0x0a, 0x10,
	0x42, 0x67, 0x70, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x12, 0x0a, 0x0e, 0x42, 0x47, 0x50, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x43, 0x4f, 0x4e, 0x46,
	0x49, 0x47, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x42, 0x47, 0x50, 0x5f, 0x53, 0x45, 0x54, 0x5f,
	0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x42, 0x47, 0x50, 0x5f,
	0x47, 0x45, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x42,
	0x47, 0x50, 0x5f, 0x41, 0x44, 0x44, 0x5f, 0x4e, 0x45, 0x49, 0x47, 0x48, 0x42, 0x4f, 0x52, 0x10,
	0x03, 0x12, 0x17, 0x0a, 0x13, 0x42, 0x47, 0x50, 0x5f, 0x52, 0x45, 0x4d, 0x4f, 0x56, 0x45, 0x5f,
	0x4e, 0x45, 0x49, 0x47, 0x48, 0x42, 0x4f, 0x52, 0x10, 0x04, 0x12, 0x17, 0x0a, 0x13, 0x42, 0x47,
	0x50, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x4e, 0x45, 0x49, 0x47, 0x48, 0x42, 0x4f,
	0x52, 0x10, 0x05, 0x12, 0x16, 0x0a, 0x12, 0x42, 0x47, 0x50, 0x5f, 0x52, 0x45, 0x53, 0x45, 0x54,
	0x5f, 0x4e, 0x45, 0x49, 0x47, 0x48, 0x42, 0x4f, 0x52, 0x10, 0x06, 0x12, 0x15, 0x0a, 0x11, 0x42,
	0x47, 0x50, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x4e, 0x45, 0x49, 0x47, 0x48, 0x42, 0x4f, 0x52, 0x53,
	0x10, 0x07, 0x12, 0x13, 0x0a, 0x0f, 0x42, 0x47, 0x50, 0x5f, 0x41, 0x44, 0x44, 0x5f, 0x4e, 0x45,
	0x54, 0x57, 0x4f, 0x52, 0x4b, 0x10, 0x08, 0x12, 0x16, 0x0a, 0x12, 0x42, 0x47, 0x50, 0x5f, 0x52,
	0x45, 0x4d, 0x4f, 0x56, 0x45, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x10, 0x09, 0x12,
	0x12, 0x0a, 0x0e, 0x42, 0x47, 0x50, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x45,
	0x53, 0x10, 0x0a, 0x12, 0x16, 0x0a, 0x12, 0x42, 0x47, 0x50, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x49, 0x53, 0x54, 0x49, 0x43, 0x53, 0x10, 0x0b, 0x12, 0x16, 0x0a, 0x12, 0x42,
	0x47, 0x50, 0x5f, 0x43, 0x4c, 0x45, 0x41, 0x52, 0x5f, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e,
	0x53, 0x10, 0x0c, 0x12, 0x12, 0x0a, 0x0e, 0x42, 0x47, 0x50, 0x5f, 0x53, 0x4f, 0x46, 0x54, 0x5f,
	0x52, 0x45, 0x53, 0x45, 0x54, 0x10, 0x0d, 0x12, 0x10, 0x0a, 0x0c, 0x42, 0x47, 0x50, 0x5f, 0x53,
	0x48, 0x55, 0x54, 0x44, 0x4f, 0x57, 0x4e, 0x10, 0x0e, 0x12, 0x13, 0x0a, 0x0f, 0x42, 0x47, 0x50,
	0x5f, 0x4e, 0x4f, 0x5f, 0x53, 0x48, 0x55, 0x54, 0x44, 0x4f, 0x57, 0x4e, 0x10, 0x0f, 0x2a, 0xed,
	0x01, 0x0a, 0x13, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x54, 0x41, 0x54, 0x49, 0x43,
	0x5f, 0x47, 0x45, 0x54, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x53, 0x10, 0x00, 0x12, 0x14, 0x0a,
	0x10, 0x53, 0x54, 0x41, 0x54, 0x49, 0x43, 0x5f, 0x41, 0x44, 0x44, 0x5f, 0x52, 0x4f, 0x55, 0x54,
	0x45, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x54, 0x41, 0x54, 0x49, 0x43, 0x5f, 0x52, 0x45,
	0x4d, 0x4f, 0x56, 0x45, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x10, 0x02, 0x12, 0x17, 0x0a, 0x13,
	0x53, 0x54, 0x41, 0x54, 0x49, 0x43, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x52, 0x4f,
	0x55, 0x54, 0x45, 0x10, 0x03, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x54, 0x41, 0x54, 0x49, 0x43, 0x5f,
	0x47, 0x45, 0x54, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x10, 0x04, 0x12, 0x15, 0x0a, 0x11,
	0x53, 0x54, 0x41, 0x54, 0x49, 0x43, 0x5f, 0x53, 0x45, 0x54, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49,
	0x47, 0x10, 0x05, 0x12, 0x1b, 0x0a, 0x17, 0x53, 0x54, 0x41, 0x54, 0x49, 0x43, 0x5f, 0x43, 0x4c,
	0x45, 0x41, 0x52, 0x5f, 0x41, 0x4c, 0x4c, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x53, 0x10, 0x06,
	0x12, 0x19, 0x0a, 0x15, 0x53, 0x54, 0x41, 0x54, 0x49, 0x43, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x49, 0x53, 0x54, 0x49, 0x43, 0x53, 0x10, 0x07, 0x12, 0x11, 0x0a, 0x0d, 0x53,
	0x54, 0x41, 0x54, 0x49, 0x43, 0x5f, 0x52, 0x45, 0x4c, 0x4f, 0x41, 0x44, 0x10, 0x08, 0x42, 0x2d,
	0x5a, 0x2b, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x45, 0x6c, 0x63,
	0x68, 0x69, 0x54, 0x68, 0x65, 0x47, 0x72, 0x65, 0x61, 0x74, 0x2f, 0x65, 0x6c, 0x63, 0x68, 0x69,
	0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_client_frr_proto_rawDescOnce sync.Once
	file_client_frr_proto_rawDescData = file_client_frr_proto_rawDesc
)

func file_client_frr_proto_rawDescGZIP() []byte {
	file_client_frr_proto_rawDescOnce.Do(func() {
		file_client_frr_proto_rawDescData = protoimpl.X.CompressGZIP(file_client_frr_proto_rawDescData)
	})
	return file_client_frr_proto_rawDescData
}

var file_client_frr_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_client_frr_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_client_frr_proto_goTypes = []any{
	(FrrProtocolType)(0),      // 0: client.FrrProtocolType
	(BgpOperationType)(0),     // 1: client.BgpOperationType
	(StaticOperationType)(0),  // 2: client.StaticOperationType
	(*RequestBgp)(nil),        // 3: client.RequestBgp
	(*ResponseBgp)(nil),       // 4: client.ResponseBgp
	(*BgpConfig)(nil),         // 5: client.BgpConfig
	(*BgpNeighbor)(nil),       // 6: client.BgpNeighbor
	(*BgpNetwork)(nil),        // 7: client.BgpNetwork
	(*BgpState)(nil),          // 8: client.BgpState
	(*BgpNeighborState)(nil),  // 9: client.BgpNeighborState
	(*BgpStatistics)(nil),     // 10: client.BgpStatistics
	(*RequestStatic)(nil),     // 11: client.RequestStatic
	(*ResponseStatic)(nil),    // 12: client.ResponseStatic
	(*StaticRoute)(nil),       // 13: client.StaticRoute
	(*StaticConfig)(nil),      // 14: client.StaticConfig
	(*StaticStatistics)(nil),  // 15: client.StaticStatistics
	(*StaticRouteStatus)(nil), // 16: client.StaticRouteStatus
}
var file_client_frr_proto_depIdxs = []int32{
	1,  // 0: client.RequestBgp.operation:type_name -> client.BgpOperationType
	5,  // 1: client.RequestBgp.config:type_name -> client.BgpConfig
	6,  // 2: client.RequestBgp.neighbor:type_name -> client.BgpNeighbor
	7,  // 3: client.RequestBgp.network:type_name -> client.BgpNetwork
	1,  // 4: client.ResponseBgp.operation:type_name -> client.BgpOperationType
	5,  // 5: client.ResponseBgp.config:type_name -> client.BgpConfig
	6,  // 6: client.ResponseBgp.neighbors:type_name -> client.BgpNeighbor
	7,  // 7: client.ResponseBgp.networks:type_name -> client.BgpNetwork
	8,  // 8: client.ResponseBgp.state:type_name -> client.BgpState
	10, // 9: client.ResponseBgp.statistics:type_name -> client.BgpStatistics
	6,  // 10: client.BgpConfig.neighbors:type_name -> client.BgpNeighbor
	7,  // 11: client.BgpConfig.networks:type_name -> client.BgpNetwork
	9,  // 12: client.BgpState.neighbor_states:type_name -> client.BgpNeighborState
	2,  // 13: client.RequestStatic.operation:type_name -> client.StaticOperationType
	14, // 14: client.RequestStatic.config:type_name -> client.StaticConfig
	13, // 15: client.RequestStatic.route:type_name -> client.StaticRoute
	13, // 16: client.RequestStatic.routes:type_name -> client.StaticRoute
	2,  // 17: client.ResponseStatic.operation:type_name -> client.StaticOperationType
	14, // 18: client.ResponseStatic.config:type_name -> client.StaticConfig
	13, // 19: client.ResponseStatic.routes:type_name -> client.StaticRoute
	15, // 20: client.ResponseStatic.statistics:type_name -> client.StaticStatistics
	13, // 21: client.StaticConfig.routes:type_name -> client.StaticRoute
	16, // 22: client.StaticStatistics.route_status:type_name -> client.StaticRouteStatus
	23, // [23:23] is the sub-list for method output_type
	23, // [23:23] is the sub-list for method input_type
	23, // [23:23] is the sub-list for extension type_name
	23, // [23:23] is the sub-list for extension extendee
	0,  // [0:23] is the sub-list for field type_name
}

func init() { file_client_frr_proto_init() }
func file_client_frr_proto_init() {
	if File_client_frr_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_client_frr_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_client_frr_proto_goTypes,
		DependencyIndexes: file_client_frr_proto_depIdxs,
		EnumInfos:         file_client_frr_proto_enumTypes,
		MessageInfos:      file_client_frr_proto_msgTypes,
	}.Build()
	File_client_frr_proto = out.File
	file_client_frr_proto_rawDesc = nil
	file_client_frr_proto_goTypes = nil
	file_client_frr_proto_depIdxs = nil
}
