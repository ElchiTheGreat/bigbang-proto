// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.1
// 	protoc        v5.28.2
// source: client/frr.proto

package client

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type FrrProtocolType int32

const (
	FrrProtocolType_FRR_PROTOCOL_UNKNOWN FrrProtocolType = 0
	FrrProtocolType_FRR_PROTOCOL_BGP     FrrProtocolType = 1
	FrrProtocolType_FRR_PROTOCOL_STATIC  FrrProtocolType = 2
	FrrProtocolType_FRR_PROTOCOL_OSPF    FrrProtocolType = 3 // Future
	FrrProtocolType_FRR_PROTOCOL_RIP     FrrProtocolType = 4 // Future
	FrrProtocolType_FRR_PROTOCOL_ISIS    FrrProtocolType = 5 // Future
)

// Enum value maps for FrrProtocolType.
var (
	FrrProtocolType_name = map[int32]string{
		0: "FRR_PROTOCOL_UNKNOWN",
		1: "FRR_PROTOCOL_BGP",
		2: "FRR_PROTOCOL_STATIC",
		3: "FRR_PROTOCOL_OSPF",
		4: "FRR_PROTOCOL_RIP",
		5: "FRR_PROTOCOL_ISIS",
	}
	FrrProtocolType_value = map[string]int32{
		"FRR_PROTOCOL_UNKNOWN": 0,
		"FRR_PROTOCOL_BGP":     1,
		"FRR_PROTOCOL_STATIC":  2,
		"FRR_PROTOCOL_OSPF":    3,
		"FRR_PROTOCOL_RIP":     4,
		"FRR_PROTOCOL_ISIS":    5,
	}
)

func (x FrrProtocolType) Enum() *FrrProtocolType {
	p := new(FrrProtocolType)
	*p = x
	return p
}

func (x FrrProtocolType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FrrProtocolType) Descriptor() protoreflect.EnumDescriptor {
	return file_client_frr_proto_enumTypes[0].Descriptor()
}

func (FrrProtocolType) Type() protoreflect.EnumType {
	return &file_client_frr_proto_enumTypes[0]
}

func (x FrrProtocolType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FrrProtocolType.Descriptor instead.
func (FrrProtocolType) EnumDescriptor() ([]byte, []int) {
	return file_client_frr_proto_rawDescGZIP(), []int{0}
}

type BgpOperationType int32

const (
	BgpOperationType_BGP_UNKNOWN          BgpOperationType = 0
	BgpOperationType_BGP_GET_CONFIG       BgpOperationType = 1
	BgpOperationType_BGP_SET_CONFIG       BgpOperationType = 2
	BgpOperationType_BGP_GET_STATE        BgpOperationType = 3
	BgpOperationType_BGP_ADD_NEIGHBOR     BgpOperationType = 4
	BgpOperationType_BGP_REMOVE_NEIGHBOR  BgpOperationType = 5
	BgpOperationType_BGP_UPDATE_NEIGHBOR  BgpOperationType = 6
	BgpOperationType_BGP_RESET_NEIGHBOR   BgpOperationType = 7
	BgpOperationType_BGP_GET_NEIGHBORS    BgpOperationType = 8
	BgpOperationType_BGP_ADD_NETWORK      BgpOperationType = 9
	BgpOperationType_BGP_REMOVE_NETWORK   BgpOperationType = 10
	BgpOperationType_BGP_GET_ROUTES       BgpOperationType = 11
	BgpOperationType_BGP_GET_STATISTICS   BgpOperationType = 12
	BgpOperationType_BGP_CLEAR_ROUTES     BgpOperationType = 13
	BgpOperationType_BGP_ENABLE           BgpOperationType = 14
	BgpOperationType_BGP_DISABLE          BgpOperationType = 15
	BgpOperationType_BGP_APPLY_ROUTE_MAP  BgpOperationType = 16 // New
	BgpOperationType_BGP_REMOVE_ROUTE_MAP BgpOperationType = 17 // New
	BgpOperationType_BGP_SET_COMMUNITY    BgpOperationType = 18 // New
	BgpOperationType_BGP_CLEAR_COMMUNITY  BgpOperationType = 19 // New
	BgpOperationType_BGP_GET_SUMMARY      BgpOperationType = 20 // New
)

// Enum value maps for BgpOperationType.
var (
	BgpOperationType_name = map[int32]string{
		0:  "BGP_UNKNOWN",
		1:  "BGP_GET_CONFIG",
		2:  "BGP_SET_CONFIG",
		3:  "BGP_GET_STATE",
		4:  "BGP_ADD_NEIGHBOR",
		5:  "BGP_REMOVE_NEIGHBOR",
		6:  "BGP_UPDATE_NEIGHBOR",
		7:  "BGP_RESET_NEIGHBOR",
		8:  "BGP_GET_NEIGHBORS",
		9:  "BGP_ADD_NETWORK",
		10: "BGP_REMOVE_NETWORK",
		11: "BGP_GET_ROUTES",
		12: "BGP_GET_STATISTICS",
		13: "BGP_CLEAR_ROUTES",
		14: "BGP_ENABLE",
		15: "BGP_DISABLE",
		16: "BGP_APPLY_ROUTE_MAP",
		17: "BGP_REMOVE_ROUTE_MAP",
		18: "BGP_SET_COMMUNITY",
		19: "BGP_CLEAR_COMMUNITY",
		20: "BGP_GET_SUMMARY",
	}
	BgpOperationType_value = map[string]int32{
		"BGP_UNKNOWN":          0,
		"BGP_GET_CONFIG":       1,
		"BGP_SET_CONFIG":       2,
		"BGP_GET_STATE":        3,
		"BGP_ADD_NEIGHBOR":     4,
		"BGP_REMOVE_NEIGHBOR":  5,
		"BGP_UPDATE_NEIGHBOR":  6,
		"BGP_RESET_NEIGHBOR":   7,
		"BGP_GET_NEIGHBORS":    8,
		"BGP_ADD_NETWORK":      9,
		"BGP_REMOVE_NETWORK":   10,
		"BGP_GET_ROUTES":       11,
		"BGP_GET_STATISTICS":   12,
		"BGP_CLEAR_ROUTES":     13,
		"BGP_ENABLE":           14,
		"BGP_DISABLE":          15,
		"BGP_APPLY_ROUTE_MAP":  16,
		"BGP_REMOVE_ROUTE_MAP": 17,
		"BGP_SET_COMMUNITY":    18,
		"BGP_CLEAR_COMMUNITY":  19,
		"BGP_GET_SUMMARY":      20,
	}
)

func (x BgpOperationType) Enum() *BgpOperationType {
	p := new(BgpOperationType)
	*p = x
	return p
}

func (x BgpOperationType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BgpOperationType) Descriptor() protoreflect.EnumDescriptor {
	return file_client_frr_proto_enumTypes[1].Descriptor()
}

func (BgpOperationType) Type() protoreflect.EnumType {
	return &file_client_frr_proto_enumTypes[1]
}

func (x BgpOperationType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BgpOperationType.Descriptor instead.
func (BgpOperationType) EnumDescriptor() ([]byte, []int) {
	return file_client_frr_proto_rawDescGZIP(), []int{1}
}

type BgpRouteMapAction int32

const (
	BgpRouteMapAction_ROUTE_MAP_UNKNOWN BgpRouteMapAction = 0
	BgpRouteMapAction_ROUTE_MAP_PERMIT  BgpRouteMapAction = 1
	BgpRouteMapAction_ROUTE_MAP_DENY    BgpRouteMapAction = 2
)

// Enum value maps for BgpRouteMapAction.
var (
	BgpRouteMapAction_name = map[int32]string{
		0: "ROUTE_MAP_UNKNOWN",
		1: "ROUTE_MAP_PERMIT",
		2: "ROUTE_MAP_DENY",
	}
	BgpRouteMapAction_value = map[string]int32{
		"ROUTE_MAP_UNKNOWN": 0,
		"ROUTE_MAP_PERMIT":  1,
		"ROUTE_MAP_DENY":    2,
	}
)

func (x BgpRouteMapAction) Enum() *BgpRouteMapAction {
	p := new(BgpRouteMapAction)
	*p = x
	return p
}

func (x BgpRouteMapAction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BgpRouteMapAction) Descriptor() protoreflect.EnumDescriptor {
	return file_client_frr_proto_enumTypes[2].Descriptor()
}

func (BgpRouteMapAction) Type() protoreflect.EnumType {
	return &file_client_frr_proto_enumTypes[2]
}

func (x BgpRouteMapAction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BgpRouteMapAction.Descriptor instead.
func (BgpRouteMapAction) EnumDescriptor() ([]byte, []int) {
	return file_client_frr_proto_rawDescGZIP(), []int{2}
}

type StaticOperationType int32

const (
	StaticOperationType_STATIC_UNKNOWN            StaticOperationType = 0
	StaticOperationType_STATIC_GET_ROUTES         StaticOperationType = 1
	StaticOperationType_STATIC_ADD_ROUTE          StaticOperationType = 2
	StaticOperationType_STATIC_REMOVE_ROUTE       StaticOperationType = 3
	StaticOperationType_STATIC_UPDATE_ROUTE       StaticOperationType = 4
	StaticOperationType_STATIC_GET_CONFIG         StaticOperationType = 5
	StaticOperationType_STATIC_SET_CONFIG         StaticOperationType = 6
	StaticOperationType_STATIC_CLEAR_ALL_ROUTES   StaticOperationType = 7
	StaticOperationType_STATIC_GET_STATISTICS     StaticOperationType = 8
	StaticOperationType_STATIC_RELOAD_CONFIG      StaticOperationType = 9
	StaticOperationType_STATIC_GET_ROUTE_TABLE    StaticOperationType = 10 // New
	StaticOperationType_STATIC_FLUSH_ROUTE_TABLE  StaticOperationType = 11 // New
	StaticOperationType_STATIC_GET_NEXTHOP_GROUPS StaticOperationType = 12 // New
)

// Enum value maps for StaticOperationType.
var (
	StaticOperationType_name = map[int32]string{
		0:  "STATIC_UNKNOWN",
		1:  "STATIC_GET_ROUTES",
		2:  "STATIC_ADD_ROUTE",
		3:  "STATIC_REMOVE_ROUTE",
		4:  "STATIC_UPDATE_ROUTE",
		5:  "STATIC_GET_CONFIG",
		6:  "STATIC_SET_CONFIG",
		7:  "STATIC_CLEAR_ALL_ROUTES",
		8:  "STATIC_GET_STATISTICS",
		9:  "STATIC_RELOAD_CONFIG",
		10: "STATIC_GET_ROUTE_TABLE",
		11: "STATIC_FLUSH_ROUTE_TABLE",
		12: "STATIC_GET_NEXTHOP_GROUPS",
	}
	StaticOperationType_value = map[string]int32{
		"STATIC_UNKNOWN":            0,
		"STATIC_GET_ROUTES":         1,
		"STATIC_ADD_ROUTE":          2,
		"STATIC_REMOVE_ROUTE":       3,
		"STATIC_UPDATE_ROUTE":       4,
		"STATIC_GET_CONFIG":         5,
		"STATIC_SET_CONFIG":         6,
		"STATIC_CLEAR_ALL_ROUTES":   7,
		"STATIC_GET_STATISTICS":     8,
		"STATIC_RELOAD_CONFIG":      9,
		"STATIC_GET_ROUTE_TABLE":    10,
		"STATIC_FLUSH_ROUTE_TABLE":  11,
		"STATIC_GET_NEXTHOP_GROUPS": 12,
	}
)

func (x StaticOperationType) Enum() *StaticOperationType {
	p := new(StaticOperationType)
	*p = x
	return p
}

func (x StaticOperationType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StaticOperationType) Descriptor() protoreflect.EnumDescriptor {
	return file_client_frr_proto_enumTypes[3].Descriptor()
}

func (StaticOperationType) Type() protoreflect.EnumType {
	return &file_client_frr_proto_enumTypes[3]
}

func (x StaticOperationType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StaticOperationType.Descriptor instead.
func (StaticOperationType) EnumDescriptor() ([]byte, []int) {
	return file_client_frr_proto_rawDescGZIP(), []int{3}
}

type StaticRouteType int32

const (
	StaticRouteType_STATIC_ROUTE_UNKNOWN     StaticRouteType = 0
	StaticRouteType_STATIC_ROUTE_UNICAST     StaticRouteType = 1 // Normal unicast route
	StaticRouteType_STATIC_ROUTE_BLACKHOLE   StaticRouteType = 2 // Blackhole route
	StaticRouteType_STATIC_ROUTE_UNREACHABLE StaticRouteType = 3 // Unreachable route
	StaticRouteType_STATIC_ROUTE_PROHIBIT    StaticRouteType = 4 // Prohibited route
	StaticRouteType_STATIC_ROUTE_LOCAL       StaticRouteType = 5 // Local route
	StaticRouteType_STATIC_ROUTE_BROADCAST   StaticRouteType = 6 // Broadcast route
	StaticRouteType_STATIC_ROUTE_ANYCAST     StaticRouteType = 7 // Anycast route
	StaticRouteType_STATIC_ROUTE_MULTICAST   StaticRouteType = 8 // Multicast route
)

// Enum value maps for StaticRouteType.
var (
	StaticRouteType_name = map[int32]string{
		0: "STATIC_ROUTE_UNKNOWN",
		1: "STATIC_ROUTE_UNICAST",
		2: "STATIC_ROUTE_BLACKHOLE",
		3: "STATIC_ROUTE_UNREACHABLE",
		4: "STATIC_ROUTE_PROHIBIT",
		5: "STATIC_ROUTE_LOCAL",
		6: "STATIC_ROUTE_BROADCAST",
		7: "STATIC_ROUTE_ANYCAST",
		8: "STATIC_ROUTE_MULTICAST",
	}
	StaticRouteType_value = map[string]int32{
		"STATIC_ROUTE_UNKNOWN":     0,
		"STATIC_ROUTE_UNICAST":     1,
		"STATIC_ROUTE_BLACKHOLE":   2,
		"STATIC_ROUTE_UNREACHABLE": 3,
		"STATIC_ROUTE_PROHIBIT":    4,
		"STATIC_ROUTE_LOCAL":       5,
		"STATIC_ROUTE_BROADCAST":   6,
		"STATIC_ROUTE_ANYCAST":     7,
		"STATIC_ROUTE_MULTICAST":   8,
	}
)

func (x StaticRouteType) Enum() *StaticRouteType {
	p := new(StaticRouteType)
	*p = x
	return p
}

func (x StaticRouteType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StaticRouteType) Descriptor() protoreflect.EnumDescriptor {
	return file_client_frr_proto_enumTypes[4].Descriptor()
}

func (StaticRouteType) Type() protoreflect.EnumType {
	return &file_client_frr_proto_enumTypes[4]
}

func (x StaticRouteType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StaticRouteType.Descriptor instead.
func (StaticRouteType) EnumDescriptor() ([]byte, []int) {
	return file_client_frr_proto_rawDescGZIP(), []int{4}
}

type StaticNexthopGroupType int32

const (
	StaticNexthopGroupType_NEXTHOP_GROUP_UNKNOWN   StaticNexthopGroupType = 0
	StaticNexthopGroupType_NEXTHOP_GROUP_MULTIPATH StaticNexthopGroupType = 1 // ECMP group
	StaticNexthopGroupType_NEXTHOP_GROUP_RESILIENT StaticNexthopGroupType = 2 // Resilient hashing
)

// Enum value maps for StaticNexthopGroupType.
var (
	StaticNexthopGroupType_name = map[int32]string{
		0: "NEXTHOP_GROUP_UNKNOWN",
		1: "NEXTHOP_GROUP_MULTIPATH",
		2: "NEXTHOP_GROUP_RESILIENT",
	}
	StaticNexthopGroupType_value = map[string]int32{
		"NEXTHOP_GROUP_UNKNOWN":   0,
		"NEXTHOP_GROUP_MULTIPATH": 1,
		"NEXTHOP_GROUP_RESILIENT": 2,
	}
)

func (x StaticNexthopGroupType) Enum() *StaticNexthopGroupType {
	p := new(StaticNexthopGroupType)
	*p = x
	return p
}

func (x StaticNexthopGroupType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StaticNexthopGroupType) Descriptor() protoreflect.EnumDescriptor {
	return file_client_frr_proto_enumTypes[5].Descriptor()
}

func (StaticNexthopGroupType) Type() protoreflect.EnumType {
	return &file_client_frr_proto_enumTypes[5]
}

func (x StaticNexthopGroupType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StaticNexthopGroupType.Descriptor instead.
func (StaticNexthopGroupType) EnumDescriptor() ([]byte, []int) {
	return file_client_frr_proto_rawDescGZIP(), []int{5}
}

// Extended BGP Configuration
type BgpConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AutonomousSystem      uint32         `protobuf:"varint,1,opt,name=autonomous_system,json=autonomousSystem,proto3" json:"autonomous_system,omitempty"`
	RouterId              string         `protobuf:"bytes,2,opt,name=router_id,json=routerId,proto3" json:"router_id,omitempty"`
	Neighbors             []*BgpNeighbor `protobuf:"bytes,3,rep,name=neighbors,proto3" json:"neighbors,omitempty"`
	Networks              []*BgpNetwork  `protobuf:"bytes,4,rep,name=networks,proto3" json:"networks,omitempty"`
	KeepaliveTime         uint32         `protobuf:"varint,5,opt,name=keepalive_time,json=keepaliveTime,proto3" json:"keepalive_time,omitempty"`
	HoldTime              uint32         `protobuf:"varint,6,opt,name=hold_time,json=holdTime,proto3" json:"hold_time,omitempty"`
	RedistributeConnected bool           `protobuf:"varint,7,opt,name=redistribute_connected,json=redistributeConnected,proto3" json:"redistribute_connected,omitempty"`
	RedistributeStatic    bool           `protobuf:"varint,8,opt,name=redistribute_static,json=redistributeStatic,proto3" json:"redistribute_static,omitempty"`
	// Extended fields
	GlobalConfig           *BgpGlobalConfig       `protobuf:"bytes,9,opt,name=global_config,json=globalConfig,proto3" json:"global_config,omitempty"`
	Ipv6Config             *BgpIpv6Config         `protobuf:"bytes,10,opt,name=ipv6_config,json=ipv6Config,proto3" json:"ipv6_config,omitempty"`
	RouteMaps              []*BgpRouteMap         `protobuf:"bytes,11,rep,name=route_maps,json=routeMaps,proto3" json:"route_maps,omitempty"`
	CommunityLists         []*BgpCommunityList    `protobuf:"bytes,12,rep,name=community_lists,json=communityLists,proto3" json:"community_lists,omitempty"`
	PrefixLists            []*BgpPrefixList       `protobuf:"bytes,13,rep,name=prefix_lists,json=prefixLists,proto3" json:"prefix_lists,omitempty"`
	Confederation          *BgpConfederation      `protobuf:"bytes,14,opt,name=confederation,proto3" json:"confederation,omitempty"`
	RouteReflector         *BgpRouteReflector     `protobuf:"bytes,15,opt,name=route_reflector,json=routeReflector,proto3" json:"route_reflector,omitempty"`
	GracefulRestart        *BgpGracefulRestart    `protobuf:"bytes,16,opt,name=graceful_restart,json=gracefulRestart,proto3" json:"graceful_restart,omitempty"`
	AggregateAddresses     []*BgpAggregateAddress `protobuf:"bytes,17,rep,name=aggregate_addresses,json=aggregateAddresses,proto3" json:"aggregate_addresses,omitempty"`
	DefaultOriginate       *BgpDefaultOriginate   `protobuf:"bytes,18,opt,name=default_originate,json=defaultOriginate,proto3" json:"default_originate,omitempty"`
	MaximumPaths           uint32                 `protobuf:"varint,19,opt,name=maximum_paths,json=maximumPaths,proto3" json:"maximum_paths,omitempty"`
	AdministrativeDistance uint32                 `protobuf:"varint,20,opt,name=administrative_distance,json=administrativeDistance,proto3" json:"administrative_distance,omitempty"`
	DeterministicMed       bool                   `protobuf:"varint,21,opt,name=deterministic_med,json=deterministicMed,proto3" json:"deterministic_med,omitempty"`
	AlwaysCompareMed       bool                   `protobuf:"varint,22,opt,name=always_compare_med,json=alwaysCompareMed,proto3" json:"always_compare_med,omitempty"`
	ScanTime               uint32                 `protobuf:"varint,23,opt,name=scan_time,json=scanTime,proto3" json:"scan_time,omitempty"`
	LogNeighborChanges     bool                   `protobuf:"varint,24,opt,name=log_neighbor_changes,json=logNeighborChanges,proto3" json:"log_neighbor_changes,omitempty"`
	ClusterId              uint32                 `protobuf:"varint,25,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"` // Route Reflector cluster ID
}

func (x *BgpConfig) Reset() {
	*x = BgpConfig{}
	mi := &file_client_frr_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BgpConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpConfig) ProtoMessage() {}

func (x *BgpConfig) ProtoReflect() protoreflect.Message {
	mi := &file_client_frr_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpConfig.ProtoReflect.Descriptor instead.
func (*BgpConfig) Descriptor() ([]byte, []int) {
	return file_client_frr_proto_rawDescGZIP(), []int{0}
}

func (x *BgpConfig) GetAutonomousSystem() uint32 {
	if x != nil {
		return x.AutonomousSystem
	}
	return 0
}

func (x *BgpConfig) GetRouterId() string {
	if x != nil {
		return x.RouterId
	}
	return ""
}

func (x *BgpConfig) GetNeighbors() []*BgpNeighbor {
	if x != nil {
		return x.Neighbors
	}
	return nil
}

func (x *BgpConfig) GetNetworks() []*BgpNetwork {
	if x != nil {
		return x.Networks
	}
	return nil
}

func (x *BgpConfig) GetKeepaliveTime() uint32 {
	if x != nil {
		return x.KeepaliveTime
	}
	return 0
}

func (x *BgpConfig) GetHoldTime() uint32 {
	if x != nil {
		return x.HoldTime
	}
	return 0
}

func (x *BgpConfig) GetRedistributeConnected() bool {
	if x != nil {
		return x.RedistributeConnected
	}
	return false
}

func (x *BgpConfig) GetRedistributeStatic() bool {
	if x != nil {
		return x.RedistributeStatic
	}
	return false
}

func (x *BgpConfig) GetGlobalConfig() *BgpGlobalConfig {
	if x != nil {
		return x.GlobalConfig
	}
	return nil
}

func (x *BgpConfig) GetIpv6Config() *BgpIpv6Config {
	if x != nil {
		return x.Ipv6Config
	}
	return nil
}

func (x *BgpConfig) GetRouteMaps() []*BgpRouteMap {
	if x != nil {
		return x.RouteMaps
	}
	return nil
}

func (x *BgpConfig) GetCommunityLists() []*BgpCommunityList {
	if x != nil {
		return x.CommunityLists
	}
	return nil
}

func (x *BgpConfig) GetPrefixLists() []*BgpPrefixList {
	if x != nil {
		return x.PrefixLists
	}
	return nil
}

func (x *BgpConfig) GetConfederation() *BgpConfederation {
	if x != nil {
		return x.Confederation
	}
	return nil
}

func (x *BgpConfig) GetRouteReflector() *BgpRouteReflector {
	if x != nil {
		return x.RouteReflector
	}
	return nil
}

func (x *BgpConfig) GetGracefulRestart() *BgpGracefulRestart {
	if x != nil {
		return x.GracefulRestart
	}
	return nil
}

func (x *BgpConfig) GetAggregateAddresses() []*BgpAggregateAddress {
	if x != nil {
		return x.AggregateAddresses
	}
	return nil
}

func (x *BgpConfig) GetDefaultOriginate() *BgpDefaultOriginate {
	if x != nil {
		return x.DefaultOriginate
	}
	return nil
}

func (x *BgpConfig) GetMaximumPaths() uint32 {
	if x != nil {
		return x.MaximumPaths
	}
	return 0
}

func (x *BgpConfig) GetAdministrativeDistance() uint32 {
	if x != nil {
		return x.AdministrativeDistance
	}
	return 0
}

func (x *BgpConfig) GetDeterministicMed() bool {
	if x != nil {
		return x.DeterministicMed
	}
	return false
}

func (x *BgpConfig) GetAlwaysCompareMed() bool {
	if x != nil {
		return x.AlwaysCompareMed
	}
	return false
}

func (x *BgpConfig) GetScanTime() uint32 {
	if x != nil {
		return x.ScanTime
	}
	return 0
}

func (x *BgpConfig) GetLogNeighborChanges() bool {
	if x != nil {
		return x.LogNeighborChanges
	}
	return false
}

func (x *BgpConfig) GetClusterId() uint32 {
	if x != nil {
		return x.ClusterId
	}
	return 0
}

// Global BGP configuration
type BgpGlobalConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EbgpAdminDistance         uint32 `protobuf:"varint,1,opt,name=ebgp_admin_distance,json=ebgpAdminDistance,proto3" json:"ebgp_admin_distance,omitempty"`          // Default: 20
	IbgpAdminDistance         uint32 `protobuf:"varint,2,opt,name=ibgp_admin_distance,json=ibgpAdminDistance,proto3" json:"ibgp_admin_distance,omitempty"`          // Default: 200
	LocalAdminDistance        uint32 `protobuf:"varint,3,opt,name=local_admin_distance,json=localAdminDistance,proto3" json:"local_admin_distance,omitempty"`       // Default: 200
	BgpScanTime               uint32 `protobuf:"varint,4,opt,name=bgp_scan_time,json=bgpScanTime,proto3" json:"bgp_scan_time,omitempty"`                            // Default: 60 seconds
	FastExternalFallover      bool   `protobuf:"varint,5,opt,name=fast_external_fallover,json=fastExternalFallover,proto3" json:"fast_external_fallover,omitempty"` // Default: true
	LogNeighborChanges        bool   `protobuf:"varint,6,opt,name=log_neighbor_changes,json=logNeighborChanges,proto3" json:"log_neighbor_changes,omitempty"`       // Default: false
	DeterministicMed          bool   `protobuf:"varint,7,opt,name=deterministic_med,json=deterministicMed,proto3" json:"deterministic_med,omitempty"`               // Default: false
	AlwaysCompareMed          bool   `protobuf:"varint,8,opt,name=always_compare_med,json=alwaysCompareMed,proto3" json:"always_compare_med,omitempty"`             // Default: false
	BestpathAsPathIgnore      bool   `protobuf:"varint,9,opt,name=bestpath_as_path_ignore,json=bestpathAsPathIgnore,proto3" json:"bestpath_as_path_ignore,omitempty"`
	BestpathMedMissingAsWorst bool   `protobuf:"varint,10,opt,name=bestpath_med_missing_as_worst,json=bestpathMedMissingAsWorst,proto3" json:"bestpath_med_missing_as_worst,omitempty"`
	BestpathCompareRouterid   bool   `protobuf:"varint,11,opt,name=bestpath_compare_routerid,json=bestpathCompareRouterid,proto3" json:"bestpath_compare_routerid,omitempty"`
	BgpRouterId               string `protobuf:"bytes,12,opt,name=bgp_router_id,json=bgpRouterId,proto3" json:"bgp_router_id,omitempty"`
	ConnectRetryTimer         uint32 `protobuf:"varint,13,opt,name=connect_retry_timer,json=connectRetryTimer,proto3" json:"connect_retry_timer,omitempty"`                // Default: 120
	DefaultLocalPreference    uint32 `protobuf:"varint,14,opt,name=default_local_preference,json=defaultLocalPreference,proto3" json:"default_local_preference,omitempty"` // Default: 100
}

func (x *BgpGlobalConfig) Reset() {
	*x = BgpGlobalConfig{}
	mi := &file_client_frr_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BgpGlobalConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpGlobalConfig) ProtoMessage() {}

func (x *BgpGlobalConfig) ProtoReflect() protoreflect.Message {
	mi := &file_client_frr_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpGlobalConfig.ProtoReflect.Descriptor instead.
func (*BgpGlobalConfig) Descriptor() ([]byte, []int) {
	return file_client_frr_proto_rawDescGZIP(), []int{1}
}

func (x *BgpGlobalConfig) GetEbgpAdminDistance() uint32 {
	if x != nil {
		return x.EbgpAdminDistance
	}
	return 0
}

func (x *BgpGlobalConfig) GetIbgpAdminDistance() uint32 {
	if x != nil {
		return x.IbgpAdminDistance
	}
	return 0
}

func (x *BgpGlobalConfig) GetLocalAdminDistance() uint32 {
	if x != nil {
		return x.LocalAdminDistance
	}
	return 0
}

func (x *BgpGlobalConfig) GetBgpScanTime() uint32 {
	if x != nil {
		return x.BgpScanTime
	}
	return 0
}

func (x *BgpGlobalConfig) GetFastExternalFallover() bool {
	if x != nil {
		return x.FastExternalFallover
	}
	return false
}

func (x *BgpGlobalConfig) GetLogNeighborChanges() bool {
	if x != nil {
		return x.LogNeighborChanges
	}
	return false
}

func (x *BgpGlobalConfig) GetDeterministicMed() bool {
	if x != nil {
		return x.DeterministicMed
	}
	return false
}

func (x *BgpGlobalConfig) GetAlwaysCompareMed() bool {
	if x != nil {
		return x.AlwaysCompareMed
	}
	return false
}

func (x *BgpGlobalConfig) GetBestpathAsPathIgnore() bool {
	if x != nil {
		return x.BestpathAsPathIgnore
	}
	return false
}

func (x *BgpGlobalConfig) GetBestpathMedMissingAsWorst() bool {
	if x != nil {
		return x.BestpathMedMissingAsWorst
	}
	return false
}

func (x *BgpGlobalConfig) GetBestpathCompareRouterid() bool {
	if x != nil {
		return x.BestpathCompareRouterid
	}
	return false
}

func (x *BgpGlobalConfig) GetBgpRouterId() string {
	if x != nil {
		return x.BgpRouterId
	}
	return ""
}

func (x *BgpGlobalConfig) GetConnectRetryTimer() uint32 {
	if x != nil {
		return x.ConnectRetryTimer
	}
	return 0
}

func (x *BgpGlobalConfig) GetDefaultLocalPreference() uint32 {
	if x != nil {
		return x.DefaultLocalPreference
	}
	return 0
}

// IPv6 BGP configuration
type BgpIpv6Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ipv6UnicastEnabled        bool           `protobuf:"varint,1,opt,name=ipv6_unicast_enabled,json=ipv6UnicastEnabled,proto3" json:"ipv6_unicast_enabled,omitempty"`
	Ipv6Neighbors             []*BgpNeighbor `protobuf:"bytes,2,rep,name=ipv6_neighbors,json=ipv6Neighbors,proto3" json:"ipv6_neighbors,omitempty"`
	Ipv6Networks              []*BgpNetwork  `protobuf:"bytes,3,rep,name=ipv6_networks,json=ipv6Networks,proto3" json:"ipv6_networks,omitempty"`
	RedistributeConnectedIpv6 bool           `protobuf:"varint,4,opt,name=redistribute_connected_ipv6,json=redistributeConnectedIpv6,proto3" json:"redistribute_connected_ipv6,omitempty"`
	RedistributeStaticIpv6    bool           `protobuf:"varint,5,opt,name=redistribute_static_ipv6,json=redistributeStaticIpv6,proto3" json:"redistribute_static_ipv6,omitempty"`
	MaximumPathsIpv6          uint32         `protobuf:"varint,6,opt,name=maximum_paths_ipv6,json=maximumPathsIpv6,proto3" json:"maximum_paths_ipv6,omitempty"`
}

func (x *BgpIpv6Config) Reset() {
	*x = BgpIpv6Config{}
	mi := &file_client_frr_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BgpIpv6Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpIpv6Config) ProtoMessage() {}

func (x *BgpIpv6Config) ProtoReflect() protoreflect.Message {
	mi := &file_client_frr_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpIpv6Config.ProtoReflect.Descriptor instead.
func (*BgpIpv6Config) Descriptor() ([]byte, []int) {
	return file_client_frr_proto_rawDescGZIP(), []int{2}
}

func (x *BgpIpv6Config) GetIpv6UnicastEnabled() bool {
	if x != nil {
		return x.Ipv6UnicastEnabled
	}
	return false
}

func (x *BgpIpv6Config) GetIpv6Neighbors() []*BgpNeighbor {
	if x != nil {
		return x.Ipv6Neighbors
	}
	return nil
}

func (x *BgpIpv6Config) GetIpv6Networks() []*BgpNetwork {
	if x != nil {
		return x.Ipv6Networks
	}
	return nil
}

func (x *BgpIpv6Config) GetRedistributeConnectedIpv6() bool {
	if x != nil {
		return x.RedistributeConnectedIpv6
	}
	return false
}

func (x *BgpIpv6Config) GetRedistributeStaticIpv6() bool {
	if x != nil {
		return x.RedistributeStaticIpv6
	}
	return false
}

func (x *BgpIpv6Config) GetMaximumPathsIpv6() uint32 {
	if x != nil {
		return x.MaximumPathsIpv6
	}
	return 0
}

// Extended BGP Neighbor Configuration
type BgpNeighbor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PeerIp      string `protobuf:"bytes,1,opt,name=peer_ip,json=peerIp,proto3" json:"peer_ip,omitempty"`
	RemoteAs    uint32 `protobuf:"varint,2,opt,name=remote_as,json=remoteAs,proto3" json:"remote_as,omitempty"`
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Password    string `protobuf:"bytes,4,opt,name=password,proto3" json:"password,omitempty"`
	// Extended neighbor configuration
	Timers          *BgpNeighborTimers          `protobuf:"bytes,5,opt,name=timers,proto3" json:"timers,omitempty"`
	Capabilities    *BgpNeighborCapabilities    `protobuf:"bytes,6,opt,name=capabilities,proto3" json:"capabilities,omitempty"`
	RouteMaps       *BgpNeighborRouteMaps       `protobuf:"bytes,7,opt,name=route_maps,json=routeMaps,proto3" json:"route_maps,omitempty"`
	PrefixLists     *BgpNeighborPrefixLists     `protobuf:"bytes,8,opt,name=prefix_lists,json=prefixLists,proto3" json:"prefix_lists,omitempty"`
	FilterLists     *BgpNeighborFilterLists     `protobuf:"bytes,9,opt,name=filter_lists,json=filterLists,proto3" json:"filter_lists,omitempty"`
	DistributeLists *BgpNeighborDistributeLists `protobuf:"bytes,10,opt,name=distribute_lists,json=distributeLists,proto3" json:"distribute_lists,omitempty"`
	// Neighbor flags and settings
	NextHopSelf                bool `protobuf:"varint,11,opt,name=next_hop_self,json=nextHopSelf,proto3" json:"next_hop_self,omitempty"`
	RouteReflectorClient       bool `protobuf:"varint,12,opt,name=route_reflector_client,json=routeReflectorClient,proto3" json:"route_reflector_client,omitempty"`
	SendCommunity              bool `protobuf:"varint,13,opt,name=send_community,json=sendCommunity,proto3" json:"send_community,omitempty"`
	SendExtendedCommunity      bool `protobuf:"varint,14,opt,name=send_extended_community,json=sendExtendedCommunity,proto3" json:"send_extended_community,omitempty"`
	SoftReconfigurationInbound bool `protobuf:"varint,15,opt,name=soft_reconfiguration_inbound,json=softReconfigurationInbound,proto3" json:"soft_reconfiguration_inbound,omitempty"`
	Shutdown                   bool `protobuf:"varint,16,opt,name=shutdown,proto3" json:"shutdown,omitempty"`
	// Source interface/IP
	UpdateSource string `protobuf:"bytes,17,opt,name=update_source,json=updateSource,proto3" json:"update_source,omitempty"`
	Interface    string `protobuf:"bytes,18,opt,name=interface,proto3" json:"interface,omitempty"`
	// AS path options
	LocalAs          uint32 `protobuf:"varint,19,opt,name=local_as,json=localAs,proto3" json:"local_as,omitempty"`
	LocalAsNoPrepend bool   `protobuf:"varint,20,opt,name=local_as_no_prepend,json=localAsNoPrepend,proto3" json:"local_as_no_prepend,omitempty"`
	LocalAsReplaceAs bool   `protobuf:"varint,21,opt,name=local_as_replace_as,json=localAsReplaceAs,proto3" json:"local_as_replace_as,omitempty"`
	AllowasIn        uint32 `protobuf:"varint,22,opt,name=allowas_in,json=allowasIn,proto3" json:"allowas_in,omitempty"`
	// Weight and preferences
	Weight          uint32 `protobuf:"varint,23,opt,name=weight,proto3" json:"weight,omitempty"` // Cisco weight
	LocalPreference uint32 `protobuf:"varint,24,opt,name=local_preference,json=localPreference,proto3" json:"local_preference,omitempty"`
	// Connection settings
	EbgpMultihop          bool   `protobuf:"varint,25,opt,name=ebgp_multihop,json=ebgpMultihop,proto3" json:"ebgp_multihop,omitempty"`
	EbgpMultihopTtl       uint32 `protobuf:"varint,26,opt,name=ebgp_multihop_ttl,json=ebgpMultihopTtl,proto3" json:"ebgp_multihop_ttl,omitempty"`
	DisableConnectedCheck bool   `protobuf:"varint,27,opt,name=disable_connected_check,json=disableConnectedCheck,proto3" json:"disable_connected_check,omitempty"`
	// Community settings
	SendCommunityStandard bool `protobuf:"varint,28,opt,name=send_community_standard,json=sendCommunityStandard,proto3" json:"send_community_standard,omitempty"`
	SendCommunityExtended bool `protobuf:"varint,29,opt,name=send_community_extended,json=sendCommunityExtended,proto3" json:"send_community_extended,omitempty"`
	SendCommunityLarge    bool `protobuf:"varint,30,opt,name=send_community_large,json=sendCommunityLarge,proto3" json:"send_community_large,omitempty"`
	// BFD settings
	BfdEnable           bool   `protobuf:"varint,31,opt,name=bfd_enable,json=bfdEnable,proto3" json:"bfd_enable,omitempty"`
	BfdDetectMultiplier uint32 `protobuf:"varint,32,opt,name=bfd_detect_multiplier,json=bfdDetectMultiplier,proto3" json:"bfd_detect_multiplier,omitempty"`
	BfdRequiredMinRx    uint32 `protobuf:"varint,33,opt,name=bfd_required_min_rx,json=bfdRequiredMinRx,proto3" json:"bfd_required_min_rx,omitempty"`
	BfdDesiredMinTx     uint32 `protobuf:"varint,34,opt,name=bfd_desired_min_tx,json=bfdDesiredMinTx,proto3" json:"bfd_desired_min_tx,omitempty"`
}

func (x *BgpNeighbor) Reset() {
	*x = BgpNeighbor{}
	mi := &file_client_frr_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BgpNeighbor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpNeighbor) ProtoMessage() {}

func (x *BgpNeighbor) ProtoReflect() protoreflect.Message {
	mi := &file_client_frr_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpNeighbor.ProtoReflect.Descriptor instead.
func (*BgpNeighbor) Descriptor() ([]byte, []int) {
	return file_client_frr_proto_rawDescGZIP(), []int{3}
}

func (x *BgpNeighbor) GetPeerIp() string {
	if x != nil {
		return x.PeerIp
	}
	return ""
}

func (x *BgpNeighbor) GetRemoteAs() uint32 {
	if x != nil {
		return x.RemoteAs
	}
	return 0
}

func (x *BgpNeighbor) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *BgpNeighbor) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *BgpNeighbor) GetTimers() *BgpNeighborTimers {
	if x != nil {
		return x.Timers
	}
	return nil
}

func (x *BgpNeighbor) GetCapabilities() *BgpNeighborCapabilities {
	if x != nil {
		return x.Capabilities
	}
	return nil
}

func (x *BgpNeighbor) GetRouteMaps() *BgpNeighborRouteMaps {
	if x != nil {
		return x.RouteMaps
	}
	return nil
}

func (x *BgpNeighbor) GetPrefixLists() *BgpNeighborPrefixLists {
	if x != nil {
		return x.PrefixLists
	}
	return nil
}

func (x *BgpNeighbor) GetFilterLists() *BgpNeighborFilterLists {
	if x != nil {
		return x.FilterLists
	}
	return nil
}

func (x *BgpNeighbor) GetDistributeLists() *BgpNeighborDistributeLists {
	if x != nil {
		return x.DistributeLists
	}
	return nil
}

func (x *BgpNeighbor) GetNextHopSelf() bool {
	if x != nil {
		return x.NextHopSelf
	}
	return false
}

func (x *BgpNeighbor) GetRouteReflectorClient() bool {
	if x != nil {
		return x.RouteReflectorClient
	}
	return false
}

func (x *BgpNeighbor) GetSendCommunity() bool {
	if x != nil {
		return x.SendCommunity
	}
	return false
}

func (x *BgpNeighbor) GetSendExtendedCommunity() bool {
	if x != nil {
		return x.SendExtendedCommunity
	}
	return false
}

func (x *BgpNeighbor) GetSoftReconfigurationInbound() bool {
	if x != nil {
		return x.SoftReconfigurationInbound
	}
	return false
}

func (x *BgpNeighbor) GetShutdown() bool {
	if x != nil {
		return x.Shutdown
	}
	return false
}

func (x *BgpNeighbor) GetUpdateSource() string {
	if x != nil {
		return x.UpdateSource
	}
	return ""
}

func (x *BgpNeighbor) GetInterface() string {
	if x != nil {
		return x.Interface
	}
	return ""
}

func (x *BgpNeighbor) GetLocalAs() uint32 {
	if x != nil {
		return x.LocalAs
	}
	return 0
}

func (x *BgpNeighbor) GetLocalAsNoPrepend() bool {
	if x != nil {
		return x.LocalAsNoPrepend
	}
	return false
}

func (x *BgpNeighbor) GetLocalAsReplaceAs() bool {
	if x != nil {
		return x.LocalAsReplaceAs
	}
	return false
}

func (x *BgpNeighbor) GetAllowasIn() uint32 {
	if x != nil {
		return x.AllowasIn
	}
	return 0
}

func (x *BgpNeighbor) GetWeight() uint32 {
	if x != nil {
		return x.Weight
	}
	return 0
}

func (x *BgpNeighbor) GetLocalPreference() uint32 {
	if x != nil {
		return x.LocalPreference
	}
	return 0
}

func (x *BgpNeighbor) GetEbgpMultihop() bool {
	if x != nil {
		return x.EbgpMultihop
	}
	return false
}

func (x *BgpNeighbor) GetEbgpMultihopTtl() uint32 {
	if x != nil {
		return x.EbgpMultihopTtl
	}
	return 0
}

func (x *BgpNeighbor) GetDisableConnectedCheck() bool {
	if x != nil {
		return x.DisableConnectedCheck
	}
	return false
}

func (x *BgpNeighbor) GetSendCommunityStandard() bool {
	if x != nil {
		return x.SendCommunityStandard
	}
	return false
}

func (x *BgpNeighbor) GetSendCommunityExtended() bool {
	if x != nil {
		return x.SendCommunityExtended
	}
	return false
}

func (x *BgpNeighbor) GetSendCommunityLarge() bool {
	if x != nil {
		return x.SendCommunityLarge
	}
	return false
}

func (x *BgpNeighbor) GetBfdEnable() bool {
	if x != nil {
		return x.BfdEnable
	}
	return false
}

func (x *BgpNeighbor) GetBfdDetectMultiplier() uint32 {
	if x != nil {
		return x.BfdDetectMultiplier
	}
	return 0
}

func (x *BgpNeighbor) GetBfdRequiredMinRx() uint32 {
	if x != nil {
		return x.BfdRequiredMinRx
	}
	return 0
}

func (x *BgpNeighbor) GetBfdDesiredMinTx() uint32 {
	if x != nil {
		return x.BfdDesiredMinTx
	}
	return 0
}

// BGP Neighbor Timers
type BgpNeighborTimers struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Keepalive    uint32 `protobuf:"varint,1,opt,name=keepalive,proto3" json:"keepalive,omitempty"`                           // Default: 60
	Holdtime     uint32 `protobuf:"varint,2,opt,name=holdtime,proto3" json:"holdtime,omitempty"`                             // Default: 180
	ConnectRetry uint32 `protobuf:"varint,3,opt,name=connect_retry,json=connectRetry,proto3" json:"connect_retry,omitempty"` // Default: 120
}

func (x *BgpNeighborTimers) Reset() {
	*x = BgpNeighborTimers{}
	mi := &file_client_frr_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BgpNeighborTimers) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpNeighborTimers) ProtoMessage() {}

func (x *BgpNeighborTimers) ProtoReflect() protoreflect.Message {
	mi := &file_client_frr_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpNeighborTimers.ProtoReflect.Descriptor instead.
func (*BgpNeighborTimers) Descriptor() ([]byte, []int) {
	return file_client_frr_proto_rawDescGZIP(), []int{4}
}

func (x *BgpNeighborTimers) GetKeepalive() uint32 {
	if x != nil {
		return x.Keepalive
	}
	return 0
}

func (x *BgpNeighborTimers) GetHoldtime() uint32 {
	if x != nil {
		return x.Holdtime
	}
	return 0
}

func (x *BgpNeighborTimers) GetConnectRetry() uint32 {
	if x != nil {
		return x.ConnectRetry
	}
	return 0
}

// BGP Neighbor Capabilities
type BgpNeighborCapabilities struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MultiprotocolIpv4Unicast bool `protobuf:"varint,1,opt,name=multiprotocol_ipv4_unicast,json=multiprotocolIpv4Unicast,proto3" json:"multiprotocol_ipv4_unicast,omitempty"`
	MultiprotocolIpv6Unicast bool `protobuf:"varint,2,opt,name=multiprotocol_ipv6_unicast,json=multiprotocolIpv6Unicast,proto3" json:"multiprotocol_ipv6_unicast,omitempty"`
	RouteRefresh             bool `protobuf:"varint,3,opt,name=route_refresh,json=routeRefresh,proto3" json:"route_refresh,omitempty"`
	FourOctetAs              bool `protobuf:"varint,4,opt,name=four_octet_as,json=fourOctetAs,proto3" json:"four_octet_as,omitempty"`
	AddPathTx                bool `protobuf:"varint,5,opt,name=add_path_tx,json=addPathTx,proto3" json:"add_path_tx,omitempty"`
	AddPathRx                bool `protobuf:"varint,6,opt,name=add_path_rx,json=addPathRx,proto3" json:"add_path_rx,omitempty"`
	ExtendedNexthop          bool `protobuf:"varint,7,opt,name=extended_nexthop,json=extendedNexthop,proto3" json:"extended_nexthop,omitempty"`
	GracefulRestart          bool `protobuf:"varint,8,opt,name=graceful_restart,json=gracefulRestart,proto3" json:"graceful_restart,omitempty"`
	LongLivedGracefulRestart bool `protobuf:"varint,9,opt,name=long_lived_graceful_restart,json=longLivedGracefulRestart,proto3" json:"long_lived_graceful_restart,omitempty"`
}

func (x *BgpNeighborCapabilities) Reset() {
	*x = BgpNeighborCapabilities{}
	mi := &file_client_frr_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BgpNeighborCapabilities) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpNeighborCapabilities) ProtoMessage() {}

func (x *BgpNeighborCapabilities) ProtoReflect() protoreflect.Message {
	mi := &file_client_frr_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpNeighborCapabilities.ProtoReflect.Descriptor instead.
func (*BgpNeighborCapabilities) Descriptor() ([]byte, []int) {
	return file_client_frr_proto_rawDescGZIP(), []int{5}
}

func (x *BgpNeighborCapabilities) GetMultiprotocolIpv4Unicast() bool {
	if x != nil {
		return x.MultiprotocolIpv4Unicast
	}
	return false
}

func (x *BgpNeighborCapabilities) GetMultiprotocolIpv6Unicast() bool {
	if x != nil {
		return x.MultiprotocolIpv6Unicast
	}
	return false
}

func (x *BgpNeighborCapabilities) GetRouteRefresh() bool {
	if x != nil {
		return x.RouteRefresh
	}
	return false
}

func (x *BgpNeighborCapabilities) GetFourOctetAs() bool {
	if x != nil {
		return x.FourOctetAs
	}
	return false
}

func (x *BgpNeighborCapabilities) GetAddPathTx() bool {
	if x != nil {
		return x.AddPathTx
	}
	return false
}

func (x *BgpNeighborCapabilities) GetAddPathRx() bool {
	if x != nil {
		return x.AddPathRx
	}
	return false
}

func (x *BgpNeighborCapabilities) GetExtendedNexthop() bool {
	if x != nil {
		return x.ExtendedNexthop
	}
	return false
}

func (x *BgpNeighborCapabilities) GetGracefulRestart() bool {
	if x != nil {
		return x.GracefulRestart
	}
	return false
}

func (x *BgpNeighborCapabilities) GetLongLivedGracefulRestart() bool {
	if x != nil {
		return x.LongLivedGracefulRestart
	}
	return false
}

// BGP Neighbor Route Maps
type BgpNeighborRouteMaps struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RouteMapIn     string `protobuf:"bytes,1,opt,name=route_map_in,json=routeMapIn,proto3" json:"route_map_in,omitempty"`
	RouteMapOut    string `protobuf:"bytes,2,opt,name=route_map_out,json=routeMapOut,proto3" json:"route_map_out,omitempty"`
	RouteMapImport string `protobuf:"bytes,3,opt,name=route_map_import,json=routeMapImport,proto3" json:"route_map_import,omitempty"`
	RouteMapExport string `protobuf:"bytes,4,opt,name=route_map_export,json=routeMapExport,proto3" json:"route_map_export,omitempty"`
}

func (x *BgpNeighborRouteMaps) Reset() {
	*x = BgpNeighborRouteMaps{}
	mi := &file_client_frr_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BgpNeighborRouteMaps) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpNeighborRouteMaps) ProtoMessage() {}

func (x *BgpNeighborRouteMaps) ProtoReflect() protoreflect.Message {
	mi := &file_client_frr_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpNeighborRouteMaps.ProtoReflect.Descriptor instead.
func (*BgpNeighborRouteMaps) Descriptor() ([]byte, []int) {
	return file_client_frr_proto_rawDescGZIP(), []int{6}
}

func (x *BgpNeighborRouteMaps) GetRouteMapIn() string {
	if x != nil {
		return x.RouteMapIn
	}
	return ""
}

func (x *BgpNeighborRouteMaps) GetRouteMapOut() string {
	if x != nil {
		return x.RouteMapOut
	}
	return ""
}

func (x *BgpNeighborRouteMaps) GetRouteMapImport() string {
	if x != nil {
		return x.RouteMapImport
	}
	return ""
}

func (x *BgpNeighborRouteMaps) GetRouteMapExport() string {
	if x != nil {
		return x.RouteMapExport
	}
	return ""
}

// BGP Neighbor Prefix Lists
type BgpNeighborPrefixLists struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PrefixListIn  string `protobuf:"bytes,1,opt,name=prefix_list_in,json=prefixListIn,proto3" json:"prefix_list_in,omitempty"`
	PrefixListOut string `protobuf:"bytes,2,opt,name=prefix_list_out,json=prefixListOut,proto3" json:"prefix_list_out,omitempty"`
}

func (x *BgpNeighborPrefixLists) Reset() {
	*x = BgpNeighborPrefixLists{}
	mi := &file_client_frr_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BgpNeighborPrefixLists) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpNeighborPrefixLists) ProtoMessage() {}

func (x *BgpNeighborPrefixLists) ProtoReflect() protoreflect.Message {
	mi := &file_client_frr_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpNeighborPrefixLists.ProtoReflect.Descriptor instead.
func (*BgpNeighborPrefixLists) Descriptor() ([]byte, []int) {
	return file_client_frr_proto_rawDescGZIP(), []int{7}
}

func (x *BgpNeighborPrefixLists) GetPrefixListIn() string {
	if x != nil {
		return x.PrefixListIn
	}
	return ""
}

func (x *BgpNeighborPrefixLists) GetPrefixListOut() string {
	if x != nil {
		return x.PrefixListOut
	}
	return ""
}

// BGP Neighbor Filter Lists (AS-path filters)
type BgpNeighborFilterLists struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FilterListIn  string `protobuf:"bytes,1,opt,name=filter_list_in,json=filterListIn,proto3" json:"filter_list_in,omitempty"`
	FilterListOut string `protobuf:"bytes,2,opt,name=filter_list_out,json=filterListOut,proto3" json:"filter_list_out,omitempty"`
}

func (x *BgpNeighborFilterLists) Reset() {
	*x = BgpNeighborFilterLists{}
	mi := &file_client_frr_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BgpNeighborFilterLists) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpNeighborFilterLists) ProtoMessage() {}

func (x *BgpNeighborFilterLists) ProtoReflect() protoreflect.Message {
	mi := &file_client_frr_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpNeighborFilterLists.ProtoReflect.Descriptor instead.
func (*BgpNeighborFilterLists) Descriptor() ([]byte, []int) {
	return file_client_frr_proto_rawDescGZIP(), []int{8}
}

func (x *BgpNeighborFilterLists) GetFilterListIn() string {
	if x != nil {
		return x.FilterListIn
	}
	return ""
}

func (x *BgpNeighborFilterLists) GetFilterListOut() string {
	if x != nil {
		return x.FilterListOut
	}
	return ""
}

// BGP Neighbor Distribute Lists (Access lists)
type BgpNeighborDistributeLists struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DistributeListIn  string `protobuf:"bytes,1,opt,name=distribute_list_in,json=distributeListIn,proto3" json:"distribute_list_in,omitempty"`
	DistributeListOut string `protobuf:"bytes,2,opt,name=distribute_list_out,json=distributeListOut,proto3" json:"distribute_list_out,omitempty"`
}

func (x *BgpNeighborDistributeLists) Reset() {
	*x = BgpNeighborDistributeLists{}
	mi := &file_client_frr_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BgpNeighborDistributeLists) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpNeighborDistributeLists) ProtoMessage() {}

func (x *BgpNeighborDistributeLists) ProtoReflect() protoreflect.Message {
	mi := &file_client_frr_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpNeighborDistributeLists.ProtoReflect.Descriptor instead.
func (*BgpNeighborDistributeLists) Descriptor() ([]byte, []int) {
	return file_client_frr_proto_rawDescGZIP(), []int{9}
}

func (x *BgpNeighborDistributeLists) GetDistributeListIn() string {
	if x != nil {
		return x.DistributeListIn
	}
	return ""
}

func (x *BgpNeighborDistributeLists) GetDistributeListOut() string {
	if x != nil {
		return x.DistributeListOut
	}
	return ""
}

// Extended BGP Network Configuration
type BgpNetwork struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Network string `protobuf:"bytes,1,opt,name=network,proto3" json:"network,omitempty"` // CIDR format
	// Extended network configuration
	RouteMap               string   `protobuf:"bytes,2,opt,name=route_map,json=routeMap,proto3" json:"route_map,omitempty"`
	Backdoor               bool     `protobuf:"varint,3,opt,name=backdoor,proto3" json:"backdoor,omitempty"`
	Label                  uint32   `protobuf:"varint,4,opt,name=label,proto3" json:"label,omitempty"`                               // MPLS label
	RouteTarget            []string `protobuf:"bytes,5,rep,name=route_target,json=routeTarget,proto3" json:"route_target,omitempty"` // VPN route targets
	AdministrativeDistance uint32   `protobuf:"varint,6,opt,name=administrative_distance,json=administrativeDistance,proto3" json:"administrative_distance,omitempty"`
	NextHop                string   `protobuf:"bytes,7,opt,name=next_hop,json=nextHop,proto3" json:"next_hop,omitempty"` // Static next-hop override
}

func (x *BgpNetwork) Reset() {
	*x = BgpNetwork{}
	mi := &file_client_frr_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BgpNetwork) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpNetwork) ProtoMessage() {}

func (x *BgpNetwork) ProtoReflect() protoreflect.Message {
	mi := &file_client_frr_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpNetwork.ProtoReflect.Descriptor instead.
func (*BgpNetwork) Descriptor() ([]byte, []int) {
	return file_client_frr_proto_rawDescGZIP(), []int{10}
}

func (x *BgpNetwork) GetNetwork() string {
	if x != nil {
		return x.Network
	}
	return ""
}

func (x *BgpNetwork) GetRouteMap() string {
	if x != nil {
		return x.RouteMap
	}
	return ""
}

func (x *BgpNetwork) GetBackdoor() bool {
	if x != nil {
		return x.Backdoor
	}
	return false
}

func (x *BgpNetwork) GetLabel() uint32 {
	if x != nil {
		return x.Label
	}
	return 0
}

func (x *BgpNetwork) GetRouteTarget() []string {
	if x != nil {
		return x.RouteTarget
	}
	return nil
}

func (x *BgpNetwork) GetAdministrativeDistance() uint32 {
	if x != nil {
		return x.AdministrativeDistance
	}
	return 0
}

func (x *BgpNetwork) GetNextHop() string {
	if x != nil {
		return x.NextHop
	}
	return ""
}

// BGP Route Map Configuration
type BgpRouteMap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name            string              `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Sequence        uint32              `protobuf:"varint,2,opt,name=sequence,proto3" json:"sequence,omitempty"`
	Action          BgpRouteMapAction   `protobuf:"varint,3,opt,name=action,proto3,enum=client.BgpRouteMapAction" json:"action,omitempty"` // permit/deny
	MatchConditions []*BgpRouteMapMatch `protobuf:"bytes,4,rep,name=match_conditions,json=matchConditions,proto3" json:"match_conditions,omitempty"`
	SetActions      []*BgpRouteMapSet   `protobuf:"bytes,5,rep,name=set_actions,json=setActions,proto3" json:"set_actions,omitempty"`
	Description     string              `protobuf:"bytes,6,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *BgpRouteMap) Reset() {
	*x = BgpRouteMap{}
	mi := &file_client_frr_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BgpRouteMap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpRouteMap) ProtoMessage() {}

func (x *BgpRouteMap) ProtoReflect() protoreflect.Message {
	mi := &file_client_frr_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpRouteMap.ProtoReflect.Descriptor instead.
func (*BgpRouteMap) Descriptor() ([]byte, []int) {
	return file_client_frr_proto_rawDescGZIP(), []int{11}
}

func (x *BgpRouteMap) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *BgpRouteMap) GetSequence() uint32 {
	if x != nil {
		return x.Sequence
	}
	return 0
}

func (x *BgpRouteMap) GetAction() BgpRouteMapAction {
	if x != nil {
		return x.Action
	}
	return BgpRouteMapAction_ROUTE_MAP_UNKNOWN
}

func (x *BgpRouteMap) GetMatchConditions() []*BgpRouteMapMatch {
	if x != nil {
		return x.MatchConditions
	}
	return nil
}

func (x *BgpRouteMap) GetSetActions() []*BgpRouteMapSet {
	if x != nil {
		return x.SetActions
	}
	return nil
}

func (x *BgpRouteMap) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

// BGP Route Map Match Conditions
type BgpRouteMapMatch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MatchType  string `protobuf:"bytes,1,opt,name=match_type,json=matchType,proto3" json:"match_type,omitempty"` // "as-path", "community", "prefix-list", etc.
	MatchValue string `protobuf:"bytes,2,opt,name=match_value,json=matchValue,proto3" json:"match_value,omitempty"`
	ExactMatch bool   `protobuf:"varint,3,opt,name=exact_match,json=exactMatch,proto3" json:"exact_match,omitempty"`
}

func (x *BgpRouteMapMatch) Reset() {
	*x = BgpRouteMapMatch{}
	mi := &file_client_frr_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BgpRouteMapMatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpRouteMapMatch) ProtoMessage() {}

func (x *BgpRouteMapMatch) ProtoReflect() protoreflect.Message {
	mi := &file_client_frr_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpRouteMapMatch.ProtoReflect.Descriptor instead.
func (*BgpRouteMapMatch) Descriptor() ([]byte, []int) {
	return file_client_frr_proto_rawDescGZIP(), []int{12}
}

func (x *BgpRouteMapMatch) GetMatchType() string {
	if x != nil {
		return x.MatchType
	}
	return ""
}

func (x *BgpRouteMapMatch) GetMatchValue() string {
	if x != nil {
		return x.MatchValue
	}
	return ""
}

func (x *BgpRouteMapMatch) GetExactMatch() bool {
	if x != nil {
		return x.ExactMatch
	}
	return false
}

// BGP Route Map Set Actions
type BgpRouteMapSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SetType  string `protobuf:"bytes,1,opt,name=set_type,json=setType,proto3" json:"set_type,omitempty"` // "local-preference", "metric", "community", etc.
	SetValue string `protobuf:"bytes,2,opt,name=set_value,json=setValue,proto3" json:"set_value,omitempty"`
	Additive bool   `protobuf:"varint,3,opt,name=additive,proto3" json:"additive,omitempty"` // For community, as-path-prepend
}

func (x *BgpRouteMapSet) Reset() {
	*x = BgpRouteMapSet{}
	mi := &file_client_frr_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BgpRouteMapSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpRouteMapSet) ProtoMessage() {}

func (x *BgpRouteMapSet) ProtoReflect() protoreflect.Message {
	mi := &file_client_frr_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpRouteMapSet.ProtoReflect.Descriptor instead.
func (*BgpRouteMapSet) Descriptor() ([]byte, []int) {
	return file_client_frr_proto_rawDescGZIP(), []int{13}
}

func (x *BgpRouteMapSet) GetSetType() string {
	if x != nil {
		return x.SetType
	}
	return ""
}

func (x *BgpRouteMapSet) GetSetValue() string {
	if x != nil {
		return x.SetValue
	}
	return ""
}

func (x *BgpRouteMapSet) GetAdditive() bool {
	if x != nil {
		return x.Additive
	}
	return false
}

// BGP Community List
type BgpCommunityList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name           string            `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Sequence       uint32            `protobuf:"varint,2,opt,name=sequence,proto3" json:"sequence,omitempty"`
	Action         BgpRouteMapAction `protobuf:"varint,3,opt,name=action,proto3,enum=client.BgpRouteMapAction" json:"action,omitempty"`
	CommunityValue string            `protobuf:"bytes,4,opt,name=community_value,json=communityValue,proto3" json:"community_value,omitempty"` // "1000:2000" or "internet", "local-as", etc.
	ExactMatch     bool              `protobuf:"varint,5,opt,name=exact_match,json=exactMatch,proto3" json:"exact_match,omitempty"`
}

func (x *BgpCommunityList) Reset() {
	*x = BgpCommunityList{}
	mi := &file_client_frr_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BgpCommunityList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpCommunityList) ProtoMessage() {}

func (x *BgpCommunityList) ProtoReflect() protoreflect.Message {
	mi := &file_client_frr_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpCommunityList.ProtoReflect.Descriptor instead.
func (*BgpCommunityList) Descriptor() ([]byte, []int) {
	return file_client_frr_proto_rawDescGZIP(), []int{14}
}

func (x *BgpCommunityList) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *BgpCommunityList) GetSequence() uint32 {
	if x != nil {
		return x.Sequence
	}
	return 0
}

func (x *BgpCommunityList) GetAction() BgpRouteMapAction {
	if x != nil {
		return x.Action
	}
	return BgpRouteMapAction_ROUTE_MAP_UNKNOWN
}

func (x *BgpCommunityList) GetCommunityValue() string {
	if x != nil {
		return x.CommunityValue
	}
	return ""
}

func (x *BgpCommunityList) GetExactMatch() bool {
	if x != nil {
		return x.ExactMatch
	}
	return false
}

// BGP Prefix List
type BgpPrefixList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name     string            `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Sequence uint32            `protobuf:"varint,2,opt,name=sequence,proto3" json:"sequence,omitempty"`
	Action   BgpRouteMapAction `protobuf:"varint,3,opt,name=action,proto3,enum=client.BgpRouteMapAction" json:"action,omitempty"`
	Prefix   string            `protobuf:"bytes,4,opt,name=prefix,proto3" json:"prefix,omitempty"` // Network prefix
	Le       uint32            `protobuf:"varint,5,opt,name=le,proto3" json:"le,omitempty"`        // Less than or equal
	Ge       uint32            `protobuf:"varint,6,opt,name=ge,proto3" json:"ge,omitempty"`        // Greater than or equal
}

func (x *BgpPrefixList) Reset() {
	*x = BgpPrefixList{}
	mi := &file_client_frr_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BgpPrefixList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpPrefixList) ProtoMessage() {}

func (x *BgpPrefixList) ProtoReflect() protoreflect.Message {
	mi := &file_client_frr_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpPrefixList.ProtoReflect.Descriptor instead.
func (*BgpPrefixList) Descriptor() ([]byte, []int) {
	return file_client_frr_proto_rawDescGZIP(), []int{15}
}

func (x *BgpPrefixList) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *BgpPrefixList) GetSequence() uint32 {
	if x != nil {
		return x.Sequence
	}
	return 0
}

func (x *BgpPrefixList) GetAction() BgpRouteMapAction {
	if x != nil {
		return x.Action
	}
	return BgpRouteMapAction_ROUTE_MAP_UNKNOWN
}

func (x *BgpPrefixList) GetPrefix() string {
	if x != nil {
		return x.Prefix
	}
	return ""
}

func (x *BgpPrefixList) GetLe() uint32 {
	if x != nil {
		return x.Le
	}
	return 0
}

func (x *BgpPrefixList) GetGe() uint32 {
	if x != nil {
		return x.Ge
	}
	return 0
}

// BGP Confederation
type BgpConfederation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConfederationId    uint32   `protobuf:"varint,1,opt,name=confederation_id,json=confederationId,proto3" json:"confederation_id,omitempty"`
	ConfederationPeers []uint32 `protobuf:"varint,2,rep,packed,name=confederation_peers,json=confederationPeers,proto3" json:"confederation_peers,omitempty"`
}

func (x *BgpConfederation) Reset() {
	*x = BgpConfederation{}
	mi := &file_client_frr_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BgpConfederation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpConfederation) ProtoMessage() {}

func (x *BgpConfederation) ProtoReflect() protoreflect.Message {
	mi := &file_client_frr_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpConfederation.ProtoReflect.Descriptor instead.
func (*BgpConfederation) Descriptor() ([]byte, []int) {
	return file_client_frr_proto_rawDescGZIP(), []int{16}
}

func (x *BgpConfederation) GetConfederationId() uint32 {
	if x != nil {
		return x.ConfederationId
	}
	return 0
}

func (x *BgpConfederation) GetConfederationPeers() []uint32 {
	if x != nil {
		return x.ConfederationPeers
	}
	return nil
}

// BGP Route Reflector
type BgpRouteReflector struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterId  uint32   `protobuf:"varint,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	ClientList []string `protobuf:"bytes,2,rep,name=client_list,json=clientList,proto3" json:"client_list,omitempty"` // Client IP addresses
}

func (x *BgpRouteReflector) Reset() {
	*x = BgpRouteReflector{}
	mi := &file_client_frr_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BgpRouteReflector) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpRouteReflector) ProtoMessage() {}

func (x *BgpRouteReflector) ProtoReflect() protoreflect.Message {
	mi := &file_client_frr_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpRouteReflector.ProtoReflect.Descriptor instead.
func (*BgpRouteReflector) Descriptor() ([]byte, []int) {
	return file_client_frr_proto_rawDescGZIP(), []int{17}
}

func (x *BgpRouteReflector) GetClusterId() uint32 {
	if x != nil {
		return x.ClusterId
	}
	return 0
}

func (x *BgpRouteReflector) GetClientList() []string {
	if x != nil {
		return x.ClientList
	}
	return nil
}

// BGP Graceful Restart
type BgpGracefulRestart struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled         bool   `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	RestartTime     uint32 `protobuf:"varint,2,opt,name=restart_time,json=restartTime,proto3" json:"restart_time,omitempty"`       // Default: 120 seconds
	StalepathTime   uint32 `protobuf:"varint,3,opt,name=stalepath_time,json=stalepathTime,proto3" json:"stalepath_time,omitempty"` // Default: 360 seconds
	PreserveFwState bool   `protobuf:"varint,4,opt,name=preserve_fw_state,json=preserveFwState,proto3" json:"preserve_fw_state,omitempty"`
}

func (x *BgpGracefulRestart) Reset() {
	*x = BgpGracefulRestart{}
	mi := &file_client_frr_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BgpGracefulRestart) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpGracefulRestart) ProtoMessage() {}

func (x *BgpGracefulRestart) ProtoReflect() protoreflect.Message {
	mi := &file_client_frr_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpGracefulRestart.ProtoReflect.Descriptor instead.
func (*BgpGracefulRestart) Descriptor() ([]byte, []int) {
	return file_client_frr_proto_rawDescGZIP(), []int{18}
}

func (x *BgpGracefulRestart) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *BgpGracefulRestart) GetRestartTime() uint32 {
	if x != nil {
		return x.RestartTime
	}
	return 0
}

func (x *BgpGracefulRestart) GetStalepathTime() uint32 {
	if x != nil {
		return x.StalepathTime
	}
	return 0
}

func (x *BgpGracefulRestart) GetPreserveFwState() bool {
	if x != nil {
		return x.PreserveFwState
	}
	return false
}

// BGP Aggregate Address
type BgpAggregateAddress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Network                string `protobuf:"bytes,1,opt,name=network,proto3" json:"network,omitempty"` // CIDR format
	SummaryOnly            bool   `protobuf:"varint,2,opt,name=summary_only,json=summaryOnly,proto3" json:"summary_only,omitempty"`
	AsSet                  bool   `protobuf:"varint,3,opt,name=as_set,json=asSet,proto3" json:"as_set,omitempty"`
	RouteMap               string `protobuf:"bytes,4,opt,name=route_map,json=routeMap,proto3" json:"route_map,omitempty"`
	AdministrativeDistance uint32 `protobuf:"varint,5,opt,name=administrative_distance,json=administrativeDistance,proto3" json:"administrative_distance,omitempty"`
}

func (x *BgpAggregateAddress) Reset() {
	*x = BgpAggregateAddress{}
	mi := &file_client_frr_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BgpAggregateAddress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpAggregateAddress) ProtoMessage() {}

func (x *BgpAggregateAddress) ProtoReflect() protoreflect.Message {
	mi := &file_client_frr_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpAggregateAddress.ProtoReflect.Descriptor instead.
func (*BgpAggregateAddress) Descriptor() ([]byte, []int) {
	return file_client_frr_proto_rawDescGZIP(), []int{19}
}

func (x *BgpAggregateAddress) GetNetwork() string {
	if x != nil {
		return x.Network
	}
	return ""
}

func (x *BgpAggregateAddress) GetSummaryOnly() bool {
	if x != nil {
		return x.SummaryOnly
	}
	return false
}

func (x *BgpAggregateAddress) GetAsSet() bool {
	if x != nil {
		return x.AsSet
	}
	return false
}

func (x *BgpAggregateAddress) GetRouteMap() string {
	if x != nil {
		return x.RouteMap
	}
	return ""
}

func (x *BgpAggregateAddress) GetAdministrativeDistance() uint32 {
	if x != nil {
		return x.AdministrativeDistance
	}
	return 0
}

// BGP Default Originate
type BgpDefaultOriginate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled  bool   `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	RouteMap string `protobuf:"bytes,2,opt,name=route_map,json=routeMap,proto3" json:"route_map,omitempty"`
	Metric   uint32 `protobuf:"varint,3,opt,name=metric,proto3" json:"metric,omitempty"`
}

func (x *BgpDefaultOriginate) Reset() {
	*x = BgpDefaultOriginate{}
	mi := &file_client_frr_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BgpDefaultOriginate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpDefaultOriginate) ProtoMessage() {}

func (x *BgpDefaultOriginate) ProtoReflect() protoreflect.Message {
	mi := &file_client_frr_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpDefaultOriginate.ProtoReflect.Descriptor instead.
func (*BgpDefaultOriginate) Descriptor() ([]byte, []int) {
	return file_client_frr_proto_rawDescGZIP(), []int{20}
}

func (x *BgpDefaultOriginate) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *BgpDefaultOriginate) GetRouteMap() string {
	if x != nil {
		return x.RouteMap
	}
	return ""
}

func (x *BgpDefaultOriginate) GetMetric() uint32 {
	if x != nil {
		return x.Metric
	}
	return 0
}

// BGP State Information
type BgpState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status         string              `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Uptime         uint64              `protobuf:"varint,2,opt,name=uptime,proto3" json:"uptime,omitempty"`
	NeighborStates []*BgpNeighborState `protobuf:"bytes,3,rep,name=neighbor_states,json=neighborStates,proto3" json:"neighbor_states,omitempty"`
	TotalRoutes    uint32              `protobuf:"varint,4,opt,name=total_routes,json=totalRoutes,proto3" json:"total_routes,omitempty"`
	BestRoutes     uint32              `protobuf:"varint,5,opt,name=best_routes,json=bestRoutes,proto3" json:"best_routes,omitempty"`
	// Extended state information
	GlobalState *BgpGlobalState  `protobuf:"bytes,6,opt,name=global_state,json=globalState,proto3" json:"global_state,omitempty"`
	TableStates []*BgpTableState `protobuf:"bytes,7,rep,name=table_states,json=tableStates,proto3" json:"table_states,omitempty"`
	MemoryUsage *BgpMemoryUsage  `protobuf:"bytes,8,opt,name=memory_usage,json=memoryUsage,proto3" json:"memory_usage,omitempty"`
}

func (x *BgpState) Reset() {
	*x = BgpState{}
	mi := &file_client_frr_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BgpState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpState) ProtoMessage() {}

func (x *BgpState) ProtoReflect() protoreflect.Message {
	mi := &file_client_frr_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpState.ProtoReflect.Descriptor instead.
func (*BgpState) Descriptor() ([]byte, []int) {
	return file_client_frr_proto_rawDescGZIP(), []int{21}
}

func (x *BgpState) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *BgpState) GetUptime() uint64 {
	if x != nil {
		return x.Uptime
	}
	return 0
}

func (x *BgpState) GetNeighborStates() []*BgpNeighborState {
	if x != nil {
		return x.NeighborStates
	}
	return nil
}

func (x *BgpState) GetTotalRoutes() uint32 {
	if x != nil {
		return x.TotalRoutes
	}
	return 0
}

func (x *BgpState) GetBestRoutes() uint32 {
	if x != nil {
		return x.BestRoutes
	}
	return 0
}

func (x *BgpState) GetGlobalState() *BgpGlobalState {
	if x != nil {
		return x.GlobalState
	}
	return nil
}

func (x *BgpState) GetTableStates() []*BgpTableState {
	if x != nil {
		return x.TableStates
	}
	return nil
}

func (x *BgpState) GetMemoryUsage() *BgpMemoryUsage {
	if x != nil {
		return x.MemoryUsage
	}
	return nil
}

// BGP Global State
type BgpGlobalState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BgpVersion       uint32 `protobuf:"varint,1,opt,name=bgp_version,json=bgpVersion,proto3" json:"bgp_version,omitempty"`
	LocalAs          uint32 `protobuf:"varint,2,opt,name=local_as,json=localAs,proto3" json:"local_as,omitempty"`
	LocalRouterId    string `protobuf:"bytes,3,opt,name=local_router_id,json=localRouterId,proto3" json:"local_router_id,omitempty"`
	TotalPeers       uint32 `protobuf:"varint,4,opt,name=total_peers,json=totalPeers,proto3" json:"total_peers,omitempty"`
	EstablishedPeers uint32 `protobuf:"varint,5,opt,name=established_peers,json=establishedPeers,proto3" json:"established_peers,omitempty"`
	TableVersion     uint64 `protobuf:"varint,6,opt,name=table_version,json=tableVersion,proto3" json:"table_version,omitempty"`
	ConfigId         uint64 `protobuf:"varint,7,opt,name=config_id,json=configId,proto3" json:"config_id,omitempty"`
}

func (x *BgpGlobalState) Reset() {
	*x = BgpGlobalState{}
	mi := &file_client_frr_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BgpGlobalState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpGlobalState) ProtoMessage() {}

func (x *BgpGlobalState) ProtoReflect() protoreflect.Message {
	mi := &file_client_frr_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpGlobalState.ProtoReflect.Descriptor instead.
func (*BgpGlobalState) Descriptor() ([]byte, []int) {
	return file_client_frr_proto_rawDescGZIP(), []int{22}
}

func (x *BgpGlobalState) GetBgpVersion() uint32 {
	if x != nil {
		return x.BgpVersion
	}
	return 0
}

func (x *BgpGlobalState) GetLocalAs() uint32 {
	if x != nil {
		return x.LocalAs
	}
	return 0
}

func (x *BgpGlobalState) GetLocalRouterId() string {
	if x != nil {
		return x.LocalRouterId
	}
	return ""
}

func (x *BgpGlobalState) GetTotalPeers() uint32 {
	if x != nil {
		return x.TotalPeers
	}
	return 0
}

func (x *BgpGlobalState) GetEstablishedPeers() uint32 {
	if x != nil {
		return x.EstablishedPeers
	}
	return 0
}

func (x *BgpGlobalState) GetTableVersion() uint64 {
	if x != nil {
		return x.TableVersion
	}
	return 0
}

func (x *BgpGlobalState) GetConfigId() uint64 {
	if x != nil {
		return x.ConfigId
	}
	return 0
}

// BGP Table State
type BgpTableState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AfiSafi       string `protobuf:"bytes,1,opt,name=afi_safi,json=afiSafi,proto3" json:"afi_safi,omitempty"` // "ipv4-unicast", "ipv6-unicast", etc.
	TotalPrefixes uint32 `protobuf:"varint,2,opt,name=total_prefixes,json=totalPrefixes,proto3" json:"total_prefixes,omitempty"`
	TotalPaths    uint32 `protobuf:"varint,3,opt,name=total_paths,json=totalPaths,proto3" json:"total_paths,omitempty"`
	BestPaths     uint32 `protobuf:"varint,4,opt,name=best_paths,json=bestPaths,proto3" json:"best_paths,omitempty"`
	MemoryUsage   uint32 `protobuf:"varint,5,opt,name=memory_usage,json=memoryUsage,proto3" json:"memory_usage,omitempty"`
}

func (x *BgpTableState) Reset() {
	*x = BgpTableState{}
	mi := &file_client_frr_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BgpTableState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpTableState) ProtoMessage() {}

func (x *BgpTableState) ProtoReflect() protoreflect.Message {
	mi := &file_client_frr_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpTableState.ProtoReflect.Descriptor instead.
func (*BgpTableState) Descriptor() ([]byte, []int) {
	return file_client_frr_proto_rawDescGZIP(), []int{23}
}

func (x *BgpTableState) GetAfiSafi() string {
	if x != nil {
		return x.AfiSafi
	}
	return ""
}

func (x *BgpTableState) GetTotalPrefixes() uint32 {
	if x != nil {
		return x.TotalPrefixes
	}
	return 0
}

func (x *BgpTableState) GetTotalPaths() uint32 {
	if x != nil {
		return x.TotalPaths
	}
	return 0
}

func (x *BgpTableState) GetBestPaths() uint32 {
	if x != nil {
		return x.BestPaths
	}
	return 0
}

func (x *BgpTableState) GetMemoryUsage() uint32 {
	if x != nil {
		return x.MemoryUsage
	}
	return 0
}

// BGP Memory Usage
type BgpMemoryUsage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TotalMemory     uint64 `protobuf:"varint,1,opt,name=total_memory,json=totalMemory,proto3" json:"total_memory,omitempty"`
	RibMemory       uint64 `protobuf:"varint,2,opt,name=rib_memory,json=ribMemory,proto3" json:"rib_memory,omitempty"`
	NeighborMemory  uint64 `protobuf:"varint,3,opt,name=neighbor_memory,json=neighborMemory,proto3" json:"neighbor_memory,omitempty"`
	AttributeMemory uint64 `protobuf:"varint,4,opt,name=attribute_memory,json=attributeMemory,proto3" json:"attribute_memory,omitempty"`
	AsPathMemory    uint64 `protobuf:"varint,5,opt,name=as_path_memory,json=asPathMemory,proto3" json:"as_path_memory,omitempty"`
	CommunityMemory uint64 `protobuf:"varint,6,opt,name=community_memory,json=communityMemory,proto3" json:"community_memory,omitempty"`
}

func (x *BgpMemoryUsage) Reset() {
	*x = BgpMemoryUsage{}
	mi := &file_client_frr_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BgpMemoryUsage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpMemoryUsage) ProtoMessage() {}

func (x *BgpMemoryUsage) ProtoReflect() protoreflect.Message {
	mi := &file_client_frr_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpMemoryUsage.ProtoReflect.Descriptor instead.
func (*BgpMemoryUsage) Descriptor() ([]byte, []int) {
	return file_client_frr_proto_rawDescGZIP(), []int{24}
}

func (x *BgpMemoryUsage) GetTotalMemory() uint64 {
	if x != nil {
		return x.TotalMemory
	}
	return 0
}

func (x *BgpMemoryUsage) GetRibMemory() uint64 {
	if x != nil {
		return x.RibMemory
	}
	return 0
}

func (x *BgpMemoryUsage) GetNeighborMemory() uint64 {
	if x != nil {
		return x.NeighborMemory
	}
	return 0
}

func (x *BgpMemoryUsage) GetAttributeMemory() uint64 {
	if x != nil {
		return x.AttributeMemory
	}
	return 0
}

func (x *BgpMemoryUsage) GetAsPathMemory() uint64 {
	if x != nil {
		return x.AsPathMemory
	}
	return 0
}

func (x *BgpMemoryUsage) GetCommunityMemory() uint64 {
	if x != nil {
		return x.CommunityMemory
	}
	return 0
}

// Extended BGP Neighbor State
type BgpNeighborState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PeerIp         string `protobuf:"bytes,1,opt,name=peer_ip,json=peerIp,proto3" json:"peer_ip,omitempty"`
	RemoteAs       uint32 `protobuf:"varint,2,opt,name=remote_as,json=remoteAs,proto3" json:"remote_as,omitempty"`
	State          string `protobuf:"bytes,3,opt,name=state,proto3" json:"state,omitempty"`
	Uptime         uint64 `protobuf:"varint,4,opt,name=uptime,proto3" json:"uptime,omitempty"`
	ReceivedRoutes uint32 `protobuf:"varint,5,opt,name=received_routes,json=receivedRoutes,proto3" json:"received_routes,omitempty"`
	SentRoutes     uint32 `protobuf:"varint,6,opt,name=sent_routes,json=sentRoutes,proto3" json:"sent_routes,omitempty"`
	// Extended neighbor state
	Statistics        *BgpNeighborStatistics        `protobuf:"bytes,7,opt,name=statistics,proto3" json:"statistics,omitempty"`
	CapabilitiesState *BgpNeighborCapabilitiesState `protobuf:"bytes,8,opt,name=capabilities_state,json=capabilitiesState,proto3" json:"capabilities_state,omitempty"`
	TimerState        *BgpNeighborTimerState        `protobuf:"bytes,9,opt,name=timer_state,json=timerState,proto3" json:"timer_state,omitempty"`
	ConnectionState   *BgpNeighborConnectionState   `protobuf:"bytes,10,opt,name=connection_state,json=connectionState,proto3" json:"connection_state,omitempty"`
}

func (x *BgpNeighborState) Reset() {
	*x = BgpNeighborState{}
	mi := &file_client_frr_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BgpNeighborState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpNeighborState) ProtoMessage() {}

func (x *BgpNeighborState) ProtoReflect() protoreflect.Message {
	mi := &file_client_frr_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpNeighborState.ProtoReflect.Descriptor instead.
func (*BgpNeighborState) Descriptor() ([]byte, []int) {
	return file_client_frr_proto_rawDescGZIP(), []int{25}
}

func (x *BgpNeighborState) GetPeerIp() string {
	if x != nil {
		return x.PeerIp
	}
	return ""
}

func (x *BgpNeighborState) GetRemoteAs() uint32 {
	if x != nil {
		return x.RemoteAs
	}
	return 0
}

func (x *BgpNeighborState) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *BgpNeighborState) GetUptime() uint64 {
	if x != nil {
		return x.Uptime
	}
	return 0
}

func (x *BgpNeighborState) GetReceivedRoutes() uint32 {
	if x != nil {
		return x.ReceivedRoutes
	}
	return 0
}

func (x *BgpNeighborState) GetSentRoutes() uint32 {
	if x != nil {
		return x.SentRoutes
	}
	return 0
}

func (x *BgpNeighborState) GetStatistics() *BgpNeighborStatistics {
	if x != nil {
		return x.Statistics
	}
	return nil
}

func (x *BgpNeighborState) GetCapabilitiesState() *BgpNeighborCapabilitiesState {
	if x != nil {
		return x.CapabilitiesState
	}
	return nil
}

func (x *BgpNeighborState) GetTimerState() *BgpNeighborTimerState {
	if x != nil {
		return x.TimerState
	}
	return nil
}

func (x *BgpNeighborState) GetConnectionState() *BgpNeighborConnectionState {
	if x != nil {
		return x.ConnectionState
	}
	return nil
}

// BGP Neighbor Statistics
type BgpNeighborStatistics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MessagesSent           uint64 `protobuf:"varint,1,opt,name=messages_sent,json=messagesSent,proto3" json:"messages_sent,omitempty"`
	MessagesReceived       uint64 `protobuf:"varint,2,opt,name=messages_received,json=messagesReceived,proto3" json:"messages_received,omitempty"`
	KeepalivesSent         uint64 `protobuf:"varint,3,opt,name=keepalives_sent,json=keepalivesSent,proto3" json:"keepalives_sent,omitempty"`
	KeepalivesReceived     uint64 `protobuf:"varint,4,opt,name=keepalives_received,json=keepalivesReceived,proto3" json:"keepalives_received,omitempty"`
	UpdatesSent            uint64 `protobuf:"varint,5,opt,name=updates_sent,json=updatesSent,proto3" json:"updates_sent,omitempty"`
	UpdatesReceived        uint64 `protobuf:"varint,6,opt,name=updates_received,json=updatesReceived,proto3" json:"updates_received,omitempty"`
	NotificationsSent      uint64 `protobuf:"varint,7,opt,name=notifications_sent,json=notificationsSent,proto3" json:"notifications_sent,omitempty"`
	NotificationsReceived  uint64 `protobuf:"varint,8,opt,name=notifications_received,json=notificationsReceived,proto3" json:"notifications_received,omitempty"`
	OpensSent              uint64 `protobuf:"varint,9,opt,name=opens_sent,json=opensSent,proto3" json:"opens_sent,omitempty"`
	OpensReceived          uint64 `protobuf:"varint,10,opt,name=opens_received,json=opensReceived,proto3" json:"opens_received,omitempty"`
	RouteRefreshesSent     uint64 `protobuf:"varint,11,opt,name=route_refreshes_sent,json=routeRefreshesSent,proto3" json:"route_refreshes_sent,omitempty"`
	RouteRefreshesReceived uint64 `protobuf:"varint,12,opt,name=route_refreshes_received,json=routeRefreshesReceived,proto3" json:"route_refreshes_received,omitempty"`
	TotalPrefixesSent      uint64 `protobuf:"varint,13,opt,name=total_prefixes_sent,json=totalPrefixesSent,proto3" json:"total_prefixes_sent,omitempty"`
	TotalPrefixesReceived  uint64 `protobuf:"varint,14,opt,name=total_prefixes_received,json=totalPrefixesReceived,proto3" json:"total_prefixes_received,omitempty"`
	LastResetTime          uint64 `protobuf:"varint,15,opt,name=last_reset_time,json=lastResetTime,proto3" json:"last_reset_time,omitempty"`
	LastResetReason        string `protobuf:"bytes,16,opt,name=last_reset_reason,json=lastResetReason,proto3" json:"last_reset_reason,omitempty"`
}

func (x *BgpNeighborStatistics) Reset() {
	*x = BgpNeighborStatistics{}
	mi := &file_client_frr_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BgpNeighborStatistics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpNeighborStatistics) ProtoMessage() {}

func (x *BgpNeighborStatistics) ProtoReflect() protoreflect.Message {
	mi := &file_client_frr_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpNeighborStatistics.ProtoReflect.Descriptor instead.
func (*BgpNeighborStatistics) Descriptor() ([]byte, []int) {
	return file_client_frr_proto_rawDescGZIP(), []int{26}
}

func (x *BgpNeighborStatistics) GetMessagesSent() uint64 {
	if x != nil {
		return x.MessagesSent
	}
	return 0
}

func (x *BgpNeighborStatistics) GetMessagesReceived() uint64 {
	if x != nil {
		return x.MessagesReceived
	}
	return 0
}

func (x *BgpNeighborStatistics) GetKeepalivesSent() uint64 {
	if x != nil {
		return x.KeepalivesSent
	}
	return 0
}

func (x *BgpNeighborStatistics) GetKeepalivesReceived() uint64 {
	if x != nil {
		return x.KeepalivesReceived
	}
	return 0
}

func (x *BgpNeighborStatistics) GetUpdatesSent() uint64 {
	if x != nil {
		return x.UpdatesSent
	}
	return 0
}

func (x *BgpNeighborStatistics) GetUpdatesReceived() uint64 {
	if x != nil {
		return x.UpdatesReceived
	}
	return 0
}

func (x *BgpNeighborStatistics) GetNotificationsSent() uint64 {
	if x != nil {
		return x.NotificationsSent
	}
	return 0
}

func (x *BgpNeighborStatistics) GetNotificationsReceived() uint64 {
	if x != nil {
		return x.NotificationsReceived
	}
	return 0
}

func (x *BgpNeighborStatistics) GetOpensSent() uint64 {
	if x != nil {
		return x.OpensSent
	}
	return 0
}

func (x *BgpNeighborStatistics) GetOpensReceived() uint64 {
	if x != nil {
		return x.OpensReceived
	}
	return 0
}

func (x *BgpNeighborStatistics) GetRouteRefreshesSent() uint64 {
	if x != nil {
		return x.RouteRefreshesSent
	}
	return 0
}

func (x *BgpNeighborStatistics) GetRouteRefreshesReceived() uint64 {
	if x != nil {
		return x.RouteRefreshesReceived
	}
	return 0
}

func (x *BgpNeighborStatistics) GetTotalPrefixesSent() uint64 {
	if x != nil {
		return x.TotalPrefixesSent
	}
	return 0
}

func (x *BgpNeighborStatistics) GetTotalPrefixesReceived() uint64 {
	if x != nil {
		return x.TotalPrefixesReceived
	}
	return 0
}

func (x *BgpNeighborStatistics) GetLastResetTime() uint64 {
	if x != nil {
		return x.LastResetTime
	}
	return 0
}

func (x *BgpNeighborStatistics) GetLastResetReason() string {
	if x != nil {
		return x.LastResetReason
	}
	return ""
}

// BGP Neighbor Capabilities State
type BgpNeighborCapabilitiesState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AnnouncedCapabilities  []string `protobuf:"bytes,1,rep,name=announced_capabilities,json=announcedCapabilities,proto3" json:"announced_capabilities,omitempty"`
	ReceivedCapabilities   []string `protobuf:"bytes,2,rep,name=received_capabilities,json=receivedCapabilities,proto3" json:"received_capabilities,omitempty"`
	NegotiatedCapabilities []string `protobuf:"bytes,3,rep,name=negotiated_capabilities,json=negotiatedCapabilities,proto3" json:"negotiated_capabilities,omitempty"`
}

func (x *BgpNeighborCapabilitiesState) Reset() {
	*x = BgpNeighborCapabilitiesState{}
	mi := &file_client_frr_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BgpNeighborCapabilitiesState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpNeighborCapabilitiesState) ProtoMessage() {}

func (x *BgpNeighborCapabilitiesState) ProtoReflect() protoreflect.Message {
	mi := &file_client_frr_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpNeighborCapabilitiesState.ProtoReflect.Descriptor instead.
func (*BgpNeighborCapabilitiesState) Descriptor() ([]byte, []int) {
	return file_client_frr_proto_rawDescGZIP(), []int{27}
}

func (x *BgpNeighborCapabilitiesState) GetAnnouncedCapabilities() []string {
	if x != nil {
		return x.AnnouncedCapabilities
	}
	return nil
}

func (x *BgpNeighborCapabilitiesState) GetReceivedCapabilities() []string {
	if x != nil {
		return x.ReceivedCapabilities
	}
	return nil
}

func (x *BgpNeighborCapabilitiesState) GetNegotiatedCapabilities() []string {
	if x != nil {
		return x.NegotiatedCapabilities
	}
	return nil
}

// BGP Neighbor Timer State
type BgpNeighborTimerState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConnectRetryTimer uint32 `protobuf:"varint,1,opt,name=connect_retry_timer,json=connectRetryTimer,proto3" json:"connect_retry_timer,omitempty"`
	HoldTimer         uint32 `protobuf:"varint,2,opt,name=hold_timer,json=holdTimer,proto3" json:"hold_timer,omitempty"`
	KeepaliveTimer    uint32 `protobuf:"varint,3,opt,name=keepalive_timer,json=keepaliveTimer,proto3" json:"keepalive_timer,omitempty"`
	LastRead          uint64 `protobuf:"varint,4,opt,name=last_read,json=lastRead,proto3" json:"last_read,omitempty"`
	LastWrite         uint64 `protobuf:"varint,5,opt,name=last_write,json=lastWrite,proto3" json:"last_write,omitempty"`
}

func (x *BgpNeighborTimerState) Reset() {
	*x = BgpNeighborTimerState{}
	mi := &file_client_frr_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BgpNeighborTimerState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpNeighborTimerState) ProtoMessage() {}

func (x *BgpNeighborTimerState) ProtoReflect() protoreflect.Message {
	mi := &file_client_frr_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpNeighborTimerState.ProtoReflect.Descriptor instead.
func (*BgpNeighborTimerState) Descriptor() ([]byte, []int) {
	return file_client_frr_proto_rawDescGZIP(), []int{28}
}

func (x *BgpNeighborTimerState) GetConnectRetryTimer() uint32 {
	if x != nil {
		return x.ConnectRetryTimer
	}
	return 0
}

func (x *BgpNeighborTimerState) GetHoldTimer() uint32 {
	if x != nil {
		return x.HoldTimer
	}
	return 0
}

func (x *BgpNeighborTimerState) GetKeepaliveTimer() uint32 {
	if x != nil {
		return x.KeepaliveTimer
	}
	return 0
}

func (x *BgpNeighborTimerState) GetLastRead() uint64 {
	if x != nil {
		return x.LastRead
	}
	return 0
}

func (x *BgpNeighborTimerState) GetLastWrite() uint64 {
	if x != nil {
		return x.LastWrite
	}
	return 0
}

// BGP Neighbor Connection State
type BgpNeighborConnectionState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConnectionState string `protobuf:"bytes,1,opt,name=connection_state,json=connectionState,proto3" json:"connection_state,omitempty"` // "Idle", "Connect", "Active", "OpenSent", "OpenConfirm", "Established"
	LocalHost       string `protobuf:"bytes,2,opt,name=local_host,json=localHost,proto3" json:"local_host,omitempty"`
	LocalPort       uint32 `protobuf:"varint,3,opt,name=local_port,json=localPort,proto3" json:"local_port,omitempty"`
	ForeignHost     string `protobuf:"bytes,4,opt,name=foreign_host,json=foreignHost,proto3" json:"foreign_host,omitempty"`
	ForeignPort     uint32 `protobuf:"varint,5,opt,name=foreign_port,json=foreignPort,proto3" json:"foreign_port,omitempty"`
	NextHop         string `protobuf:"bytes,6,opt,name=next_hop,json=nextHop,proto3" json:"next_hop,omitempty"`
	NextHopMetric   uint32 `protobuf:"varint,7,opt,name=next_hop_metric,json=nextHopMetric,proto3" json:"next_hop_metric,omitempty"`
}

func (x *BgpNeighborConnectionState) Reset() {
	*x = BgpNeighborConnectionState{}
	mi := &file_client_frr_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BgpNeighborConnectionState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpNeighborConnectionState) ProtoMessage() {}

func (x *BgpNeighborConnectionState) ProtoReflect() protoreflect.Message {
	mi := &file_client_frr_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpNeighborConnectionState.ProtoReflect.Descriptor instead.
func (*BgpNeighborConnectionState) Descriptor() ([]byte, []int) {
	return file_client_frr_proto_rawDescGZIP(), []int{29}
}

func (x *BgpNeighborConnectionState) GetConnectionState() string {
	if x != nil {
		return x.ConnectionState
	}
	return ""
}

func (x *BgpNeighborConnectionState) GetLocalHost() string {
	if x != nil {
		return x.LocalHost
	}
	return ""
}

func (x *BgpNeighborConnectionState) GetLocalPort() uint32 {
	if x != nil {
		return x.LocalPort
	}
	return 0
}

func (x *BgpNeighborConnectionState) GetForeignHost() string {
	if x != nil {
		return x.ForeignHost
	}
	return ""
}

func (x *BgpNeighborConnectionState) GetForeignPort() uint32 {
	if x != nil {
		return x.ForeignPort
	}
	return 0
}

func (x *BgpNeighborConnectionState) GetNextHop() string {
	if x != nil {
		return x.NextHop
	}
	return ""
}

func (x *BgpNeighborConnectionState) GetNextHopMetric() uint32 {
	if x != nil {
		return x.NextHopMetric
	}
	return 0
}

// Extended BGP Statistics
type BgpStatistics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TotalNeighbors       uint32 `protobuf:"varint,1,opt,name=total_neighbors,json=totalNeighbors,proto3" json:"total_neighbors,omitempty"`
	EstablishedNeighbors uint32 `protobuf:"varint,2,opt,name=established_neighbors,json=establishedNeighbors,proto3" json:"established_neighbors,omitempty"`
	TotalRoutes          uint32 `protobuf:"varint,3,opt,name=total_routes,json=totalRoutes,proto3" json:"total_routes,omitempty"`
	Ipv4Routes           uint32 `protobuf:"varint,4,opt,name=ipv4_routes,json=ipv4Routes,proto3" json:"ipv4_routes,omitempty"`
	Ipv6Routes           uint32 `protobuf:"varint,5,opt,name=ipv6_routes,json=ipv6Routes,proto3" json:"ipv6_routes,omitempty"`
	MemoryUsage          uint64 `protobuf:"varint,6,opt,name=memory_usage,json=memoryUsage,proto3" json:"memory_usage,omitempty"`
	// Extended statistics
	GlobalStats  *BgpGlobalStatistics  `protobuf:"bytes,7,opt,name=global_stats,json=globalStats,proto3" json:"global_stats,omitempty"`
	TableStats   []*BgpTableStatistics `protobuf:"bytes,8,rep,name=table_stats,json=tableStats,proto3" json:"table_stats,omitempty"`
	MessageStats *BgpMessageStatistics `protobuf:"bytes,9,opt,name=message_stats,json=messageStats,proto3" json:"message_stats,omitempty"`
}

func (x *BgpStatistics) Reset() {
	*x = BgpStatistics{}
	mi := &file_client_frr_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BgpStatistics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpStatistics) ProtoMessage() {}

func (x *BgpStatistics) ProtoReflect() protoreflect.Message {
	mi := &file_client_frr_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpStatistics.ProtoReflect.Descriptor instead.
func (*BgpStatistics) Descriptor() ([]byte, []int) {
	return file_client_frr_proto_rawDescGZIP(), []int{30}
}

func (x *BgpStatistics) GetTotalNeighbors() uint32 {
	if x != nil {
		return x.TotalNeighbors
	}
	return 0
}

func (x *BgpStatistics) GetEstablishedNeighbors() uint32 {
	if x != nil {
		return x.EstablishedNeighbors
	}
	return 0
}

func (x *BgpStatistics) GetTotalRoutes() uint32 {
	if x != nil {
		return x.TotalRoutes
	}
	return 0
}

func (x *BgpStatistics) GetIpv4Routes() uint32 {
	if x != nil {
		return x.Ipv4Routes
	}
	return 0
}

func (x *BgpStatistics) GetIpv6Routes() uint32 {
	if x != nil {
		return x.Ipv6Routes
	}
	return 0
}

func (x *BgpStatistics) GetMemoryUsage() uint64 {
	if x != nil {
		return x.MemoryUsage
	}
	return 0
}

func (x *BgpStatistics) GetGlobalStats() *BgpGlobalStatistics {
	if x != nil {
		return x.GlobalStats
	}
	return nil
}

func (x *BgpStatistics) GetTableStats() []*BgpTableStatistics {
	if x != nil {
		return x.TableStats
	}
	return nil
}

func (x *BgpStatistics) GetMessageStats() *BgpMessageStatistics {
	if x != nil {
		return x.MessageStats
	}
	return nil
}

// BGP Global Statistics
type BgpGlobalStatistics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UpdatesSent           uint64 `protobuf:"varint,1,opt,name=updates_sent,json=updatesSent,proto3" json:"updates_sent,omitempty"`
	UpdatesReceived       uint64 `protobuf:"varint,2,opt,name=updates_received,json=updatesReceived,proto3" json:"updates_received,omitempty"`
	TotalMessagesSent     uint64 `protobuf:"varint,3,opt,name=total_messages_sent,json=totalMessagesSent,proto3" json:"total_messages_sent,omitempty"`
	TotalMessagesReceived uint64 `protobuf:"varint,4,opt,name=total_messages_received,json=totalMessagesReceived,proto3" json:"total_messages_received,omitempty"`
	DampenedRoutes        uint64 `protobuf:"varint,5,opt,name=dampened_routes,json=dampenedRoutes,proto3" json:"dampened_routes,omitempty"`
	HistoryRoutes         uint64 `protobuf:"varint,6,opt,name=history_routes,json=historyRoutes,proto3" json:"history_routes,omitempty"`
	SuppressedRoutes      uint64 `protobuf:"varint,7,opt,name=suppressed_routes,json=suppressedRoutes,proto3" json:"suppressed_routes,omitempty"`
	WithdrawMessages      uint64 `protobuf:"varint,8,opt,name=withdraw_messages,json=withdrawMessages,proto3" json:"withdraw_messages,omitempty"`
}

func (x *BgpGlobalStatistics) Reset() {
	*x = BgpGlobalStatistics{}
	mi := &file_client_frr_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BgpGlobalStatistics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpGlobalStatistics) ProtoMessage() {}

func (x *BgpGlobalStatistics) ProtoReflect() protoreflect.Message {
	mi := &file_client_frr_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpGlobalStatistics.ProtoReflect.Descriptor instead.
func (*BgpGlobalStatistics) Descriptor() ([]byte, []int) {
	return file_client_frr_proto_rawDescGZIP(), []int{31}
}

func (x *BgpGlobalStatistics) GetUpdatesSent() uint64 {
	if x != nil {
		return x.UpdatesSent
	}
	return 0
}

func (x *BgpGlobalStatistics) GetUpdatesReceived() uint64 {
	if x != nil {
		return x.UpdatesReceived
	}
	return 0
}

func (x *BgpGlobalStatistics) GetTotalMessagesSent() uint64 {
	if x != nil {
		return x.TotalMessagesSent
	}
	return 0
}

func (x *BgpGlobalStatistics) GetTotalMessagesReceived() uint64 {
	if x != nil {
		return x.TotalMessagesReceived
	}
	return 0
}

func (x *BgpGlobalStatistics) GetDampenedRoutes() uint64 {
	if x != nil {
		return x.DampenedRoutes
	}
	return 0
}

func (x *BgpGlobalStatistics) GetHistoryRoutes() uint64 {
	if x != nil {
		return x.HistoryRoutes
	}
	return 0
}

func (x *BgpGlobalStatistics) GetSuppressedRoutes() uint64 {
	if x != nil {
		return x.SuppressedRoutes
	}
	return 0
}

func (x *BgpGlobalStatistics) GetWithdrawMessages() uint64 {
	if x != nil {
		return x.WithdrawMessages
	}
	return 0
}

// BGP Table Statistics
type BgpTableStatistics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AfiSafi     string `protobuf:"bytes,1,opt,name=afi_safi,json=afiSafi,proto3" json:"afi_safi,omitempty"`
	RibEntries  uint32 `protobuf:"varint,2,opt,name=rib_entries,json=ribEntries,proto3" json:"rib_entries,omitempty"`
	RibMemory   uint32 `protobuf:"varint,3,opt,name=rib_memory,json=ribMemory,proto3" json:"rib_memory,omitempty"`
	Paths       uint32 `protobuf:"varint,4,opt,name=paths,proto3" json:"paths,omitempty"`
	MemoryUsage uint32 `protobuf:"varint,5,opt,name=memory_usage,json=memoryUsage,proto3" json:"memory_usage,omitempty"`
}

func (x *BgpTableStatistics) Reset() {
	*x = BgpTableStatistics{}
	mi := &file_client_frr_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BgpTableStatistics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpTableStatistics) ProtoMessage() {}

func (x *BgpTableStatistics) ProtoReflect() protoreflect.Message {
	mi := &file_client_frr_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpTableStatistics.ProtoReflect.Descriptor instead.
func (*BgpTableStatistics) Descriptor() ([]byte, []int) {
	return file_client_frr_proto_rawDescGZIP(), []int{32}
}

func (x *BgpTableStatistics) GetAfiSafi() string {
	if x != nil {
		return x.AfiSafi
	}
	return ""
}

func (x *BgpTableStatistics) GetRibEntries() uint32 {
	if x != nil {
		return x.RibEntries
	}
	return 0
}

func (x *BgpTableStatistics) GetRibMemory() uint32 {
	if x != nil {
		return x.RibMemory
	}
	return 0
}

func (x *BgpTableStatistics) GetPaths() uint32 {
	if x != nil {
		return x.Paths
	}
	return 0
}

func (x *BgpTableStatistics) GetMemoryUsage() uint32 {
	if x != nil {
		return x.MemoryUsage
	}
	return 0
}

// BGP Message Statistics
type BgpMessageStatistics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OpensSent              uint64 `protobuf:"varint,1,opt,name=opens_sent,json=opensSent,proto3" json:"opens_sent,omitempty"`
	OpensReceived          uint64 `protobuf:"varint,2,opt,name=opens_received,json=opensReceived,proto3" json:"opens_received,omitempty"`
	UpdatesSent            uint64 `protobuf:"varint,3,opt,name=updates_sent,json=updatesSent,proto3" json:"updates_sent,omitempty"`
	UpdatesReceived        uint64 `protobuf:"varint,4,opt,name=updates_received,json=updatesReceived,proto3" json:"updates_received,omitempty"`
	KeepalivesSent         uint64 `protobuf:"varint,5,opt,name=keepalives_sent,json=keepalivesSent,proto3" json:"keepalives_sent,omitempty"`
	KeepalivesReceived     uint64 `protobuf:"varint,6,opt,name=keepalives_received,json=keepalivesReceived,proto3" json:"keepalives_received,omitempty"`
	NotificationsSent      uint64 `protobuf:"varint,7,opt,name=notifications_sent,json=notificationsSent,proto3" json:"notifications_sent,omitempty"`
	NotificationsReceived  uint64 `protobuf:"varint,8,opt,name=notifications_received,json=notificationsReceived,proto3" json:"notifications_received,omitempty"`
	RouteRefreshesSent     uint64 `protobuf:"varint,9,opt,name=route_refreshes_sent,json=routeRefreshesSent,proto3" json:"route_refreshes_sent,omitempty"`
	RouteRefreshesReceived uint64 `protobuf:"varint,10,opt,name=route_refreshes_received,json=routeRefreshesReceived,proto3" json:"route_refreshes_received,omitempty"`
}

func (x *BgpMessageStatistics) Reset() {
	*x = BgpMessageStatistics{}
	mi := &file_client_frr_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BgpMessageStatistics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpMessageStatistics) ProtoMessage() {}

func (x *BgpMessageStatistics) ProtoReflect() protoreflect.Message {
	mi := &file_client_frr_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpMessageStatistics.ProtoReflect.Descriptor instead.
func (*BgpMessageStatistics) Descriptor() ([]byte, []int) {
	return file_client_frr_proto_rawDescGZIP(), []int{33}
}

func (x *BgpMessageStatistics) GetOpensSent() uint64 {
	if x != nil {
		return x.OpensSent
	}
	return 0
}

func (x *BgpMessageStatistics) GetOpensReceived() uint64 {
	if x != nil {
		return x.OpensReceived
	}
	return 0
}

func (x *BgpMessageStatistics) GetUpdatesSent() uint64 {
	if x != nil {
		return x.UpdatesSent
	}
	return 0
}

func (x *BgpMessageStatistics) GetUpdatesReceived() uint64 {
	if x != nil {
		return x.UpdatesReceived
	}
	return 0
}

func (x *BgpMessageStatistics) GetKeepalivesSent() uint64 {
	if x != nil {
		return x.KeepalivesSent
	}
	return 0
}

func (x *BgpMessageStatistics) GetKeepalivesReceived() uint64 {
	if x != nil {
		return x.KeepalivesReceived
	}
	return 0
}

func (x *BgpMessageStatistics) GetNotificationsSent() uint64 {
	if x != nil {
		return x.NotificationsSent
	}
	return 0
}

func (x *BgpMessageStatistics) GetNotificationsReceived() uint64 {
	if x != nil {
		return x.NotificationsReceived
	}
	return 0
}

func (x *BgpMessageStatistics) GetRouteRefreshesSent() uint64 {
	if x != nil {
		return x.RouteRefreshesSent
	}
	return 0
}

func (x *BgpMessageStatistics) GetRouteRefreshesReceived() uint64 {
	if x != nil {
		return x.RouteRefreshesReceived
	}
	return 0
}

// Static Route Configuration
type StaticConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Routes        []*StaticRoute        `protobuf:"bytes,1,rep,name=routes,proto3" json:"routes,omitempty"`
	RouteTables   []*StaticRouteTable   `protobuf:"bytes,2,rep,name=route_tables,json=routeTables,proto3" json:"route_tables,omitempty"`
	NexthopGroups []*StaticNexthopGroup `protobuf:"bytes,3,rep,name=nexthop_groups,json=nexthopGroups,proto3" json:"nexthop_groups,omitempty"`
	GlobalConfig  *StaticGlobalConfig   `protobuf:"bytes,4,opt,name=global_config,json=globalConfig,proto3" json:"global_config,omitempty"`
}

func (x *StaticConfig) Reset() {
	*x = StaticConfig{}
	mi := &file_client_frr_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StaticConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StaticConfig) ProtoMessage() {}

func (x *StaticConfig) ProtoReflect() protoreflect.Message {
	mi := &file_client_frr_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StaticConfig.ProtoReflect.Descriptor instead.
func (*StaticConfig) Descriptor() ([]byte, []int) {
	return file_client_frr_proto_rawDescGZIP(), []int{34}
}

func (x *StaticConfig) GetRoutes() []*StaticRoute {
	if x != nil {
		return x.Routes
	}
	return nil
}

func (x *StaticConfig) GetRouteTables() []*StaticRouteTable {
	if x != nil {
		return x.RouteTables
	}
	return nil
}

func (x *StaticConfig) GetNexthopGroups() []*StaticNexthopGroup {
	if x != nil {
		return x.NexthopGroups
	}
	return nil
}

func (x *StaticConfig) GetGlobalConfig() *StaticGlobalConfig {
	if x != nil {
		return x.GlobalConfig
	}
	return nil
}

// Static Global Configuration
type StaticGlobalConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DefaultAdministrativeDistance uint32 `protobuf:"varint,1,opt,name=default_administrative_distance,json=defaultAdministrativeDistance,proto3" json:"default_administrative_distance,omitempty"` // Default: 1
	DefaultMetric                 uint32 `protobuf:"varint,2,opt,name=default_metric,json=defaultMetric,proto3" json:"default_metric,omitempty"`                                                   // Default: 0
	IpForward                     bool   `protobuf:"varint,3,opt,name=ip_forward,json=ipForward,proto3" json:"ip_forward,omitempty"`                                                               // IP forwarding enabled
	Ipv6Forward                   bool   `protobuf:"varint,4,opt,name=ipv6_forward,json=ipv6Forward,proto3" json:"ipv6_forward,omitempty"`                                                         // IPv6 forwarding enabled
	FibLookupRetries              uint32 `protobuf:"varint,5,opt,name=fib_lookup_retries,json=fibLookupRetries,proto3" json:"fib_lookup_retries,omitempty"`                                        // FIB lookup retries
}

func (x *StaticGlobalConfig) Reset() {
	*x = StaticGlobalConfig{}
	mi := &file_client_frr_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StaticGlobalConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StaticGlobalConfig) ProtoMessage() {}

func (x *StaticGlobalConfig) ProtoReflect() protoreflect.Message {
	mi := &file_client_frr_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StaticGlobalConfig.ProtoReflect.Descriptor instead.
func (*StaticGlobalConfig) Descriptor() ([]byte, []int) {
	return file_client_frr_proto_rawDescGZIP(), []int{35}
}

func (x *StaticGlobalConfig) GetDefaultAdministrativeDistance() uint32 {
	if x != nil {
		return x.DefaultAdministrativeDistance
	}
	return 0
}

func (x *StaticGlobalConfig) GetDefaultMetric() uint32 {
	if x != nil {
		return x.DefaultMetric
	}
	return 0
}

func (x *StaticGlobalConfig) GetIpForward() bool {
	if x != nil {
		return x.IpForward
	}
	return false
}

func (x *StaticGlobalConfig) GetIpv6Forward() bool {
	if x != nil {
		return x.Ipv6Forward
	}
	return false
}

func (x *StaticGlobalConfig) GetFibLookupRetries() uint32 {
	if x != nil {
		return x.FibLookupRetries
	}
	return 0
}

// Static Route
type StaticRoute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Destination            string `protobuf:"bytes,1,opt,name=destination,proto3" json:"destination,omitempty"`                                                      // Network in CIDR format
	Gateway                string `protobuf:"bytes,2,opt,name=gateway,proto3" json:"gateway,omitempty"`                                                              // Next-hop IP or interface
	Interface              string `protobuf:"bytes,3,opt,name=interface,proto3" json:"interface,omitempty"`                                                          // Outgoing interface
	Metric                 uint32 `protobuf:"varint,4,opt,name=metric,proto3" json:"metric,omitempty"`                                                               // Route metric
	AdministrativeDistance uint32 `protobuf:"varint,5,opt,name=administrative_distance,json=administrativeDistance,proto3" json:"administrative_distance,omitempty"` // Administrative distance
	Table                  uint32 `protobuf:"varint,6,opt,name=table,proto3" json:"table,omitempty"`                                                                 // Route table ID
	Description            string `protobuf:"bytes,7,opt,name=description,proto3" json:"description,omitempty"`                                                      // Route description
	// Extended static route options
	RouteType    StaticRouteType   `protobuf:"varint,8,opt,name=route_type,json=routeType,proto3,enum=client.StaticRouteType" json:"route_type,omitempty"`
	Flags        *StaticRouteFlags `protobuf:"bytes,9,opt,name=flags,proto3" json:"flags,omitempty"`
	Mtu          uint32            `protobuf:"varint,10,opt,name=mtu,proto3" json:"mtu,omitempty"`                                      // Path MTU
	Window       uint32            `protobuf:"varint,11,opt,name=window,proto3" json:"window,omitempty"`                                // TCP window size
	Irtt         uint32            `protobuf:"varint,12,opt,name=irtt,proto3" json:"irtt,omitempty"`                                    // Initial RTT
	Source       string            `protobuf:"bytes,13,opt,name=source,proto3" json:"source,omitempty"`                                 // Source IP for policy routing
	Realm        uint32            `protobuf:"varint,14,opt,name=realm,proto3" json:"realm,omitempty"`                                  // Routing realm
	NexthopGroup []string          `protobuf:"bytes,15,rep,name=nexthop_group,json=nexthopGroup,proto3" json:"nexthop_group,omitempty"` // Nexthop group reference
	// VRF support
	Vrf    string `protobuf:"bytes,16,opt,name=vrf,proto3" json:"vrf,omitempty"`        // VRF name
	Onlink bool   `protobuf:"varint,17,opt,name=onlink,proto3" json:"onlink,omitempty"` // Gateway is directly reachable
	// IPv6 specific
	Ipv6 bool `protobuf:"varint,18,opt,name=ipv6,proto3" json:"ipv6,omitempty"` // IPv6 route flag
}

func (x *StaticRoute) Reset() {
	*x = StaticRoute{}
	mi := &file_client_frr_proto_msgTypes[36]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StaticRoute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StaticRoute) ProtoMessage() {}

func (x *StaticRoute) ProtoReflect() protoreflect.Message {
	mi := &file_client_frr_proto_msgTypes[36]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StaticRoute.ProtoReflect.Descriptor instead.
func (*StaticRoute) Descriptor() ([]byte, []int) {
	return file_client_frr_proto_rawDescGZIP(), []int{36}
}

func (x *StaticRoute) GetDestination() string {
	if x != nil {
		return x.Destination
	}
	return ""
}

func (x *StaticRoute) GetGateway() string {
	if x != nil {
		return x.Gateway
	}
	return ""
}

func (x *StaticRoute) GetInterface() string {
	if x != nil {
		return x.Interface
	}
	return ""
}

func (x *StaticRoute) GetMetric() uint32 {
	if x != nil {
		return x.Metric
	}
	return 0
}

func (x *StaticRoute) GetAdministrativeDistance() uint32 {
	if x != nil {
		return x.AdministrativeDistance
	}
	return 0
}

func (x *StaticRoute) GetTable() uint32 {
	if x != nil {
		return x.Table
	}
	return 0
}

func (x *StaticRoute) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *StaticRoute) GetRouteType() StaticRouteType {
	if x != nil {
		return x.RouteType
	}
	return StaticRouteType_STATIC_ROUTE_UNKNOWN
}

func (x *StaticRoute) GetFlags() *StaticRouteFlags {
	if x != nil {
		return x.Flags
	}
	return nil
}

func (x *StaticRoute) GetMtu() uint32 {
	if x != nil {
		return x.Mtu
	}
	return 0
}

func (x *StaticRoute) GetWindow() uint32 {
	if x != nil {
		return x.Window
	}
	return 0
}

func (x *StaticRoute) GetIrtt() uint32 {
	if x != nil {
		return x.Irtt
	}
	return 0
}

func (x *StaticRoute) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *StaticRoute) GetRealm() uint32 {
	if x != nil {
		return x.Realm
	}
	return 0
}

func (x *StaticRoute) GetNexthopGroup() []string {
	if x != nil {
		return x.NexthopGroup
	}
	return nil
}

func (x *StaticRoute) GetVrf() string {
	if x != nil {
		return x.Vrf
	}
	return ""
}

func (x *StaticRoute) GetOnlink() bool {
	if x != nil {
		return x.Onlink
	}
	return false
}

func (x *StaticRoute) GetIpv6() bool {
	if x != nil {
		return x.Ipv6
	}
	return false
}

// Static Route Flags
type StaticRouteFlags struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Reject    bool `protobuf:"varint,1,opt,name=reject,proto3" json:"reject,omitempty"`                        // Reject route
	Blackhole bool `protobuf:"varint,2,opt,name=blackhole,proto3" json:"blackhole,omitempty"`                  // Blackhole route
	NoResolve bool `protobuf:"varint,3,opt,name=no_resolve,json=noResolve,proto3" json:"no_resolve,omitempty"` // Don't resolve gateway
	Onlink    bool `protobuf:"varint,4,opt,name=onlink,proto3" json:"onlink,omitempty"`                        // Gateway is on-link
	Pervasive bool `protobuf:"varint,5,opt,name=pervasive,proto3" json:"pervasive,omitempty"`                  // Pervasive route
	Offload   bool `protobuf:"varint,6,opt,name=offload,proto3" json:"offload,omitempty"`                      // Offload to hardware
	Trap      bool `protobuf:"varint,7,opt,name=trap,proto3" json:"trap,omitempty"`                            // Trap to CPU
}

func (x *StaticRouteFlags) Reset() {
	*x = StaticRouteFlags{}
	mi := &file_client_frr_proto_msgTypes[37]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StaticRouteFlags) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StaticRouteFlags) ProtoMessage() {}

func (x *StaticRouteFlags) ProtoReflect() protoreflect.Message {
	mi := &file_client_frr_proto_msgTypes[37]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StaticRouteFlags.ProtoReflect.Descriptor instead.
func (*StaticRouteFlags) Descriptor() ([]byte, []int) {
	return file_client_frr_proto_rawDescGZIP(), []int{37}
}

func (x *StaticRouteFlags) GetReject() bool {
	if x != nil {
		return x.Reject
	}
	return false
}

func (x *StaticRouteFlags) GetBlackhole() bool {
	if x != nil {
		return x.Blackhole
	}
	return false
}

func (x *StaticRouteFlags) GetNoResolve() bool {
	if x != nil {
		return x.NoResolve
	}
	return false
}

func (x *StaticRouteFlags) GetOnlink() bool {
	if x != nil {
		return x.Onlink
	}
	return false
}

func (x *StaticRouteFlags) GetPervasive() bool {
	if x != nil {
		return x.Pervasive
	}
	return false
}

func (x *StaticRouteFlags) GetOffload() bool {
	if x != nil {
		return x.Offload
	}
	return false
}

func (x *StaticRouteFlags) GetTrap() bool {
	if x != nil {
		return x.Trap
	}
	return false
}

// Static Route Table
type StaticRouteTable struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TableId     uint32         `protobuf:"varint,1,opt,name=table_id,json=tableId,proto3" json:"table_id,omitempty"`      // Route table ID
	TableName   string         `protobuf:"bytes,2,opt,name=table_name,json=tableName,proto3" json:"table_name,omitempty"` // Route table name
	Description string         `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`              // Table description
	Routes      []*StaticRoute `protobuf:"bytes,4,rep,name=routes,proto3" json:"routes,omitempty"`                        // Routes in this table
}

func (x *StaticRouteTable) Reset() {
	*x = StaticRouteTable{}
	mi := &file_client_frr_proto_msgTypes[38]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StaticRouteTable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StaticRouteTable) ProtoMessage() {}

func (x *StaticRouteTable) ProtoReflect() protoreflect.Message {
	mi := &file_client_frr_proto_msgTypes[38]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StaticRouteTable.ProtoReflect.Descriptor instead.
func (*StaticRouteTable) Descriptor() ([]byte, []int) {
	return file_client_frr_proto_rawDescGZIP(), []int{38}
}

func (x *StaticRouteTable) GetTableId() uint32 {
	if x != nil {
		return x.TableId
	}
	return 0
}

func (x *StaticRouteTable) GetTableName() string {
	if x != nil {
		return x.TableName
	}
	return ""
}

func (x *StaticRouteTable) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *StaticRouteTable) GetRoutes() []*StaticRoute {
	if x != nil {
		return x.Routes
	}
	return nil
}

// Static Nexthop Group (ECMP)
type StaticNexthopGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`         // Nexthop group name
	Nexthops    []*StaticNexthop       `protobuf:"bytes,2,rep,name=nexthops,proto3" json:"nexthops,omitempty"` // Group members
	Type        StaticNexthopGroupType `protobuf:"varint,3,opt,name=type,proto3,enum=client.StaticNexthopGroupType" json:"type,omitempty"`
	Description string                 `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *StaticNexthopGroup) Reset() {
	*x = StaticNexthopGroup{}
	mi := &file_client_frr_proto_msgTypes[39]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StaticNexthopGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StaticNexthopGroup) ProtoMessage() {}

func (x *StaticNexthopGroup) ProtoReflect() protoreflect.Message {
	mi := &file_client_frr_proto_msgTypes[39]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StaticNexthopGroup.ProtoReflect.Descriptor instead.
func (*StaticNexthopGroup) Descriptor() ([]byte, []int) {
	return file_client_frr_proto_rawDescGZIP(), []int{39}
}

func (x *StaticNexthopGroup) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *StaticNexthopGroup) GetNexthops() []*StaticNexthop {
	if x != nil {
		return x.Nexthops
	}
	return nil
}

func (x *StaticNexthopGroup) GetType() StaticNexthopGroupType {
	if x != nil {
		return x.Type
	}
	return StaticNexthopGroupType_NEXTHOP_GROUP_UNKNOWN
}

func (x *StaticNexthopGroup) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

// Static Nexthop
type StaticNexthop struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Gateway    string `protobuf:"bytes,1,opt,name=gateway,proto3" json:"gateway,omitempty"`        // Next-hop IP
	Interface  string `protobuf:"bytes,2,opt,name=interface,proto3" json:"interface,omitempty"`    // Outgoing interface
	Weight     uint32 `protobuf:"varint,3,opt,name=weight,proto3" json:"weight,omitempty"`         // Nexthop weight for ECMP
	Preference uint32 `protobuf:"varint,4,opt,name=preference,proto3" json:"preference,omitempty"` // Nexthop preference
	Backup     bool   `protobuf:"varint,5,opt,name=backup,proto3" json:"backup,omitempty"`         // Backup nexthop flag
}

func (x *StaticNexthop) Reset() {
	*x = StaticNexthop{}
	mi := &file_client_frr_proto_msgTypes[40]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StaticNexthop) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StaticNexthop) ProtoMessage() {}

func (x *StaticNexthop) ProtoReflect() protoreflect.Message {
	mi := &file_client_frr_proto_msgTypes[40]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StaticNexthop.ProtoReflect.Descriptor instead.
func (*StaticNexthop) Descriptor() ([]byte, []int) {
	return file_client_frr_proto_rawDescGZIP(), []int{40}
}

func (x *StaticNexthop) GetGateway() string {
	if x != nil {
		return x.Gateway
	}
	return ""
}

func (x *StaticNexthop) GetInterface() string {
	if x != nil {
		return x.Interface
	}
	return ""
}

func (x *StaticNexthop) GetWeight() uint32 {
	if x != nil {
		return x.Weight
	}
	return 0
}

func (x *StaticNexthop) GetPreference() uint32 {
	if x != nil {
		return x.Preference
	}
	return 0
}

func (x *StaticNexthop) GetBackup() bool {
	if x != nil {
		return x.Backup
	}
	return false
}

// Static Route Statistics
type StaticStatistics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TotalRoutes    uint32 `protobuf:"varint,1,opt,name=total_routes,json=totalRoutes,proto3" json:"total_routes,omitempty"`
	Ipv4Routes     uint32 `protobuf:"varint,2,opt,name=ipv4_routes,json=ipv4Routes,proto3" json:"ipv4_routes,omitempty"`
	Ipv6Routes     uint32 `protobuf:"varint,3,opt,name=ipv6_routes,json=ipv6Routes,proto3" json:"ipv6_routes,omitempty"`
	ActiveRoutes   uint32 `protobuf:"varint,4,opt,name=active_routes,json=activeRoutes,proto3" json:"active_routes,omitempty"`
	InactiveRoutes uint32 `protobuf:"varint,5,opt,name=inactive_routes,json=inactiveRoutes,proto3" json:"inactive_routes,omitempty"`
	// Per-table statistics
	TableStats []*StaticTableStatistics `protobuf:"bytes,6,rep,name=table_stats,json=tableStats,proto3" json:"table_stats,omitempty"`
	// Route type statistics
	RouteTypeStats *StaticRouteTypeStatistics `protobuf:"bytes,7,opt,name=route_type_stats,json=routeTypeStats,proto3" json:"route_type_stats,omitempty"`
	// Nexthop group statistics
	NexthopGroupStats *StaticNexthopGroupStatistics `protobuf:"bytes,8,opt,name=nexthop_group_stats,json=nexthopGroupStats,proto3" json:"nexthop_group_stats,omitempty"`
}

func (x *StaticStatistics) Reset() {
	*x = StaticStatistics{}
	mi := &file_client_frr_proto_msgTypes[41]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StaticStatistics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StaticStatistics) ProtoMessage() {}

func (x *StaticStatistics) ProtoReflect() protoreflect.Message {
	mi := &file_client_frr_proto_msgTypes[41]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StaticStatistics.ProtoReflect.Descriptor instead.
func (*StaticStatistics) Descriptor() ([]byte, []int) {
	return file_client_frr_proto_rawDescGZIP(), []int{41}
}

func (x *StaticStatistics) GetTotalRoutes() uint32 {
	if x != nil {
		return x.TotalRoutes
	}
	return 0
}

func (x *StaticStatistics) GetIpv4Routes() uint32 {
	if x != nil {
		return x.Ipv4Routes
	}
	return 0
}

func (x *StaticStatistics) GetIpv6Routes() uint32 {
	if x != nil {
		return x.Ipv6Routes
	}
	return 0
}

func (x *StaticStatistics) GetActiveRoutes() uint32 {
	if x != nil {
		return x.ActiveRoutes
	}
	return 0
}

func (x *StaticStatistics) GetInactiveRoutes() uint32 {
	if x != nil {
		return x.InactiveRoutes
	}
	return 0
}

func (x *StaticStatistics) GetTableStats() []*StaticTableStatistics {
	if x != nil {
		return x.TableStats
	}
	return nil
}

func (x *StaticStatistics) GetRouteTypeStats() *StaticRouteTypeStatistics {
	if x != nil {
		return x.RouteTypeStats
	}
	return nil
}

func (x *StaticStatistics) GetNexthopGroupStats() *StaticNexthopGroupStatistics {
	if x != nil {
		return x.NexthopGroupStats
	}
	return nil
}

// Static Table Statistics
type StaticTableStatistics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TableId        uint32 `protobuf:"varint,1,opt,name=table_id,json=tableId,proto3" json:"table_id,omitempty"`
	TableName      string `protobuf:"bytes,2,opt,name=table_name,json=tableName,proto3" json:"table_name,omitempty"`
	RouteCount     uint32 `protobuf:"varint,3,opt,name=route_count,json=routeCount,proto3" json:"route_count,omitempty"`
	ActiveRoutes   uint32 `protobuf:"varint,4,opt,name=active_routes,json=activeRoutes,proto3" json:"active_routes,omitempty"`
	InactiveRoutes uint32 `protobuf:"varint,5,opt,name=inactive_routes,json=inactiveRoutes,proto3" json:"inactive_routes,omitempty"`
}

func (x *StaticTableStatistics) Reset() {
	*x = StaticTableStatistics{}
	mi := &file_client_frr_proto_msgTypes[42]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StaticTableStatistics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StaticTableStatistics) ProtoMessage() {}

func (x *StaticTableStatistics) ProtoReflect() protoreflect.Message {
	mi := &file_client_frr_proto_msgTypes[42]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StaticTableStatistics.ProtoReflect.Descriptor instead.
func (*StaticTableStatistics) Descriptor() ([]byte, []int) {
	return file_client_frr_proto_rawDescGZIP(), []int{42}
}

func (x *StaticTableStatistics) GetTableId() uint32 {
	if x != nil {
		return x.TableId
	}
	return 0
}

func (x *StaticTableStatistics) GetTableName() string {
	if x != nil {
		return x.TableName
	}
	return ""
}

func (x *StaticTableStatistics) GetRouteCount() uint32 {
	if x != nil {
		return x.RouteCount
	}
	return 0
}

func (x *StaticTableStatistics) GetActiveRoutes() uint32 {
	if x != nil {
		return x.ActiveRoutes
	}
	return 0
}

func (x *StaticTableStatistics) GetInactiveRoutes() uint32 {
	if x != nil {
		return x.InactiveRoutes
	}
	return 0
}

// Static Route Type Statistics
type StaticRouteTypeStatistics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UnicastRoutes     uint32 `protobuf:"varint,1,opt,name=unicast_routes,json=unicastRoutes,proto3" json:"unicast_routes,omitempty"`
	BlackholeRoutes   uint32 `protobuf:"varint,2,opt,name=blackhole_routes,json=blackholeRoutes,proto3" json:"blackhole_routes,omitempty"`
	UnreachableRoutes uint32 `protobuf:"varint,3,opt,name=unreachable_routes,json=unreachableRoutes,proto3" json:"unreachable_routes,omitempty"`
	ProhibitRoutes    uint32 `protobuf:"varint,4,opt,name=prohibit_routes,json=prohibitRoutes,proto3" json:"prohibit_routes,omitempty"`
	LocalRoutes       uint32 `protobuf:"varint,5,opt,name=local_routes,json=localRoutes,proto3" json:"local_routes,omitempty"`
}

func (x *StaticRouteTypeStatistics) Reset() {
	*x = StaticRouteTypeStatistics{}
	mi := &file_client_frr_proto_msgTypes[43]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StaticRouteTypeStatistics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StaticRouteTypeStatistics) ProtoMessage() {}

func (x *StaticRouteTypeStatistics) ProtoReflect() protoreflect.Message {
	mi := &file_client_frr_proto_msgTypes[43]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StaticRouteTypeStatistics.ProtoReflect.Descriptor instead.
func (*StaticRouteTypeStatistics) Descriptor() ([]byte, []int) {
	return file_client_frr_proto_rawDescGZIP(), []int{43}
}

func (x *StaticRouteTypeStatistics) GetUnicastRoutes() uint32 {
	if x != nil {
		return x.UnicastRoutes
	}
	return 0
}

func (x *StaticRouteTypeStatistics) GetBlackholeRoutes() uint32 {
	if x != nil {
		return x.BlackholeRoutes
	}
	return 0
}

func (x *StaticRouteTypeStatistics) GetUnreachableRoutes() uint32 {
	if x != nil {
		return x.UnreachableRoutes
	}
	return 0
}

func (x *StaticRouteTypeStatistics) GetProhibitRoutes() uint32 {
	if x != nil {
		return x.ProhibitRoutes
	}
	return 0
}

func (x *StaticRouteTypeStatistics) GetLocalRoutes() uint32 {
	if x != nil {
		return x.LocalRoutes
	}
	return 0
}

// Static Nexthop Group Statistics
type StaticNexthopGroupStatistics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TotalGroups     uint32 `protobuf:"varint,1,opt,name=total_groups,json=totalGroups,proto3" json:"total_groups,omitempty"`
	MultipathGroups uint32 `protobuf:"varint,2,opt,name=multipath_groups,json=multipathGroups,proto3" json:"multipath_groups,omitempty"`
	ResilientGroups uint32 `protobuf:"varint,3,opt,name=resilient_groups,json=resilientGroups,proto3" json:"resilient_groups,omitempty"`
	TotalNexthops   uint32 `protobuf:"varint,4,opt,name=total_nexthops,json=totalNexthops,proto3" json:"total_nexthops,omitempty"`
	ActiveNexthops  uint32 `protobuf:"varint,5,opt,name=active_nexthops,json=activeNexthops,proto3" json:"active_nexthops,omitempty"`
}

func (x *StaticNexthopGroupStatistics) Reset() {
	*x = StaticNexthopGroupStatistics{}
	mi := &file_client_frr_proto_msgTypes[44]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StaticNexthopGroupStatistics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StaticNexthopGroupStatistics) ProtoMessage() {}

func (x *StaticNexthopGroupStatistics) ProtoReflect() protoreflect.Message {
	mi := &file_client_frr_proto_msgTypes[44]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StaticNexthopGroupStatistics.ProtoReflect.Descriptor instead.
func (*StaticNexthopGroupStatistics) Descriptor() ([]byte, []int) {
	return file_client_frr_proto_rawDescGZIP(), []int{44}
}

func (x *StaticNexthopGroupStatistics) GetTotalGroups() uint32 {
	if x != nil {
		return x.TotalGroups
	}
	return 0
}

func (x *StaticNexthopGroupStatistics) GetMultipathGroups() uint32 {
	if x != nil {
		return x.MultipathGroups
	}
	return 0
}

func (x *StaticNexthopGroupStatistics) GetResilientGroups() uint32 {
	if x != nil {
		return x.ResilientGroups
	}
	return 0
}

func (x *StaticNexthopGroupStatistics) GetTotalNexthops() uint32 {
	if x != nil {
		return x.TotalNexthops
	}
	return 0
}

func (x *StaticNexthopGroupStatistics) GetActiveNexthops() uint32 {
	if x != nil {
		return x.ActiveNexthops
	}
	return 0
}

// BGP Request
type RequestBgp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Operation     BgpOperationType  `protobuf:"varint,1,opt,name=operation,proto3,enum=client.BgpOperationType" json:"operation,omitempty"`
	Config        *BgpConfig        `protobuf:"bytes,2,opt,name=config,proto3" json:"config,omitempty"`
	Neighbor      *BgpNeighbor      `protobuf:"bytes,3,opt,name=neighbor,proto3" json:"neighbor,omitempty"`
	Network       *BgpNetwork       `protobuf:"bytes,4,opt,name=network,proto3" json:"network,omitempty"`
	RouteMap      *BgpRouteMap      `protobuf:"bytes,5,opt,name=route_map,json=routeMap,proto3" json:"route_map,omitempty"`                // New
	CommunityList *BgpCommunityList `protobuf:"bytes,6,opt,name=community_list,json=communityList,proto3" json:"community_list,omitempty"` // New
	PrefixList    *BgpPrefixList    `protobuf:"bytes,7,opt,name=prefix_list,json=prefixList,proto3" json:"prefix_list,omitempty"`          // New
	FilterName    string            `protobuf:"bytes,8,opt,name=filter_name,json=filterName,proto3" json:"filter_name,omitempty"`          // For filtering operations
}

func (x *RequestBgp) Reset() {
	*x = RequestBgp{}
	mi := &file_client_frr_proto_msgTypes[45]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RequestBgp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestBgp) ProtoMessage() {}

func (x *RequestBgp) ProtoReflect() protoreflect.Message {
	mi := &file_client_frr_proto_msgTypes[45]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestBgp.ProtoReflect.Descriptor instead.
func (*RequestBgp) Descriptor() ([]byte, []int) {
	return file_client_frr_proto_rawDescGZIP(), []int{45}
}

func (x *RequestBgp) GetOperation() BgpOperationType {
	if x != nil {
		return x.Operation
	}
	return BgpOperationType_BGP_UNKNOWN
}

func (x *RequestBgp) GetConfig() *BgpConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *RequestBgp) GetNeighbor() *BgpNeighbor {
	if x != nil {
		return x.Neighbor
	}
	return nil
}

func (x *RequestBgp) GetNetwork() *BgpNetwork {
	if x != nil {
		return x.Network
	}
	return nil
}

func (x *RequestBgp) GetRouteMap() *BgpRouteMap {
	if x != nil {
		return x.RouteMap
	}
	return nil
}

func (x *RequestBgp) GetCommunityList() *BgpCommunityList {
	if x != nil {
		return x.CommunityList
	}
	return nil
}

func (x *RequestBgp) GetPrefixList() *BgpPrefixList {
	if x != nil {
		return x.PrefixList
	}
	return nil
}

func (x *RequestBgp) GetFilterName() string {
	if x != nil {
		return x.FilterName
	}
	return ""
}

// BGP Response
type ResponseBgp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Operation  BgpOperationType `protobuf:"varint,1,opt,name=operation,proto3,enum=client.BgpOperationType" json:"operation,omitempty"`
	Success    bool             `protobuf:"varint,2,opt,name=success,proto3" json:"success,omitempty"`
	Message    string           `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	Config     *BgpConfig       `protobuf:"bytes,4,opt,name=config,proto3" json:"config,omitempty"`
	Neighbors  []*BgpNeighbor   `protobuf:"bytes,5,rep,name=neighbors,proto3" json:"neighbors,omitempty"`
	Networks   []*BgpNetwork    `protobuf:"bytes,6,rep,name=networks,proto3" json:"networks,omitempty"`
	State      *BgpState        `protobuf:"bytes,7,opt,name=state,proto3" json:"state,omitempty"`
	Statistics *BgpStatistics   `protobuf:"bytes,8,opt,name=statistics,proto3" json:"statistics,omitempty"`
	// Extended response fields
	RouteMaps      []*BgpRouteMap      `protobuf:"bytes,9,rep,name=route_maps,json=routeMaps,proto3" json:"route_maps,omitempty"`
	CommunityLists []*BgpCommunityList `protobuf:"bytes,10,rep,name=community_lists,json=communityLists,proto3" json:"community_lists,omitempty"`
	PrefixLists    []*BgpPrefixList    `protobuf:"bytes,11,rep,name=prefix_lists,json=prefixLists,proto3" json:"prefix_lists,omitempty"`
	Summary        *BgpSummary         `protobuf:"bytes,12,opt,name=summary,proto3" json:"summary,omitempty"` // New summary information
}

func (x *ResponseBgp) Reset() {
	*x = ResponseBgp{}
	mi := &file_client_frr_proto_msgTypes[46]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResponseBgp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseBgp) ProtoMessage() {}

func (x *ResponseBgp) ProtoReflect() protoreflect.Message {
	mi := &file_client_frr_proto_msgTypes[46]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseBgp.ProtoReflect.Descriptor instead.
func (*ResponseBgp) Descriptor() ([]byte, []int) {
	return file_client_frr_proto_rawDescGZIP(), []int{46}
}

func (x *ResponseBgp) GetOperation() BgpOperationType {
	if x != nil {
		return x.Operation
	}
	return BgpOperationType_BGP_UNKNOWN
}

func (x *ResponseBgp) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *ResponseBgp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ResponseBgp) GetConfig() *BgpConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *ResponseBgp) GetNeighbors() []*BgpNeighbor {
	if x != nil {
		return x.Neighbors
	}
	return nil
}

func (x *ResponseBgp) GetNetworks() []*BgpNetwork {
	if x != nil {
		return x.Networks
	}
	return nil
}

func (x *ResponseBgp) GetState() *BgpState {
	if x != nil {
		return x.State
	}
	return nil
}

func (x *ResponseBgp) GetStatistics() *BgpStatistics {
	if x != nil {
		return x.Statistics
	}
	return nil
}

func (x *ResponseBgp) GetRouteMaps() []*BgpRouteMap {
	if x != nil {
		return x.RouteMaps
	}
	return nil
}

func (x *ResponseBgp) GetCommunityLists() []*BgpCommunityList {
	if x != nil {
		return x.CommunityLists
	}
	return nil
}

func (x *ResponseBgp) GetPrefixLists() []*BgpPrefixList {
	if x != nil {
		return x.PrefixLists
	}
	return nil
}

func (x *ResponseBgp) GetSummary() *BgpSummary {
	if x != nil {
		return x.Summary
	}
	return nil
}

// BGP Summary Information
type BgpSummary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LocalAs          uint32            `protobuf:"varint,1,opt,name=local_as,json=localAs,proto3" json:"local_as,omitempty"`
	RouterId         string            `protobuf:"bytes,2,opt,name=router_id,json=routerId,proto3" json:"router_id,omitempty"`
	TotalPeers       uint32            `protobuf:"varint,3,opt,name=total_peers,json=totalPeers,proto3" json:"total_peers,omitempty"`
	EstablishedPeers uint32            `protobuf:"varint,4,opt,name=established_peers,json=establishedPeers,proto3" json:"established_peers,omitempty"`
	TotalPrefixes    uint32            `protobuf:"varint,5,opt,name=total_prefixes,json=totalPrefixes,proto3" json:"total_prefixes,omitempty"`
	TableVersion     uint64            `protobuf:"varint,6,opt,name=table_version,json=tableVersion,proto3" json:"table_version,omitempty"`
	PeerSummary      []*BgpPeerSummary `protobuf:"bytes,7,rep,name=peer_summary,json=peerSummary,proto3" json:"peer_summary,omitempty"`
}

func (x *BgpSummary) Reset() {
	*x = BgpSummary{}
	mi := &file_client_frr_proto_msgTypes[47]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BgpSummary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpSummary) ProtoMessage() {}

func (x *BgpSummary) ProtoReflect() protoreflect.Message {
	mi := &file_client_frr_proto_msgTypes[47]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpSummary.ProtoReflect.Descriptor instead.
func (*BgpSummary) Descriptor() ([]byte, []int) {
	return file_client_frr_proto_rawDescGZIP(), []int{47}
}

func (x *BgpSummary) GetLocalAs() uint32 {
	if x != nil {
		return x.LocalAs
	}
	return 0
}

func (x *BgpSummary) GetRouterId() string {
	if x != nil {
		return x.RouterId
	}
	return ""
}

func (x *BgpSummary) GetTotalPeers() uint32 {
	if x != nil {
		return x.TotalPeers
	}
	return 0
}

func (x *BgpSummary) GetEstablishedPeers() uint32 {
	if x != nil {
		return x.EstablishedPeers
	}
	return 0
}

func (x *BgpSummary) GetTotalPrefixes() uint32 {
	if x != nil {
		return x.TotalPrefixes
	}
	return 0
}

func (x *BgpSummary) GetTableVersion() uint64 {
	if x != nil {
		return x.TableVersion
	}
	return 0
}

func (x *BgpSummary) GetPeerSummary() []*BgpPeerSummary {
	if x != nil {
		return x.PeerSummary
	}
	return nil
}

// BGP Peer Summary
type BgpPeerSummary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PeerIp           string `protobuf:"bytes,1,opt,name=peer_ip,json=peerIp,proto3" json:"peer_ip,omitempty"`
	RemoteAs         uint32 `protobuf:"varint,2,opt,name=remote_as,json=remoteAs,proto3" json:"remote_as,omitempty"`
	State            string `protobuf:"bytes,3,opt,name=state,proto3" json:"state,omitempty"`
	Uptime           uint64 `protobuf:"varint,4,opt,name=uptime,proto3" json:"uptime,omitempty"`
	PrefixesReceived uint32 `protobuf:"varint,5,opt,name=prefixes_received,json=prefixesReceived,proto3" json:"prefixes_received,omitempty"`
	PrefixesSent     uint32 `protobuf:"varint,6,opt,name=prefixes_sent,json=prefixesSent,proto3" json:"prefixes_sent,omitempty"`
	StatePfxRcd      string `protobuf:"bytes,7,opt,name=state_pfx_rcd,json=statePfxRcd,proto3" json:"state_pfx_rcd,omitempty"` // State/PfxRcd format
}

func (x *BgpPeerSummary) Reset() {
	*x = BgpPeerSummary{}
	mi := &file_client_frr_proto_msgTypes[48]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BgpPeerSummary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpPeerSummary) ProtoMessage() {}

func (x *BgpPeerSummary) ProtoReflect() protoreflect.Message {
	mi := &file_client_frr_proto_msgTypes[48]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpPeerSummary.ProtoReflect.Descriptor instead.
func (*BgpPeerSummary) Descriptor() ([]byte, []int) {
	return file_client_frr_proto_rawDescGZIP(), []int{48}
}

func (x *BgpPeerSummary) GetPeerIp() string {
	if x != nil {
		return x.PeerIp
	}
	return ""
}

func (x *BgpPeerSummary) GetRemoteAs() uint32 {
	if x != nil {
		return x.RemoteAs
	}
	return 0
}

func (x *BgpPeerSummary) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *BgpPeerSummary) GetUptime() uint64 {
	if x != nil {
		return x.Uptime
	}
	return 0
}

func (x *BgpPeerSummary) GetPrefixesReceived() uint32 {
	if x != nil {
		return x.PrefixesReceived
	}
	return 0
}

func (x *BgpPeerSummary) GetPrefixesSent() uint32 {
	if x != nil {
		return x.PrefixesSent
	}
	return 0
}

func (x *BgpPeerSummary) GetStatePfxRcd() string {
	if x != nil {
		return x.StatePfxRcd
	}
	return ""
}

// Static Routing Request
type RequestStatic struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Operation      StaticOperationType `protobuf:"varint,1,opt,name=operation,proto3,enum=client.StaticOperationType" json:"operation,omitempty"`
	Config         *StaticConfig       `protobuf:"bytes,2,opt,name=config,proto3" json:"config,omitempty"`
	Route          *StaticRoute        `protobuf:"bytes,3,opt,name=route,proto3" json:"route,omitempty"`
	RouteTable     *StaticRouteTable   `protobuf:"bytes,4,opt,name=route_table,json=routeTable,proto3" json:"route_table,omitempty"`
	NexthopGroup   *StaticNexthopGroup `protobuf:"bytes,5,opt,name=nexthop_group,json=nexthopGroup,proto3" json:"nexthop_group,omitempty"`
	TableId        uint32              `protobuf:"varint,6,opt,name=table_id,json=tableId,proto3" json:"table_id,omitempty"`                     // For table-specific operations
	FilterCriteria string              `protobuf:"bytes,7,opt,name=filter_criteria,json=filterCriteria,proto3" json:"filter_criteria,omitempty"` // For filtering operations
}

func (x *RequestStatic) Reset() {
	*x = RequestStatic{}
	mi := &file_client_frr_proto_msgTypes[49]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RequestStatic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestStatic) ProtoMessage() {}

func (x *RequestStatic) ProtoReflect() protoreflect.Message {
	mi := &file_client_frr_proto_msgTypes[49]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestStatic.ProtoReflect.Descriptor instead.
func (*RequestStatic) Descriptor() ([]byte, []int) {
	return file_client_frr_proto_rawDescGZIP(), []int{49}
}

func (x *RequestStatic) GetOperation() StaticOperationType {
	if x != nil {
		return x.Operation
	}
	return StaticOperationType_STATIC_UNKNOWN
}

func (x *RequestStatic) GetConfig() *StaticConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *RequestStatic) GetRoute() *StaticRoute {
	if x != nil {
		return x.Route
	}
	return nil
}

func (x *RequestStatic) GetRouteTable() *StaticRouteTable {
	if x != nil {
		return x.RouteTable
	}
	return nil
}

func (x *RequestStatic) GetNexthopGroup() *StaticNexthopGroup {
	if x != nil {
		return x.NexthopGroup
	}
	return nil
}

func (x *RequestStatic) GetTableId() uint32 {
	if x != nil {
		return x.TableId
	}
	return 0
}

func (x *RequestStatic) GetFilterCriteria() string {
	if x != nil {
		return x.FilterCriteria
	}
	return ""
}

// Static Routing Response
type ResponseStatic struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Operation     StaticOperationType   `protobuf:"varint,1,opt,name=operation,proto3,enum=client.StaticOperationType" json:"operation,omitempty"`
	Success       bool                  `protobuf:"varint,2,opt,name=success,proto3" json:"success,omitempty"`
	Message       string                `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	Config        *StaticConfig         `protobuf:"bytes,4,opt,name=config,proto3" json:"config,omitempty"`
	Routes        []*StaticRoute        `protobuf:"bytes,5,rep,name=routes,proto3" json:"routes,omitempty"`
	RouteTables   []*StaticRouteTable   `protobuf:"bytes,6,rep,name=route_tables,json=routeTables,proto3" json:"route_tables,omitempty"`
	NexthopGroups []*StaticNexthopGroup `protobuf:"bytes,7,rep,name=nexthop_groups,json=nexthopGroups,proto3" json:"nexthop_groups,omitempty"`
	Statistics    *StaticStatistics     `protobuf:"bytes,8,opt,name=statistics,proto3" json:"statistics,omitempty"`
}

func (x *ResponseStatic) Reset() {
	*x = ResponseStatic{}
	mi := &file_client_frr_proto_msgTypes[50]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResponseStatic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseStatic) ProtoMessage() {}

func (x *ResponseStatic) ProtoReflect() protoreflect.Message {
	mi := &file_client_frr_proto_msgTypes[50]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseStatic.ProtoReflect.Descriptor instead.
func (*ResponseStatic) Descriptor() ([]byte, []int) {
	return file_client_frr_proto_rawDescGZIP(), []int{50}
}

func (x *ResponseStatic) GetOperation() StaticOperationType {
	if x != nil {
		return x.Operation
	}
	return StaticOperationType_STATIC_UNKNOWN
}

func (x *ResponseStatic) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *ResponseStatic) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ResponseStatic) GetConfig() *StaticConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *ResponseStatic) GetRoutes() []*StaticRoute {
	if x != nil {
		return x.Routes
	}
	return nil
}

func (x *ResponseStatic) GetRouteTables() []*StaticRouteTable {
	if x != nil {
		return x.RouteTables
	}
	return nil
}

func (x *ResponseStatic) GetNexthopGroups() []*StaticNexthopGroup {
	if x != nil {
		return x.NexthopGroups
	}
	return nil
}

func (x *ResponseStatic) GetStatistics() *StaticStatistics {
	if x != nil {
		return x.Statistics
	}
	return nil
}

// Configuration validation messages
type FrrConfigValidation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsValid     bool     `protobuf:"varint,1,opt,name=is_valid,json=isValid,proto3" json:"is_valid,omitempty"`
	Errors      []string `protobuf:"bytes,2,rep,name=errors,proto3" json:"errors,omitempty"`
	Warnings    []string `protobuf:"bytes,3,rep,name=warnings,proto3" json:"warnings,omitempty"`
	Suggestions []string `protobuf:"bytes,4,rep,name=suggestions,proto3" json:"suggestions,omitempty"`
}

func (x *FrrConfigValidation) Reset() {
	*x = FrrConfigValidation{}
	mi := &file_client_frr_proto_msgTypes[51]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FrrConfigValidation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FrrConfigValidation) ProtoMessage() {}

func (x *FrrConfigValidation) ProtoReflect() protoreflect.Message {
	mi := &file_client_frr_proto_msgTypes[51]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FrrConfigValidation.ProtoReflect.Descriptor instead.
func (*FrrConfigValidation) Descriptor() ([]byte, []int) {
	return file_client_frr_proto_rawDescGZIP(), []int{51}
}

func (x *FrrConfigValidation) GetIsValid() bool {
	if x != nil {
		return x.IsValid
	}
	return false
}

func (x *FrrConfigValidation) GetErrors() []string {
	if x != nil {
		return x.Errors
	}
	return nil
}

func (x *FrrConfigValidation) GetWarnings() []string {
	if x != nil {
		return x.Warnings
	}
	return nil
}

func (x *FrrConfigValidation) GetSuggestions() []string {
	if x != nil {
		return x.Suggestions
	}
	return nil
}

// BGP Configuration validation
type BgpConfigValidation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsValid        bool     `protobuf:"varint,1,opt,name=is_valid,json=isValid,proto3" json:"is_valid,omitempty"`
	NeighborErrors []string `protobuf:"bytes,2,rep,name=neighbor_errors,json=neighborErrors,proto3" json:"neighbor_errors,omitempty"`
	NetworkErrors  []string `protobuf:"bytes,3,rep,name=network_errors,json=networkErrors,proto3" json:"network_errors,omitempty"`
	RouteMapErrors []string `protobuf:"bytes,4,rep,name=route_map_errors,json=routeMapErrors,proto3" json:"route_map_errors,omitempty"`
	PolicyErrors   []string `protobuf:"bytes,5,rep,name=policy_errors,json=policyErrors,proto3" json:"policy_errors,omitempty"`
}

func (x *BgpConfigValidation) Reset() {
	*x = BgpConfigValidation{}
	mi := &file_client_frr_proto_msgTypes[52]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BgpConfigValidation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpConfigValidation) ProtoMessage() {}

func (x *BgpConfigValidation) ProtoReflect() protoreflect.Message {
	mi := &file_client_frr_proto_msgTypes[52]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpConfigValidation.ProtoReflect.Descriptor instead.
func (*BgpConfigValidation) Descriptor() ([]byte, []int) {
	return file_client_frr_proto_rawDescGZIP(), []int{52}
}

func (x *BgpConfigValidation) GetIsValid() bool {
	if x != nil {
		return x.IsValid
	}
	return false
}

func (x *BgpConfigValidation) GetNeighborErrors() []string {
	if x != nil {
		return x.NeighborErrors
	}
	return nil
}

func (x *BgpConfigValidation) GetNetworkErrors() []string {
	if x != nil {
		return x.NetworkErrors
	}
	return nil
}

func (x *BgpConfigValidation) GetRouteMapErrors() []string {
	if x != nil {
		return x.RouteMapErrors
	}
	return nil
}

func (x *BgpConfigValidation) GetPolicyErrors() []string {
	if x != nil {
		return x.PolicyErrors
	}
	return nil
}

// Static Route validation
type StaticRouteValidation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsValid       bool     `protobuf:"varint,1,opt,name=is_valid,json=isValid,proto3" json:"is_valid,omitempty"`
	RouteErrors   []string `protobuf:"bytes,2,rep,name=route_errors,json=routeErrors,proto3" json:"route_errors,omitempty"`
	NexthopErrors []string `protobuf:"bytes,3,rep,name=nexthop_errors,json=nexthopErrors,proto3" json:"nexthop_errors,omitempty"`
	TableErrors   []string `protobuf:"bytes,4,rep,name=table_errors,json=tableErrors,proto3" json:"table_errors,omitempty"`
}

func (x *StaticRouteValidation) Reset() {
	*x = StaticRouteValidation{}
	mi := &file_client_frr_proto_msgTypes[53]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StaticRouteValidation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StaticRouteValidation) ProtoMessage() {}

func (x *StaticRouteValidation) ProtoReflect() protoreflect.Message {
	mi := &file_client_frr_proto_msgTypes[53]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StaticRouteValidation.ProtoReflect.Descriptor instead.
func (*StaticRouteValidation) Descriptor() ([]byte, []int) {
	return file_client_frr_proto_rawDescGZIP(), []int{53}
}

func (x *StaticRouteValidation) GetIsValid() bool {
	if x != nil {
		return x.IsValid
	}
	return false
}

func (x *StaticRouteValidation) GetRouteErrors() []string {
	if x != nil {
		return x.RouteErrors
	}
	return nil
}

func (x *StaticRouteValidation) GetNexthopErrors() []string {
	if x != nil {
		return x.NexthopErrors
	}
	return nil
}

func (x *StaticRouteValidation) GetTableErrors() []string {
	if x != nil {
		return x.TableErrors
	}
	return nil
}

var File_client_frr_proto protoreflect.FileDescriptor

var file_client_frr_proto_rawDesc = []byte{
	0x0a, 0x10, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2f, 0x66, 0x72, 0x72, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x06, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x22, 0x95, 0x0a, 0x0a, 0x09, 0x42,
	0x67, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x2b, 0x0a, 0x11, 0x61, 0x75, 0x74, 0x6f,
	0x6e, 0x6f, 0x6d, 0x6f, 0x75, 0x73, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x10, 0x61, 0x75, 0x74, 0x6f, 0x6e, 0x6f, 0x6d, 0x6f, 0x75, 0x73, 0x53,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x31, 0x0a, 0x09, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x42,
	0x67, 0x70, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x52, 0x09, 0x6e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x73, 0x12, 0x2e, 0x0a, 0x08, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x2e, 0x42, 0x67, 0x70, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x08, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x6b, 0x65, 0x65, 0x70, 0x61, 0x6c, 0x69,
	0x76, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x6b,
	0x65, 0x65, 0x70, 0x61, 0x6c, 0x69, 0x76, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09,
	0x68, 0x6f, 0x6c, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x08, 0x68, 0x6f, 0x6c, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x16, 0x72, 0x65, 0x64,
	0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x72, 0x65, 0x64, 0x69, 0x73,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64,
	0x12, 0x2f, 0x0a, 0x13, 0x72, 0x65, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x72,
	0x65, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69,
	0x63, 0x12, 0x3c, 0x0a, 0x0d, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x2e, 0x42, 0x67, 0x70, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x0c, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x36, 0x0a, 0x0b, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x42, 0x67,
	0x70, 0x49, 0x70, 0x76, 0x36, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0a, 0x69, 0x70, 0x76,
	0x36, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x32, 0x0a, 0x0a, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x5f, 0x6d, 0x61, 0x70, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x2e, 0x42, 0x67, 0x70, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x4d, 0x61, 0x70,
	0x52, 0x09, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x4d, 0x61, 0x70, 0x73, 0x12, 0x41, 0x0a, 0x0f, 0x63,
	0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x18, 0x0c,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x42, 0x67,
	0x70, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x0e,
	0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x73, 0x12, 0x38,
	0x0a, 0x0c, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x18, 0x0d,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x42, 0x67,
	0x70, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x0b, 0x70, 0x72, 0x65,
	0x66, 0x69, 0x78, 0x4c, 0x69, 0x73, 0x74, 0x73, 0x12, 0x3e, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x66,
	0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x42, 0x67, 0x70, 0x43, 0x6f, 0x6e, 0x66,
	0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x66, 0x65,
	0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x42, 0x0a, 0x0f, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x5f, 0x72, 0x65, 0x66, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x42, 0x67, 0x70, 0x52, 0x6f,
	0x75, 0x74, 0x65, 0x52, 0x65, 0x66, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0e, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x52, 0x65, 0x66, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x45, 0x0a, 0x10,
	0x67, 0x72, 0x61, 0x63, 0x65, 0x66, 0x75, 0x6c, 0x5f, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e,
	0x42, 0x67, 0x70, 0x47, 0x72, 0x61, 0x63, 0x65, 0x66, 0x75, 0x6c, 0x52, 0x65, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x52, 0x0f, 0x67, 0x72, 0x61, 0x63, 0x65, 0x66, 0x75, 0x6c, 0x52, 0x65, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x12, 0x4c, 0x0a, 0x13, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x11, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x42, 0x67, 0x70, 0x41, 0x67, 0x67,
	0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x12, 0x61,
	0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65,
	0x73, 0x12, 0x48, 0x0a, 0x11, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x6f, 0x72, 0x69,
	0x67, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x42, 0x67, 0x70, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x52, 0x10, 0x64, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x6d,
	0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x73, 0x18, 0x13, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0c, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x50, 0x61, 0x74, 0x68, 0x73,
	0x12, 0x37, 0x0a, 0x17, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69,
	0x76, 0x65, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x16, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x76,
	0x65, 0x44, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x64, 0x65, 0x74,
	0x65, 0x72, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x69, 0x63, 0x5f, 0x6d, 0x65, 0x64, 0x18, 0x15,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x4d, 0x65, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x61, 0x6c, 0x77, 0x61, 0x79, 0x73,
	0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x5f, 0x6d, 0x65, 0x64, 0x18, 0x16, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x10, 0x61, 0x6c, 0x77, 0x61, 0x79, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72,
	0x65, 0x4d, 0x65, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x63, 0x61, 0x6e, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x73, 0x63, 0x61, 0x6e, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x30, 0x0a, 0x14, 0x6c, 0x6f, 0x67, 0x5f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f,
	0x72, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x18, 0x18, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x12, 0x6c, 0x6f, 0x67, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x49, 0x64, 0x22, 0xcd, 0x05, 0x0a, 0x0f, 0x42, 0x67, 0x70, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x2e, 0x0a, 0x13, 0x65, 0x62, 0x67, 0x70, 0x5f, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x11, 0x65, 0x62, 0x67, 0x70, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x44, 0x69,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x69, 0x62, 0x67, 0x70, 0x5f, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x11, 0x69, 0x62, 0x67, 0x70, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x44, 0x69,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x41, 0x64, 0x6d, 0x69, 0x6e,
	0x44, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x62, 0x67, 0x70, 0x5f,
	0x73, 0x63, 0x61, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0b, 0x62, 0x67, 0x70, 0x53, 0x63, 0x61, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x16,
	0x66, 0x61, 0x73, 0x74, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x66, 0x61,
	0x6c, 0x6c, 0x6f, 0x76, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x66, 0x61,
	0x73, 0x74, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x46, 0x61, 0x6c, 0x6c, 0x6f, 0x76,
	0x65, 0x72, 0x12, 0x30, 0x0a, 0x14, 0x6c, 0x6f, 0x67, 0x5f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x12, 0x6c, 0x6f, 0x67, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x73, 0x12, 0x2b, 0x0a, 0x11, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x5f, 0x6d, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x10, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x69, 0x63, 0x4d, 0x65,
	0x64, 0x12, 0x2c, 0x0a, 0x12, 0x61, 0x6c, 0x77, 0x61, 0x79, 0x73, 0x5f, 0x63, 0x6f, 0x6d, 0x70,
	0x61, 0x72, 0x65, 0x5f, 0x6d, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x61,
	0x6c, 0x77, 0x61, 0x79, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x4d, 0x65, 0x64, 0x12,
	0x35, 0x0a, 0x17, 0x62, 0x65, 0x73, 0x74, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x61, 0x73, 0x5f, 0x70,
	0x61, 0x74, 0x68, 0x5f, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x14, 0x62, 0x65, 0x73, 0x74, 0x70, 0x61, 0x74, 0x68, 0x41, 0x73, 0x50, 0x61, 0x74, 0x68,
	0x49, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x12, 0x40, 0x0a, 0x1d, 0x62, 0x65, 0x73, 0x74, 0x70, 0x61,
	0x74, 0x68, 0x5f, 0x6d, 0x65, 0x64, 0x5f, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x5f, 0x61,
	0x73, 0x5f, 0x77, 0x6f, 0x72, 0x73, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x19, 0x62,
	0x65, 0x73, 0x74, 0x70, 0x61, 0x74, 0x68, 0x4d, 0x65, 0x64, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6e,
	0x67, 0x41, 0x73, 0x57, 0x6f, 0x72, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x19, 0x62, 0x65, 0x73, 0x74,
	0x70, 0x61, 0x74, 0x68, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x5f, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x72, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x17, 0x62, 0x65, 0x73,
	0x74, 0x70, 0x61, 0x74, 0x68, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x52, 0x6f, 0x75, 0x74,
	0x65, 0x72, 0x69, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x62, 0x67, 0x70, 0x5f, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x62, 0x67, 0x70,
	0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x5f, 0x72, 0x65, 0x74, 0x72, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x52, 0x65,
	0x74, 0x72, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x12, 0x38, 0x0a, 0x18, 0x64, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x16, 0x64, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x22, 0xde, 0x02, 0x0a, 0x0d, 0x42, 0x67, 0x70, 0x49, 0x70, 0x76, 0x36, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x30, 0x0a, 0x14, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x75, 0x6e, 0x69,
	0x63, 0x61, 0x73, 0x74, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x12, 0x69, 0x70, 0x76, 0x36, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x45,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x3a, 0x0a, 0x0e, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x6e,
	0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x42, 0x67, 0x70, 0x4e, 0x65, 0x69, 0x67, 0x68,
	0x62, 0x6f, 0x72, 0x52, 0x0d, 0x69, 0x70, 0x76, 0x36, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f,
	0x72, 0x73, 0x12, 0x37, 0x0a, 0x0d, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x2e, 0x42, 0x67, 0x70, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x0c, 0x69,
	0x70, 0x76, 0x36, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x12, 0x3e, 0x0a, 0x1b, 0x72,
	0x65, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x69, 0x70, 0x76, 0x36, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x19, 0x72, 0x65, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x49, 0x70, 0x76, 0x36, 0x12, 0x38, 0x0a, 0x18, 0x72,
	0x65, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x69, 0x63, 0x5f, 0x69, 0x70, 0x76, 0x36, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x72,
	0x65, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69,
	0x63, 0x49, 0x70, 0x76, 0x36, 0x12, 0x2c, 0x0a, 0x12, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d,
	0x5f, 0x70, 0x61, 0x74, 0x68, 0x73, 0x5f, 0x69, 0x70, 0x76, 0x36, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x10, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x50, 0x61, 0x74, 0x68, 0x73, 0x49,
	0x70, 0x76, 0x36, 0x22, 0x9a, 0x0c, 0x0a, 0x0b, 0x42, 0x67, 0x70, 0x4e, 0x65, 0x69, 0x67, 0x68,
	0x62, 0x6f, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x69, 0x70, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x65, 0x65, 0x72, 0x49, 0x70, 0x12, 0x1b, 0x0a, 0x09,
	0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x61, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x08, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x41, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x70,
	0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70,
	0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x31, 0x0a, 0x06, 0x74, 0x69, 0x6d, 0x65, 0x72,
	0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x2e, 0x42, 0x67, 0x70, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x54, 0x69, 0x6d, 0x65,
	0x72, 0x73, 0x52, 0x06, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x73, 0x12, 0x43, 0x0a, 0x0c, 0x63, 0x61,
	0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x42, 0x67, 0x70, 0x4e, 0x65, 0x69,
	0x67, 0x68, 0x62, 0x6f, 0x72, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65,
	0x73, 0x52, 0x0c, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12,
	0x3b, 0x0a, 0x0a, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x70, 0x73, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x42, 0x67, 0x70,
	0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x4d, 0x61, 0x70,
	0x73, 0x52, 0x09, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x4d, 0x61, 0x70, 0x73, 0x12, 0x41, 0x0a, 0x0c,
	0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x42, 0x67, 0x70, 0x4e,
	0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x69, 0x73,
	0x74, 0x73, 0x52, 0x0b, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x69, 0x73, 0x74, 0x73, 0x12,
	0x41, 0x0a, 0x0c, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x42,
	0x67, 0x70, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x4c, 0x69, 0x73, 0x74, 0x73, 0x52, 0x0b, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x4c, 0x69, 0x73,
	0x74, 0x73, 0x12, 0x4d, 0x0a, 0x10, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x42, 0x67, 0x70, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f,
	0x72, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x73,
	0x52, 0x0f, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x4c, 0x69, 0x73, 0x74,
	0x73, 0x12, 0x22, 0x0a, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x68, 0x6f, 0x70, 0x5f, 0x73, 0x65,
	0x6c, 0x66, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x6e, 0x65, 0x78, 0x74, 0x48, 0x6f,
	0x70, 0x53, 0x65, 0x6c, 0x66, 0x12, 0x34, 0x0a, 0x16, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x72,
	0x65, 0x66, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x65, 0x66, 0x6c,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x73,
	0x65, 0x6e, 0x64, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0d, 0x73, 0x65, 0x6e, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69,
	0x74, 0x79, 0x12, 0x36, 0x0a, 0x17, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x64, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x15, 0x73, 0x65, 0x6e, 0x64, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65,
	0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x12, 0x40, 0x0a, 0x1c, 0x73, 0x6f,
	0x66, 0x74, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x1a, 0x73, 0x6f, 0x66, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x73, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08,
	0x73, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x1c, 0x0a,
	0x09, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6c,
	0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x61, 0x73, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6c,
	0x6f, 0x63, 0x61, 0x6c, 0x41, 0x73, 0x12, 0x2d, 0x0a, 0x13, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f,
	0x61, 0x73, 0x5f, 0x6e, 0x6f, 0x5f, 0x70, 0x72, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x18, 0x14, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x10, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x41, 0x73, 0x4e, 0x6f, 0x50, 0x72,
	0x65, 0x70, 0x65, 0x6e, 0x64, 0x12, 0x2d, 0x0a, 0x13, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x61,
	0x73, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x5f, 0x61, 0x73, 0x18, 0x15, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x10, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x41, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x61,
	0x63, 0x65, 0x41, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x61, 0x73, 0x5f,
	0x69, 0x6e, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x61,
	0x73, 0x49, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x17, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x6c,
	0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18,
	0x18, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x50, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x62, 0x67, 0x70, 0x5f, 0x6d,
	0x75, 0x6c, 0x74, 0x69, 0x68, 0x6f, 0x70, 0x18, 0x19, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x65,
	0x62, 0x67, 0x70, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x68, 0x6f, 0x70, 0x12, 0x2a, 0x0a, 0x11, 0x65,
	0x62, 0x67, 0x70, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x68, 0x6f, 0x70, 0x5f, 0x74, 0x74, 0x6c,
	0x18, 0x1a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x65, 0x62, 0x67, 0x70, 0x4d, 0x75, 0x6c, 0x74,
	0x69, 0x68, 0x6f, 0x70, 0x54, 0x74, 0x6c, 0x12, 0x36, 0x0a, 0x17, 0x64, 0x69, 0x73, 0x61, 0x62,
	0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x68, 0x65,
	0x63, 0x6b, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c,
	0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x12,
	0x36, 0x0a, 0x17, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74,
	0x79, 0x5f, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x15, 0x73, 0x65, 0x6e, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x53,
	0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x12, 0x36, 0x0a, 0x17, 0x73, 0x65, 0x6e, 0x64, 0x5f,
	0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64,
	0x65, 0x64, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x73, 0x65, 0x6e, 0x64, 0x43, 0x6f,
	0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x12,
	0x30, 0x0a, 0x14, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74,
	0x79, 0x5f, 0x6c, 0x61, 0x72, 0x67, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x73,
	0x65, 0x6e, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x4c, 0x61, 0x72, 0x67,
	0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x66, 0x64, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18,
	0x1f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x62, 0x66, 0x64, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x12, 0x32, 0x0a, 0x15, 0x62, 0x66, 0x64, 0x5f, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x5f, 0x6d,
	0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x13, 0x62, 0x66, 0x64, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70,
	0x6c, 0x69, 0x65, 0x72, 0x12, 0x2d, 0x0a, 0x13, 0x62, 0x66, 0x64, 0x5f, 0x72, 0x65, 0x71, 0x75,
	0x69, 0x72, 0x65, 0x64, 0x5f, 0x6d, 0x69, 0x6e, 0x5f, 0x72, 0x78, 0x18, 0x21, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x10, 0x62, 0x66, 0x64, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x4d, 0x69,
	0x6e, 0x52, 0x78, 0x12, 0x2b, 0x0a, 0x12, 0x62, 0x66, 0x64, 0x5f, 0x64, 0x65, 0x73, 0x69, 0x72,
	0x65, 0x64, 0x5f, 0x6d, 0x69, 0x6e, 0x5f, 0x74, 0x78, 0x18, 0x22, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0f, 0x62, 0x66, 0x64, 0x44, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x4d, 0x69, 0x6e, 0x54, 0x78,
	0x22, 0x72, 0x0a, 0x11, 0x42, 0x67, 0x70, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x54,
	0x69, 0x6d, 0x65, 0x72, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x6b, 0x65, 0x65, 0x70, 0x61, 0x6c, 0x69,
	0x76, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x6b, 0x65, 0x65, 0x70, 0x61, 0x6c,
	0x69, 0x76, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x6f, 0x6c, 0x64, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x68, 0x6f, 0x6c, 0x64, 0x74, 0x69, 0x6d, 0x65, 0x12,
	0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x5f, 0x72, 0x65, 0x74, 0x72, 0x79,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x52,
	0x65, 0x74, 0x72, 0x79, 0x22, 0xb3, 0x03, 0x0a, 0x17, 0x42, 0x67, 0x70, 0x4e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73,
	0x12, 0x3c, 0x0a, 0x1a, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x5f, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x18, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x49, 0x70, 0x76, 0x34, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x12, 0x3c,
	0x0a, 0x1a, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f,
	0x69, 0x70, 0x76, 0x36, 0x5f, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x18, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x49, 0x70, 0x76, 0x36, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0c, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73,
	0x68, 0x12, 0x22, 0x0a, 0x0d, 0x66, 0x6f, 0x75, 0x72, 0x5f, 0x6f, 0x63, 0x74, 0x65, 0x74, 0x5f,
	0x61, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x66, 0x6f, 0x75, 0x72, 0x4f, 0x63,
	0x74, 0x65, 0x74, 0x41, 0x73, 0x12, 0x1e, 0x0a, 0x0b, 0x61, 0x64, 0x64, 0x5f, 0x70, 0x61, 0x74,
	0x68, 0x5f, 0x74, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x61, 0x64, 0x64, 0x50,
	0x61, 0x74, 0x68, 0x54, 0x78, 0x12, 0x1e, 0x0a, 0x0b, 0x61, 0x64, 0x64, 0x5f, 0x70, 0x61, 0x74,
	0x68, 0x5f, 0x72, 0x78, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x61, 0x64, 0x64, 0x50,
	0x61, 0x74, 0x68, 0x52, 0x78, 0x12, 0x29, 0x0a, 0x10, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65,
	0x64, 0x5f, 0x6e, 0x65, 0x78, 0x74, 0x68, 0x6f, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x4e, 0x65, 0x78, 0x74, 0x68, 0x6f, 0x70,
	0x12, 0x29, 0x0a, 0x10, 0x67, 0x72, 0x61, 0x63, 0x65, 0x66, 0x75, 0x6c, 0x5f, 0x72, 0x65, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x67, 0x72, 0x61, 0x63,
	0x65, 0x66, 0x75, 0x6c, 0x52, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x3d, 0x0a, 0x1b, 0x6c,
	0x6f, 0x6e, 0x67, 0x5f, 0x6c, 0x69, 0x76, 0x65, 0x64, 0x5f, 0x67, 0x72, 0x61, 0x63, 0x65, 0x66,
	0x75, 0x6c, 0x5f, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x18, 0x6c, 0x6f, 0x6e, 0x67, 0x4c, 0x69, 0x76, 0x65, 0x64, 0x47, 0x72, 0x61, 0x63, 0x65,
	0x66, 0x75, 0x6c, 0x52, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x22, 0xb0, 0x01, 0x0a, 0x14, 0x42,
	0x67, 0x70, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x4d,
	0x61, 0x70, 0x73, 0x12, 0x20, 0x0a, 0x0c, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x70,
	0x5f, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x4d, 0x61, 0x70, 0x49, 0x6e, 0x12, 0x22, 0x0a, 0x0d, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x6d,
	0x61, 0x70, 0x5f, 0x6f, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x4d, 0x61, 0x70, 0x4f, 0x75, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x5f, 0x6d, 0x61, 0x70, 0x5f, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x4d, 0x61, 0x70, 0x49, 0x6d, 0x70,
	0x6f, 0x72, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x70,
	0x5f, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x4d, 0x61, 0x70, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x22, 0x66, 0x0a,
	0x16, 0x42, 0x67, 0x70, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x50, 0x72, 0x65, 0x66,
	0x69, 0x78, 0x4c, 0x69, 0x73, 0x74, 0x73, 0x12, 0x24, 0x0a, 0x0e, 0x70, 0x72, 0x65, 0x66, 0x69,
	0x78, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x12, 0x26, 0x0a,
	0x0f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x6f, 0x75, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x69,
	0x73, 0x74, 0x4f, 0x75, 0x74, 0x22, 0x66, 0x0a, 0x16, 0x42, 0x67, 0x70, 0x4e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x73, 0x12,
	0x24, 0x0a, 0x0e, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x69,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x4c,
	0x69, 0x73, 0x74, 0x49, 0x6e, 0x12, 0x26, 0x0a, 0x0f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x5f, 0x6f, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x75, 0x74, 0x22, 0x7a, 0x0a,
	0x1a, 0x42, 0x67, 0x70, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x44, 0x69, 0x73, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x64,
	0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x69,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x12, 0x2e, 0x0a, 0x13, 0x64, 0x69, 0x73,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x6f, 0x75, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x75, 0x74, 0x22, 0xec, 0x01, 0x0a, 0x0a, 0x42, 0x67,
	0x70, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x18, 0x0a, 0x07, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x70, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x4d, 0x61, 0x70, 0x12,
	0x1a, 0x0a, 0x08, 0x62, 0x61, 0x63, 0x6b, 0x64, 0x6f, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x08, 0x62, 0x61, 0x63, 0x6b, 0x64, 0x6f, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x54, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x12, 0x37, 0x0a, 0x17, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74,
	0x72, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x16, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72,
	0x61, 0x74, 0x69, 0x76, 0x65, 0x44, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x19, 0x0a,
	0x08, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x68, 0x6f, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x6e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x22, 0x90, 0x02, 0x0a, 0x0b, 0x42, 0x67, 0x70,
	0x52, 0x6f, 0x75, 0x74, 0x65, 0x4d, 0x61, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08,
	0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x2e, 0x42, 0x67, 0x70, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x4d, 0x61, 0x70, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x43, 0x0a, 0x10, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x42,
	0x67, 0x70, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x4d, 0x61, 0x70, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52,
	0x0f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x37, 0x0a, 0x0b, 0x73, 0x65, 0x74, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x42,
	0x67, 0x70, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x4d, 0x61, 0x70, 0x53, 0x65, 0x74, 0x52, 0x0a, 0x73,
	0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x73, 0x0a, 0x10, 0x42,
	0x67, 0x70, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x4d, 0x61, 0x70, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x12,
	0x1d, 0x0a, 0x0a, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f,
	0x0a, 0x0b, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x1f, 0x0a, 0x0b, 0x65, 0x78, 0x61, 0x63, 0x74, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x65, 0x78, 0x61, 0x63, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x22, 0x64, 0x0a, 0x0e, 0x42, 0x67, 0x70, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x4d, 0x61, 0x70, 0x53,
	0x65, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x65, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a,
	0x09, 0x73, 0x65, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x73, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x64,
	0x64, 0x69, 0x74, 0x69, 0x76, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x61, 0x64,
	0x64, 0x69, 0x74, 0x69, 0x76, 0x65, 0x22, 0xbf, 0x01, 0x0a, 0x10, 0x42, 0x67, 0x70, 0x43, 0x6f,
	0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x2e, 0x42, 0x67, 0x70, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x4d, 0x61, 0x70,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x27,
	0x0a, 0x0f, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69,
	0x74, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x78, 0x61, 0x63, 0x74,
	0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x65, 0x78,
	0x61, 0x63, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x22, 0xaa, 0x01, 0x0a, 0x0d, 0x42, 0x67, 0x70,
	0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x2e, 0x42, 0x67, 0x70, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x4d, 0x61, 0x70, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a,
	0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70,
	0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x0e, 0x0a, 0x02, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x02, 0x6c, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x02, 0x67, 0x65, 0x22, 0x6e, 0x0a, 0x10, 0x42, 0x67, 0x70, 0x43, 0x6f, 0x6e, 0x66,
	0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x6f, 0x6e,
	0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x12, 0x2f, 0x0a, 0x13, 0x63, 0x6f, 0x6e, 0x66, 0x65, 0x64, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x65, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0d, 0x52, 0x12, 0x63, 0x6f, 0x6e, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x50, 0x65, 0x65, 0x72, 0x73, 0x22, 0x53, 0x0a, 0x11, 0x42, 0x67, 0x70, 0x52, 0x6f, 0x75, 0x74,
	0x65, 0x52, 0x65, 0x66, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xa4, 0x01, 0x0a, 0x12, 0x42,
	0x67, 0x70, 0x47, 0x72, 0x61, 0x63, 0x65, 0x66, 0x75, 0x6c, 0x52, 0x65, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x72,
	0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0b, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x25,
	0x0a, 0x0e, 0x73, 0x74, 0x61, 0x6c, 0x65, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x6c, 0x65, 0x70, 0x61, 0x74,
	0x68, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x70, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x5f, 0x66, 0x77, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0f, 0x70, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x46, 0x77, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x22, 0xbf, 0x01, 0x0a, 0x13, 0x42, 0x67, 0x70, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61,
	0x74, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x6f,
	0x6e, 0x6c, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x73, 0x75, 0x6d, 0x6d, 0x61,
	0x72, 0x79, 0x4f, 0x6e, 0x6c, 0x79, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x73, 0x5f, 0x73, 0x65, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x61, 0x73, 0x53, 0x65, 0x74, 0x12, 0x1b, 0x0a,
	0x09, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x4d, 0x61, 0x70, 0x12, 0x37, 0x0a, 0x17, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x64, 0x69, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x16, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x76, 0x65, 0x44, 0x69, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x22, 0x64, 0x0a, 0x13, 0x42, 0x67, 0x70, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x6d, 0x61,
	0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x4d, 0x61,
	0x70, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x22, 0xf1, 0x02, 0x0a, 0x08, 0x42, 0x67,
	0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16,
	0x0a, 0x06, 0x75, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06,
	0x75, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x41, 0x0a, 0x0f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x42, 0x67, 0x70, 0x4e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0e, 0x6e, 0x65, 0x69, 0x67, 0x68,
	0x62, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b,
	0x62, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0a, 0x62, 0x65, 0x73, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x12, 0x39, 0x0a,
	0x0c, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x42, 0x67, 0x70,
	0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0b, 0x67, 0x6c, 0x6f,
	0x62, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x38, 0x0a, 0x0c, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x42, 0x67, 0x70, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0b, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x73, 0x12, 0x39, 0x0a, 0x0c, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x75, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x2e, 0x42, 0x67, 0x70, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x55, 0x73, 0x61, 0x67, 0x65,
	0x52, 0x0b, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x55, 0x73, 0x61, 0x67, 0x65, 0x22, 0x84, 0x02,
	0x0a, 0x0e, 0x42, 0x67, 0x70, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x67, 0x70, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x62, 0x67, 0x70, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x61, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x07, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x41, 0x73, 0x12, 0x26, 0x0a, 0x0f,
	0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x52, 0x6f, 0x75, 0x74,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x70, 0x65,
	0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x50, 0x65, 0x65, 0x72, 0x73, 0x12, 0x2b, 0x0a, 0x11, 0x65, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x69,
	0x73, 0x68, 0x65, 0x64, 0x5f, 0x70, 0x65, 0x65, 0x72, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x10, 0x65, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x50, 0x65, 0x65,
	0x72, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x49, 0x64, 0x22, 0xb4, 0x01, 0x0a, 0x0d, 0x42, 0x67, 0x70, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x66, 0x69, 0x5f, 0x73, 0x61,
	0x66, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x66, 0x69, 0x53, 0x61, 0x66,
	0x69, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69,
	0x78, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x50, 0x61, 0x74, 0x68, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x65, 0x73,
	0x74, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x62,
	0x65, 0x73, 0x74, 0x50, 0x61, 0x74, 0x68, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x65, 0x6d, 0x6f,
	0x72, 0x79, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b,
	0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x55, 0x73, 0x61, 0x67, 0x65, 0x22, 0xf7, 0x01, 0x0a, 0x0e,
	0x42, 0x67, 0x70, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x55, 0x73, 0x61, 0x67, 0x65, 0x12, 0x21,
	0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4d, 0x65, 0x6d, 0x6f, 0x72,
	0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x69, 0x62, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x72, 0x69, 0x62, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79,
	0x12, 0x27, 0x0a, 0x0f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x5f, 0x6d, 0x65, 0x6d,
	0x6f, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x6e, 0x65, 0x69, 0x67, 0x68,
	0x62, 0x6f, 0x72, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x12, 0x29, 0x0a, 0x10, 0x61, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x4d, 0x65,
	0x6d, 0x6f, 0x72, 0x79, 0x12, 0x24, 0x0a, 0x0e, 0x61, 0x73, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x5f,
	0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x61, 0x73,
	0x50, 0x61, 0x74, 0x68, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x6f,
	0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x4d,
	0x65, 0x6d, 0x6f, 0x72, 0x79, 0x22, 0xe3, 0x03, 0x0a, 0x10, 0x42, 0x67, 0x70, 0x4e, 0x65, 0x69,
	0x67, 0x68, 0x62, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x65,
	0x65, 0x72, 0x5f, 0x69, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x65, 0x65,
	0x72, 0x49, 0x70, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x61, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x41, 0x73,
	0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x70, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x75, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x27,
	0x0a, 0x0f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x64, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x6e, 0x74, 0x5f,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x65,
	0x6e, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x12, 0x3d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x42, 0x67, 0x70, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f,
	0x72, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x0a, 0x73, 0x74, 0x61,
	0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x53, 0x0a, 0x12, 0x63, 0x61, 0x70, 0x61, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x42, 0x67, 0x70,
	0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x69, 0x65, 0x73, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x11, 0x63, 0x61, 0x70, 0x61, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x3e, 0x0a, 0x0b,
	0x74, 0x69, 0x6d, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x42, 0x67, 0x70, 0x4e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x52, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x4d, 0x0a, 0x10,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e,
	0x42, 0x67, 0x70, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x22, 0xe5, 0x05, 0x0a, 0x15,
	0x42, 0x67, 0x70, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x5f, 0x73, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x53, 0x65, 0x6e, 0x74, 0x12, 0x2b, 0x0a, 0x11, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x52,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x6b, 0x65, 0x65, 0x70, 0x61,
	0x6c, 0x69, 0x76, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0e, 0x6b, 0x65, 0x65, 0x70, 0x61, 0x6c, 0x69, 0x76, 0x65, 0x73, 0x53, 0x65, 0x6e, 0x74,
	0x12, 0x2f, 0x0a, 0x13, 0x6b, 0x65, 0x65, 0x70, 0x61, 0x6c, 0x69, 0x76, 0x65, 0x73, 0x5f, 0x72,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x12, 0x6b,
	0x65, 0x65, 0x70, 0x61, 0x6c, 0x69, 0x76, 0x65, 0x73, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x64, 0x12, 0x21, 0x0a, 0x0c, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x6e,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73,
	0x53, 0x65, 0x6e, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x5f,
	0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x12,
	0x2d, 0x0a, 0x12, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x5f, 0x73, 0x65, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x6e, 0x6f, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53, 0x65, 0x6e, 0x74, 0x12, 0x35,
	0x0a, 0x16, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f,
	0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x15,
	0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x5f, 0x73,
	0x65, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x6e, 0x73,
	0x53, 0x65, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x5f, 0x72, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x6f, 0x70,
	0x65, 0x6e, 0x73, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x65, 0x73, 0x5f, 0x73,
	0x65, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x04, 0x52, 0x12, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x65, 0x73, 0x53, 0x65, 0x6e, 0x74, 0x12, 0x38, 0x0a,
	0x18, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x65, 0x73,
	0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x16, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x65, 0x73, 0x52,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x6e, 0x74, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x72, 0x65, 0x66, 0x69,
	0x78, 0x65, 0x73, 0x53, 0x65, 0x6e, 0x74, 0x12, 0x36, 0x0a, 0x17, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x04, 0x52, 0x15, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50,
	0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x12,
	0x26, 0x0a, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x74, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x52, 0x65,
	0x73, 0x65, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x6c, 0x61, 0x73, 0x74, 0x5f,
	0x72, 0x65, 0x73, 0x65, 0x74, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x52, 0x65, 0x73, 0x65, 0x74, 0x52, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x22, 0xc3, 0x01, 0x0a, 0x1c, 0x42, 0x67, 0x70, 0x4e, 0x65, 0x69, 0x67, 0x68,
	0x62, 0x6f, 0x72, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x35, 0x0a, 0x16, 0x61, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65,
	0x64, 0x5f, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x15, 0x61, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x64, 0x43,
	0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x33, 0x0a, 0x15, 0x72,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x5f, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x69, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x14, 0x72, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x64, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73,
	0x12, 0x37, 0x0a, 0x17, 0x6e, 0x65, 0x67, 0x6f, 0x74, 0x69, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x63,
	0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x16, 0x6e, 0x65, 0x67, 0x6f, 0x74, 0x69, 0x61, 0x74, 0x65, 0x64, 0x43, 0x61, 0x70,
	0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x22, 0xcb, 0x01, 0x0a, 0x15, 0x42, 0x67,
	0x70, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x5f, 0x72,
	0x65, 0x74, 0x72, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x11, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x52, 0x65, 0x74, 0x72, 0x79, 0x54, 0x69,
	0x6d, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x68, 0x6f, 0x6c, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x68, 0x6f, 0x6c, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x72, 0x12, 0x27, 0x0a, 0x0f, 0x6b, 0x65, 0x65, 0x70, 0x61, 0x6c, 0x69, 0x76, 0x65, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x6b, 0x65, 0x65,
	0x70, 0x61, 0x6c, 0x69, 0x76, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x6c,
	0x61, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08,
	0x6c, 0x61, 0x73, 0x74, 0x52, 0x65, 0x61, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x61, 0x73, 0x74,
	0x5f, 0x77, 0x72, 0x69, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x6c, 0x61,
	0x73, 0x74, 0x57, 0x72, 0x69, 0x74, 0x65, 0x22, 0x8e, 0x02, 0x0a, 0x1a, 0x42, 0x67, 0x70, 0x4e,
	0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x48, 0x6f, 0x73, 0x74,
	0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x50, 0x6f, 0x72, 0x74, 0x12,
	0x21, 0x0a, 0x0c, 0x66, 0x6f, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x66, 0x6f, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x48, 0x6f,
	0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x66, 0x6f, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x5f, 0x70, 0x6f,
	0x72, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x66, 0x6f, 0x72, 0x65, 0x69, 0x67,
	0x6e, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x68, 0x6f,
	0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70,
	0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x68, 0x6f, 0x70, 0x5f, 0x6d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x48,
	0x6f, 0x70, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x22, 0xb5, 0x03, 0x0a, 0x0d, 0x42, 0x67, 0x70,
	0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x5f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x73, 0x12, 0x33, 0x0a, 0x15, 0x65, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x69, 0x73, 0x68,
	0x65, 0x64, 0x5f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x14, 0x65, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x4e,
	0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x69,
	0x70, 0x76, 0x34, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0a, 0x69, 0x70, 0x76, 0x34, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b,
	0x69, 0x70, 0x76, 0x36, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0a, 0x69, 0x70, 0x76, 0x36, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x12, 0x21, 0x0a,
	0x0c, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0b, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x55, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x3e, 0x0a, 0x0c, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e,
	0x42, 0x67, 0x70, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x73, 0x52, 0x0b, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x73,
	0x12, 0x3b, 0x0a, 0x0b, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18,
	0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x42,
	0x67, 0x70, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x73, 0x52, 0x0a, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x41, 0x0a,
	0x0d, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x42, 0x67,
	0x70, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x73, 0x52, 0x0c, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73,
	0x22, 0xf5, 0x02, 0x0a, 0x13, 0x42, 0x67, 0x70, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x53, 0x74,
	0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x53, 0x65, 0x6e, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x52, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x11, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x53, 0x65, 0x6e, 0x74, 0x12, 0x36, 0x0a, 0x17, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x15, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x12, 0x27,
	0x0a, 0x0f, 0x64, 0x61, 0x6d, 0x70, 0x65, 0x6e, 0x65, 0x64, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x64, 0x61, 0x6d, 0x70, 0x65, 0x6e, 0x65,
	0x64, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x68, 0x69, 0x73, 0x74, 0x6f,
	0x72, 0x79, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0d, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x12, 0x2b,
	0x0a, 0x11, 0x73, 0x75, 0x70, 0x70, 0x72, 0x65, 0x73, 0x73, 0x65, 0x64, 0x5f, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x73, 0x75, 0x70, 0x70, 0x72,
	0x65, 0x73, 0x73, 0x65, 0x64, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x12, 0x2b, 0x0a, 0x11, 0x77,
	0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x22, 0xa8, 0x01, 0x0a, 0x12, 0x42, 0x67, 0x70,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12,
	0x19, 0x0a, 0x08, 0x61, 0x66, 0x69, 0x5f, 0x73, 0x61, 0x66, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x61, 0x66, 0x69, 0x53, 0x61, 0x66, 0x69, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x69,
	0x62, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0a, 0x72, 0x69, 0x62, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x72,
	0x69, 0x62, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x09, 0x72, 0x69, 0x62, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x61,
	0x74, 0x68, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x70, 0x61, 0x74, 0x68, 0x73,
	0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x55, 0x73,
	0x61, 0x67, 0x65, 0x22, 0xd6, 0x03, 0x0a, 0x14, 0x42, 0x67, 0x70, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x1d, 0x0a, 0x0a,
	0x6f, 0x70, 0x65, 0x6e, 0x73, 0x5f, 0x73, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x09, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x53, 0x65, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x6f,
	0x70, 0x65, 0x6e, 0x73, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0d, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x5f, 0x73, 0x65,
	0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x73, 0x53, 0x65, 0x6e, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73,
	0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64,
	0x12, 0x27, 0x0a, 0x0f, 0x6b, 0x65, 0x65, 0x70, 0x61, 0x6c, 0x69, 0x76, 0x65, 0x73, 0x5f, 0x73,
	0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x6b, 0x65, 0x65, 0x70, 0x61,
	0x6c, 0x69, 0x76, 0x65, 0x73, 0x53, 0x65, 0x6e, 0x74, 0x12, 0x2f, 0x0a, 0x13, 0x6b, 0x65, 0x65,
	0x70, 0x61, 0x6c, 0x69, 0x76, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x12, 0x6b, 0x65, 0x65, 0x70, 0x61, 0x6c, 0x69, 0x76,
	0x65, 0x73, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x12, 0x2d, 0x0a, 0x12, 0x6e, 0x6f,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x73, 0x65, 0x6e, 0x74,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53, 0x65, 0x6e, 0x74, 0x12, 0x35, 0x0a, 0x16, 0x6e, 0x6f, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x15, 0x6e, 0x6f, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64,
	0x12, 0x30, 0x0a, 0x14, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73,
	0x68, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x12,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x65, 0x73, 0x53, 0x65,
	0x6e, 0x74, 0x12, 0x38, 0x0a, 0x18, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x72,
	0x65, 0x73, 0x68, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x16, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x65, 0x66, 0x72, 0x65,
	0x73, 0x68, 0x65, 0x73, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x22, 0xfc, 0x01, 0x0a,
	0x0c, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x2b, 0x0a,
	0x06, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x52, 0x6f, 0x75,
	0x74, 0x65, 0x52, 0x06, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x12, 0x3b, 0x0a, 0x0c, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63,
	0x52, 0x6f, 0x75, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x0b, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x41, 0x0a, 0x0e, 0x6e, 0x65, 0x78, 0x74, 0x68,
	0x6f, 0x70, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x4e,
	0x65, 0x78, 0x74, 0x68, 0x6f, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x0d, 0x6e, 0x65, 0x78,
	0x74, 0x68, 0x6f, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x3f, 0x0a, 0x0d, 0x67, 0x6c,
	0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69,
	0x63, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0c, 0x67,
	0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0xf3, 0x01, 0x0a, 0x12,
	0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x46, 0x0a, 0x1f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x64, 0x69, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1d, 0x64, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69,
	0x76, 0x65, 0x44, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x64, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0d, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x70, 0x5f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x70, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64,
	0x12, 0x21, 0x0a, 0x0c, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x70, 0x76, 0x36, 0x46, 0x6f, 0x72, 0x77,
	0x61, 0x72, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x66, 0x69, 0x62, 0x5f, 0x6c, 0x6f, 0x6f, 0x6b, 0x75,
	0x70, 0x5f, 0x72, 0x65, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x10, 0x66, 0x69, 0x62, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65,
	0x73, 0x22, 0xa7, 0x04, 0x0a, 0x0b, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x52, 0x6f, 0x75, 0x74,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x12, 0x1c, 0x0a,
	0x09, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x12, 0x37, 0x0a, 0x17, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72,
	0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x16, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61,
	0x74, 0x69, 0x76, 0x65, 0x44, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x0a, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x09, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2e, 0x0a, 0x05,
	0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x52, 0x6f, 0x75, 0x74, 0x65,
	0x46, 0x6c, 0x61, 0x67, 0x73, 0x52, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x10, 0x0a, 0x03,
	0x6d, 0x74, 0x75, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6d, 0x74, 0x75, 0x12, 0x16,
	0x0a, 0x06, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06,
	0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x72, 0x74, 0x74, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x69, 0x72, 0x74, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x65, 0x61, 0x6c, 0x6d, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x05, 0x72, 0x65, 0x61, 0x6c, 0x6d, 0x12, 0x23, 0x0a, 0x0d, 0x6e, 0x65, 0x78, 0x74,
	0x68, 0x6f, 0x70, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0c, 0x6e, 0x65, 0x78, 0x74, 0x68, 0x6f, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x10, 0x0a,
	0x03, 0x76, 0x72, 0x66, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x76, 0x72, 0x66, 0x12,
	0x16, 0x0a, 0x06, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x11, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x06, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x70, 0x76, 0x36, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x69, 0x70, 0x76, 0x36, 0x22, 0xcb, 0x01, 0x0a, 0x10,
	0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x73,
	0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x06, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x62, 0x6c, 0x61, 0x63,
	0x6b, 0x68, 0x6f, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x62, 0x6c, 0x61,
	0x63, 0x6b, 0x68, 0x6f, 0x6c, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x6f, 0x5f, 0x72, 0x65, 0x73,
	0x6f, 0x6c, 0x76, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x6e, 0x6f, 0x52, 0x65,
	0x73, 0x6f, 0x6c, 0x76, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x6b, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x6b, 0x12, 0x1c, 0x0a,
	0x09, 0x70, 0x65, 0x72, 0x76, 0x61, 0x73, 0x69, 0x76, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x09, 0x70, 0x65, 0x72, 0x76, 0x61, 0x73, 0x69, 0x76, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6f,
	0x66, 0x66, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x6f, 0x66,
	0x66, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x72, 0x61, 0x70, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x04, 0x74, 0x72, 0x61, 0x70, 0x22, 0x9b, 0x01, 0x0a, 0x10, 0x53, 0x74,
	0x61, 0x74, 0x69, 0x63, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x19,
	0x0a, 0x08, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x07, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x06, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x52,
	0x06, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x22, 0xb1, 0x01, 0x0a, 0x12, 0x53, 0x74, 0x61, 0x74,
	0x69, 0x63, 0x4e, 0x65, 0x78, 0x74, 0x68, 0x6f, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x31, 0x0a, 0x08, 0x6e, 0x65, 0x78, 0x74, 0x68, 0x6f, 0x70, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x69, 0x63, 0x4e, 0x65, 0x78, 0x74, 0x68, 0x6f, 0x70, 0x52, 0x08, 0x6e, 0x65, 0x78,
	0x74, 0x68, 0x6f, 0x70, 0x73, 0x12, 0x32, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x69, 0x63, 0x4e, 0x65, 0x78, 0x74, 0x68, 0x6f, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x97, 0x01, 0x0a, 0x0d,
	0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x4e, 0x65, 0x78, 0x74, 0x68, 0x6f, 0x70, 0x12, 0x18, 0x0a,
	0x07, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x1e, 0x0a,
	0x0a, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0a, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x62,
	0x61, 0x63, 0x6b, 0x75, 0x70, 0x22, 0xa8, 0x03, 0x0a, 0x10, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63,
	0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x12, 0x1f, 0x0a,
	0x0b, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0a, 0x69, 0x70, 0x76, 0x34, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x12, 0x1f,
	0x0a, 0x0b, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0a, 0x69, 0x70, 0x76, 0x36, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x12,
	0x23, 0x0a, 0x0d, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x52, 0x6f,
	0x75, 0x74, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x69, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x69,
	0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x12, 0x3e, 0x0a,
	0x0b, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x06, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x69, 0x63, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x73, 0x52, 0x0a, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x4b, 0x0a,
	0x10, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x0e, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x54, 0x0a, 0x13, 0x6e, 0x65,
	0x78, 0x74, 0x68, 0x6f, 0x70, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x4e, 0x65, 0x78, 0x74, 0x68, 0x6f, 0x70, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x11, 0x6e,
	0x65, 0x78, 0x74, 0x68, 0x6f, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x74, 0x61, 0x74, 0x73,
	0x22, 0xc0, 0x01, 0x0a, 0x15, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x69, 0x6e,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0e, 0x69, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x52, 0x6f, 0x75,
	0x74, 0x65, 0x73, 0x22, 0xe8, 0x01, 0x0a, 0x19, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x52, 0x6f,
	0x75, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x73, 0x12, 0x25, 0x0a, 0x0e, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x75, 0x6e, 0x69, 0x63, 0x61,
	0x73, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x62, 0x6c, 0x61, 0x63,
	0x6b, 0x68, 0x6f, 0x6c, 0x65, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0f, 0x62, 0x6c, 0x61, 0x63, 0x6b, 0x68, 0x6f, 0x6c, 0x65, 0x52, 0x6f, 0x75,
	0x74, 0x65, 0x73, 0x12, 0x2d, 0x0a, 0x12, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x63, 0x68, 0x61, 0x62,
	0x6c, 0x65, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x11, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x63, 0x68, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x6f, 0x75, 0x74,
	0x65, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x68, 0x69, 0x62, 0x69, 0x74, 0x5f, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x70, 0x72, 0x6f,
	0x68, 0x69, 0x62, 0x69, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x6c,
	0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0b, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x22, 0xe7,
	0x01, 0x0a, 0x1c, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x4e, 0x65, 0x78, 0x74, 0x68, 0x6f, 0x70,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12,
	0x21, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x61, 0x74, 0x68, 0x5f,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x6d, 0x75,
	0x6c, 0x74, 0x69, 0x70, 0x61, 0x74, 0x68, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x29, 0x0a,
	0x10, 0x72, 0x65, 0x73, 0x69, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x72, 0x65, 0x73, 0x69, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x5f, 0x6e, 0x65, 0x78, 0x74, 0x68, 0x6f, 0x70, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4e, 0x65, 0x78, 0x74, 0x68, 0x6f, 0x70, 0x73, 0x12,
	0x27, 0x0a, 0x0f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x6e, 0x65, 0x78, 0x74, 0x68, 0x6f,
	0x70, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x4e, 0x65, 0x78, 0x74, 0x68, 0x6f, 0x70, 0x73, 0x22, 0x9a, 0x03, 0x0a, 0x0a, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x42, 0x67, 0x70, 0x12, 0x36, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x2e, 0x42, 0x67, 0x70, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x29, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x42, 0x67, 0x70, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x2f, 0x0a, 0x08, 0x6e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x42, 0x67, 0x70, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f,
	0x72, 0x52, 0x08, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x12, 0x2c, 0x0a, 0x07, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x42, 0x67, 0x70, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x52, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x30, 0x0a, 0x09, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x42, 0x67, 0x70, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x4d, 0x61,
	0x70, 0x52, 0x08, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x4d, 0x61, 0x70, 0x12, 0x3f, 0x0a, 0x0e, 0x63,
	0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x42, 0x67, 0x70,
	0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x0d, 0x63,
	0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x0b,
	0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x42, 0x67, 0x70, 0x50, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x0a, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xc5, 0x04, 0x0a, 0x0b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x42, 0x67, 0x70, 0x12, 0x36, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x2e, 0x42, 0x67, 0x70, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a,
	0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x29, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x42, 0x67, 0x70, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x31, 0x0a, 0x09,
	0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x42, 0x67, 0x70, 0x4e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x52, 0x09, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x12,
	0x2e, 0x0a, 0x08, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x42, 0x67, 0x70, 0x4e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x08, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x12,
	0x26, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10,
	0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x42, 0x67, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x35, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x2e, 0x42, 0x67, 0x70, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x73, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x32,
	0x0a, 0x0a, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x70, 0x73, 0x18, 0x09, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x42, 0x67, 0x70, 0x52,
	0x6f, 0x75, 0x74, 0x65, 0x4d, 0x61, 0x70, 0x52, 0x09, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x4d, 0x61,
	0x70, 0x73, 0x12, 0x41, 0x0a, 0x0f, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x2e, 0x42, 0x67, 0x70, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74,
	0x79, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x0e, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79,
	0x4c, 0x69, 0x73, 0x74, 0x73, 0x12, 0x38, 0x0a, 0x0c, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x2e, 0x42, 0x67, 0x70, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x0b, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x69, 0x73, 0x74, 0x73, 0x12,
	0x2c, 0x0a, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x42, 0x67, 0x70, 0x53, 0x75, 0x6d,
	0x6d, 0x61, 0x72, 0x79, 0x52, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x22, 0x99, 0x02,
	0x0a, 0x0a, 0x42, 0x67, 0x70, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x19, 0x0a, 0x08,
	0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x61, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07,
	0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x41, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x70, 0x65,
	0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x50, 0x65, 0x65, 0x72, 0x73, 0x12, 0x2b, 0x0a, 0x11, 0x65, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x69,
	0x73, 0x68, 0x65, 0x64, 0x5f, 0x70, 0x65, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x10, 0x65, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x50, 0x65, 0x65,
	0x72, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x70, 0x72, 0x65, 0x66,
	0x69, 0x78, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0c, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x39,
	0x0a, 0x0c, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x07,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x42, 0x67,
	0x70, 0x50, 0x65, 0x65, 0x72, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x0b, 0x70, 0x65,
	0x65, 0x72, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x22, 0xea, 0x01, 0x0a, 0x0e, 0x42, 0x67,
	0x70, 0x50, 0x65, 0x65, 0x72, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x17, 0x0a, 0x07,
	0x70, 0x65, 0x65, 0x72, 0x5f, 0x69, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70,
	0x65, 0x65, 0x72, 0x49, 0x70, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f,
	0x61, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65,
	0x41, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x70, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x75, 0x70, 0x74, 0x69, 0x6d, 0x65,
	0x12, 0x2b, 0x0a, 0x11, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x70, 0x72, 0x65,
	0x66, 0x69, 0x78, 0x65, 0x73, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x12, 0x23, 0x0a,
	0x0d, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x6e, 0x74, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x53, 0x65,
	0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x70, 0x66, 0x78, 0x5f,
	0x72, 0x63, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x50, 0x66, 0x78, 0x52, 0x63, 0x64, 0x22, 0xe3, 0x02, 0x0a, 0x0d, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x12, 0x39, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x29, 0x0a, 0x05, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63,
	0x52, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x05, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x12, 0x39, 0x0a, 0x0b,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69,
	0x63, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x0a, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x3f, 0x0a, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x68,
	0x6f, 0x70, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x4e, 0x65,
	0x78, 0x74, 0x68, 0x6f, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x0c, 0x6e, 0x65, 0x78, 0x74,
	0x68, 0x6f, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x63, 0x72,
	0x69, 0x74, 0x65, 0x72, 0x69, 0x61, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x43, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x61, 0x22, 0x94, 0x03, 0x0a,
	0x0e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x12,
	0x39, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x69, 0x63, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2c,
	0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x2b, 0x0a, 0x06,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x52, 0x6f, 0x75, 0x74,
	0x65, 0x52, 0x06, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x12, 0x3b, 0x0a, 0x0c, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x52,
	0x6f, 0x75, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x0b, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x41, 0x0a, 0x0e, 0x6e, 0x65, 0x78, 0x74, 0x68, 0x6f,
	0x70, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x4e, 0x65,
	0x78, 0x74, 0x68, 0x6f, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74,
	0x68, 0x6f, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x38, 0x0a, 0x0a, 0x73, 0x74, 0x61,
	0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x53, 0x74, 0x61,
	0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x73, 0x22, 0x86, 0x01, 0x0a, 0x13, 0x46, 0x72, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x69,
	0x73, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69,
	0x73, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x1a,
	0x0a, 0x08, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x08, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x75,
	0x67, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0b, 0x73, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xcf, 0x01, 0x0a,
	0x13, 0x42, 0x67, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x12,
	0x27, 0x0a, 0x0f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x5f, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0d, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12,
	0x28, 0x0a, 0x10, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x70, 0x5f, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x4d, 0x61, 0x70, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0c, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x22, 0x9f,
	0x01, 0x0a, 0x15, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x56, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x56, 0x61,
	0x6c, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x6e, 0x65, 0x78, 0x74, 0x68, 0x6f,
	0x70, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d,
	0x6e, 0x65, 0x78, 0x74, 0x68, 0x6f, 0x70, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x21, 0x0a,
	0x0c, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73,
	0x2a, 0x9e, 0x01, 0x0a, 0x0f, 0x46, 0x72, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x14, 0x46, 0x52, 0x52, 0x5f, 0x50, 0x52, 0x4f, 0x54,
	0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x14,
	0x0a, 0x10, 0x46, 0x52, 0x52, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x42,
	0x47, 0x50, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x46, 0x52, 0x52, 0x5f, 0x50, 0x52, 0x4f, 0x54,
	0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x49, 0x43, 0x10, 0x02, 0x12, 0x15, 0x0a,
	0x11, 0x46, 0x52, 0x52, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x4f, 0x53,
	0x50, 0x46, 0x10, 0x03, 0x12, 0x14, 0x0a, 0x10, 0x46, 0x52, 0x52, 0x5f, 0x50, 0x52, 0x4f, 0x54,
	0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x52, 0x49, 0x50, 0x10, 0x04, 0x12, 0x15, 0x0a, 0x11, 0x46, 0x52,
	0x52, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x49, 0x53, 0x49, 0x53, 0x10,
	0x05, 0x2a, 0xdd, 0x03, 0x0a, 0x10, 0x42, 0x67, 0x70, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x42, 0x47, 0x50, 0x5f, 0x55, 0x4e,
	0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x42, 0x47, 0x50, 0x5f, 0x47,
	0x45, 0x54, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x42,
	0x47, 0x50, 0x5f, 0x53, 0x45, 0x54, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x10, 0x02, 0x12,
	0x11, 0x0a, 0x0d, 0x42, 0x47, 0x50, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45,
	0x10, 0x03, 0x12, 0x14, 0x0a, 0x10, 0x42, 0x47, 0x50, 0x5f, 0x41, 0x44, 0x44, 0x5f, 0x4e, 0x45,
	0x49, 0x47, 0x48, 0x42, 0x4f, 0x52, 0x10, 0x04, 0x12, 0x17, 0x0a, 0x13, 0x42, 0x47, 0x50, 0x5f,
	0x52, 0x45, 0x4d, 0x4f, 0x56, 0x45, 0x5f, 0x4e, 0x45, 0x49, 0x47, 0x48, 0x42, 0x4f, 0x52, 0x10,
	0x05, 0x12, 0x17, 0x0a, 0x13, 0x42, 0x47, 0x50, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f,
	0x4e, 0x45, 0x49, 0x47, 0x48, 0x42, 0x4f, 0x52, 0x10, 0x06, 0x12, 0x16, 0x0a, 0x12, 0x42, 0x47,
	0x50, 0x5f, 0x52, 0x45, 0x53, 0x45, 0x54, 0x5f, 0x4e, 0x45, 0x49, 0x47, 0x48, 0x42, 0x4f, 0x52,
	0x10, 0x07, 0x12, 0x15, 0x0a, 0x11, 0x42, 0x47, 0x50, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x4e, 0x45,
	0x49, 0x47, 0x48, 0x42, 0x4f, 0x52, 0x53, 0x10, 0x08, 0x12, 0x13, 0x0a, 0x0f, 0x42, 0x47, 0x50,
	0x5f, 0x41, 0x44, 0x44, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x10, 0x09, 0x12, 0x16,
	0x0a, 0x12, 0x42, 0x47, 0x50, 0x5f, 0x52, 0x45, 0x4d, 0x4f, 0x56, 0x45, 0x5f, 0x4e, 0x45, 0x54,
	0x57, 0x4f, 0x52, 0x4b, 0x10, 0x0a, 0x12, 0x12, 0x0a, 0x0e, 0x42, 0x47, 0x50, 0x5f, 0x47, 0x45,
	0x54, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x53, 0x10, 0x0b, 0x12, 0x16, 0x0a, 0x12, 0x42, 0x47,
	0x50, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x49, 0x53, 0x54, 0x49, 0x43, 0x53,
	0x10, 0x0c, 0x12, 0x14, 0x0a, 0x10, 0x42, 0x47, 0x50, 0x5f, 0x43, 0x4c, 0x45, 0x41, 0x52, 0x5f,
	0x52, 0x4f, 0x55, 0x54, 0x45, 0x53, 0x10, 0x0d, 0x12, 0x0e, 0x0a, 0x0a, 0x42, 0x47, 0x50, 0x5f,
	0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x0e, 0x12, 0x0f, 0x0a, 0x0b, 0x42, 0x47, 0x50, 0x5f,
	0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x0f, 0x12, 0x17, 0x0a, 0x13, 0x42, 0x47, 0x50,
	0x5f, 0x41, 0x50, 0x50, 0x4c, 0x59, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x5f, 0x4d, 0x41, 0x50,
	0x10, 0x10, 0x12, 0x18, 0x0a, 0x14, 0x42, 0x47, 0x50, 0x5f, 0x52, 0x45, 0x4d, 0x4f, 0x56, 0x45,
	0x5f, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x5f, 0x4d, 0x41, 0x50, 0x10, 0x11, 0x12, 0x15, 0x0a, 0x11,
	0x42, 0x47, 0x50, 0x5f, 0x53, 0x45, 0x54, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x55, 0x4e, 0x49, 0x54,
	0x59, 0x10, 0x12, 0x12, 0x17, 0x0a, 0x13, 0x42, 0x47, 0x50, 0x5f, 0x43, 0x4c, 0x45, 0x41, 0x52,
	0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x55, 0x4e, 0x49, 0x54, 0x59, 0x10, 0x13, 0x12, 0x13, 0x0a, 0x0f,
	0x42, 0x47, 0x50, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x53, 0x55, 0x4d, 0x4d, 0x41, 0x52, 0x59, 0x10,
	0x14, 0x2a, 0x54, 0x0a, 0x11, 0x42, 0x67, 0x70, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x4d, 0x61, 0x70,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x15, 0x0a, 0x11, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x5f,
	0x4d, 0x41, 0x50, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x14, 0x0a,
	0x10, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x5f, 0x4d, 0x41, 0x50, 0x5f, 0x50, 0x45, 0x52, 0x4d, 0x49,
	0x54, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x5f, 0x4d, 0x41, 0x50,
	0x5f, 0x44, 0x45, 0x4e, 0x59, 0x10, 0x02, 0x2a, 0xe1, 0x02, 0x0a, 0x13, 0x53, 0x74, 0x61, 0x74,
	0x69, 0x63, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x12, 0x0a, 0x0e, 0x53, 0x54, 0x41, 0x54, 0x49, 0x43, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57,
	0x4e, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x54, 0x41, 0x54, 0x49, 0x43, 0x5f, 0x47, 0x45,
	0x54, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x53, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x54,
	0x41, 0x54, 0x49, 0x43, 0x5f, 0x41, 0x44, 0x44, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x10, 0x02,
	0x12, 0x17, 0x0a, 0x13, 0x53, 0x54, 0x41, 0x54, 0x49, 0x43, 0x5f, 0x52, 0x45, 0x4d, 0x4f, 0x56,
	0x45, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x10, 0x03, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x54, 0x41,
	0x54, 0x49, 0x43, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x45,
	0x10, 0x04, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x54, 0x41, 0x54, 0x49, 0x43, 0x5f, 0x47, 0x45, 0x54,
	0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x10, 0x05, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x54, 0x41,
	0x54, 0x49, 0x43, 0x5f, 0x53, 0x45, 0x54, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x10, 0x06,
	0x12, 0x1b, 0x0a, 0x17, 0x53, 0x54, 0x41, 0x54, 0x49, 0x43, 0x5f, 0x43, 0x4c, 0x45, 0x41, 0x52,
	0x5f, 0x41, 0x4c, 0x4c, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x53, 0x10, 0x07, 0x12, 0x19, 0x0a,
	0x15, 0x53, 0x54, 0x41, 0x54, 0x49, 0x43, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x49, 0x53, 0x54, 0x49, 0x43, 0x53, 0x10, 0x08, 0x12, 0x18, 0x0a, 0x14, 0x53, 0x54, 0x41, 0x54,
	0x49, 0x43, 0x5f, 0x52, 0x45, 0x4c, 0x4f, 0x41, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47,
	0x10, 0x09, 0x12, 0x1a, 0x0a, 0x16, 0x53, 0x54, 0x41, 0x54, 0x49, 0x43, 0x5f, 0x47, 0x45, 0x54,
	0x5f, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x5f, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x0a, 0x12, 0x1c,
	0x0a, 0x18, 0x53, 0x54, 0x41, 0x54, 0x49, 0x43, 0x5f, 0x46, 0x4c, 0x55, 0x53, 0x48, 0x5f, 0x52,
	0x4f, 0x55, 0x54, 0x45, 0x5f, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x0b, 0x12, 0x1d, 0x0a, 0x19,
	0x53, 0x54, 0x41, 0x54, 0x49, 0x43, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x4e, 0x45, 0x58, 0x54, 0x48,
	0x4f, 0x50, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x53, 0x10, 0x0c, 0x2a, 0x84, 0x02, 0x0a, 0x0f,
	0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x18, 0x0a, 0x14, 0x53, 0x54, 0x41, 0x54, 0x49, 0x43, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x5f,
	0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x53, 0x54, 0x41,
	0x54, 0x49, 0x43, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x5f, 0x55, 0x4e, 0x49, 0x43, 0x41, 0x53,
	0x54, 0x10, 0x01, 0x12, 0x1a, 0x0a, 0x16, 0x53, 0x54, 0x41, 0x54, 0x49, 0x43, 0x5f, 0x52, 0x4f,
	0x55, 0x54, 0x45, 0x5f, 0x42, 0x4c, 0x41, 0x43, 0x4b, 0x48, 0x4f, 0x4c, 0x45, 0x10, 0x02, 0x12,
	0x1c, 0x0a, 0x18, 0x53, 0x54, 0x41, 0x54, 0x49, 0x43, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x5f,
	0x55, 0x4e, 0x52, 0x45, 0x41, 0x43, 0x48, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x03, 0x12, 0x19, 0x0a,
	0x15, 0x53, 0x54, 0x41, 0x54, 0x49, 0x43, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x5f, 0x50, 0x52,
	0x4f, 0x48, 0x49, 0x42, 0x49, 0x54, 0x10, 0x04, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x54, 0x41, 0x54,
	0x49, 0x43, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x5f, 0x4c, 0x4f, 0x43, 0x41, 0x4c, 0x10, 0x05,
	0x12, 0x1a, 0x0a, 0x16, 0x53, 0x54, 0x41, 0x54, 0x49, 0x43, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x45,
	0x5f, 0x42, 0x52, 0x4f, 0x41, 0x44, 0x43, 0x41, 0x53, 0x54, 0x10, 0x06, 0x12, 0x18, 0x0a, 0x14,
	0x53, 0x54, 0x41, 0x54, 0x49, 0x43, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x5f, 0x41, 0x4e, 0x59,
	0x43, 0x41, 0x53, 0x54, 0x10, 0x07, 0x12, 0x1a, 0x0a, 0x16, 0x53, 0x54, 0x41, 0x54, 0x49, 0x43,
	0x5f, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x5f, 0x4d, 0x55, 0x4c, 0x54, 0x49, 0x43, 0x41, 0x53, 0x54,
	0x10, 0x08, 0x2a, 0x6d, 0x0a, 0x16, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x4e, 0x65, 0x78, 0x74,
	0x68, 0x6f, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x15,
	0x4e, 0x45, 0x58, 0x54, 0x48, 0x4f, 0x50, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x55, 0x4e,
	0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x1b, 0x0a, 0x17, 0x4e, 0x45, 0x58, 0x54, 0x48,
	0x4f, 0x50, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x4d, 0x55, 0x4c, 0x54, 0x49, 0x50, 0x41,
	0x54, 0x48, 0x10, 0x01, 0x12, 0x1b, 0x0a, 0x17, 0x4e, 0x45, 0x58, 0x54, 0x48, 0x4f, 0x50, 0x5f,
	0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x52, 0x45, 0x53, 0x49, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x10,
	0x02, 0x42, 0x2d, 0x5a, 0x2b, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x45, 0x6c, 0x63, 0x68, 0x69, 0x54, 0x68, 0x65, 0x47, 0x72, 0x65, 0x61, 0x74, 0x2f, 0x65, 0x6c,
	0x63, 0x68, 0x69, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_client_frr_proto_rawDescOnce sync.Once
	file_client_frr_proto_rawDescData = file_client_frr_proto_rawDesc
)

func file_client_frr_proto_rawDescGZIP() []byte {
	file_client_frr_proto_rawDescOnce.Do(func() {
		file_client_frr_proto_rawDescData = protoimpl.X.CompressGZIP(file_client_frr_proto_rawDescData)
	})
	return file_client_frr_proto_rawDescData
}

var file_client_frr_proto_enumTypes = make([]protoimpl.EnumInfo, 6)
var file_client_frr_proto_msgTypes = make([]protoimpl.MessageInfo, 54)
var file_client_frr_proto_goTypes = []any{
	(FrrProtocolType)(0),                 // 0: client.FrrProtocolType
	(BgpOperationType)(0),                // 1: client.BgpOperationType
	(BgpRouteMapAction)(0),               // 2: client.BgpRouteMapAction
	(StaticOperationType)(0),             // 3: client.StaticOperationType
	(StaticRouteType)(0),                 // 4: client.StaticRouteType
	(StaticNexthopGroupType)(0),          // 5: client.StaticNexthopGroupType
	(*BgpConfig)(nil),                    // 6: client.BgpConfig
	(*BgpGlobalConfig)(nil),              // 7: client.BgpGlobalConfig
	(*BgpIpv6Config)(nil),                // 8: client.BgpIpv6Config
	(*BgpNeighbor)(nil),                  // 9: client.BgpNeighbor
	(*BgpNeighborTimers)(nil),            // 10: client.BgpNeighborTimers
	(*BgpNeighborCapabilities)(nil),      // 11: client.BgpNeighborCapabilities
	(*BgpNeighborRouteMaps)(nil),         // 12: client.BgpNeighborRouteMaps
	(*BgpNeighborPrefixLists)(nil),       // 13: client.BgpNeighborPrefixLists
	(*BgpNeighborFilterLists)(nil),       // 14: client.BgpNeighborFilterLists
	(*BgpNeighborDistributeLists)(nil),   // 15: client.BgpNeighborDistributeLists
	(*BgpNetwork)(nil),                   // 16: client.BgpNetwork
	(*BgpRouteMap)(nil),                  // 17: client.BgpRouteMap
	(*BgpRouteMapMatch)(nil),             // 18: client.BgpRouteMapMatch
	(*BgpRouteMapSet)(nil),               // 19: client.BgpRouteMapSet
	(*BgpCommunityList)(nil),             // 20: client.BgpCommunityList
	(*BgpPrefixList)(nil),                // 21: client.BgpPrefixList
	(*BgpConfederation)(nil),             // 22: client.BgpConfederation
	(*BgpRouteReflector)(nil),            // 23: client.BgpRouteReflector
	(*BgpGracefulRestart)(nil),           // 24: client.BgpGracefulRestart
	(*BgpAggregateAddress)(nil),          // 25: client.BgpAggregateAddress
	(*BgpDefaultOriginate)(nil),          // 26: client.BgpDefaultOriginate
	(*BgpState)(nil),                     // 27: client.BgpState
	(*BgpGlobalState)(nil),               // 28: client.BgpGlobalState
	(*BgpTableState)(nil),                // 29: client.BgpTableState
	(*BgpMemoryUsage)(nil),               // 30: client.BgpMemoryUsage
	(*BgpNeighborState)(nil),             // 31: client.BgpNeighborState
	(*BgpNeighborStatistics)(nil),        // 32: client.BgpNeighborStatistics
	(*BgpNeighborCapabilitiesState)(nil), // 33: client.BgpNeighborCapabilitiesState
	(*BgpNeighborTimerState)(nil),        // 34: client.BgpNeighborTimerState
	(*BgpNeighborConnectionState)(nil),   // 35: client.BgpNeighborConnectionState
	(*BgpStatistics)(nil),                // 36: client.BgpStatistics
	(*BgpGlobalStatistics)(nil),          // 37: client.BgpGlobalStatistics
	(*BgpTableStatistics)(nil),           // 38: client.BgpTableStatistics
	(*BgpMessageStatistics)(nil),         // 39: client.BgpMessageStatistics
	(*StaticConfig)(nil),                 // 40: client.StaticConfig
	(*StaticGlobalConfig)(nil),           // 41: client.StaticGlobalConfig
	(*StaticRoute)(nil),                  // 42: client.StaticRoute
	(*StaticRouteFlags)(nil),             // 43: client.StaticRouteFlags
	(*StaticRouteTable)(nil),             // 44: client.StaticRouteTable
	(*StaticNexthopGroup)(nil),           // 45: client.StaticNexthopGroup
	(*StaticNexthop)(nil),                // 46: client.StaticNexthop
	(*StaticStatistics)(nil),             // 47: client.StaticStatistics
	(*StaticTableStatistics)(nil),        // 48: client.StaticTableStatistics
	(*StaticRouteTypeStatistics)(nil),    // 49: client.StaticRouteTypeStatistics
	(*StaticNexthopGroupStatistics)(nil), // 50: client.StaticNexthopGroupStatistics
	(*RequestBgp)(nil),                   // 51: client.RequestBgp
	(*ResponseBgp)(nil),                  // 52: client.ResponseBgp
	(*BgpSummary)(nil),                   // 53: client.BgpSummary
	(*BgpPeerSummary)(nil),               // 54: client.BgpPeerSummary
	(*RequestStatic)(nil),                // 55: client.RequestStatic
	(*ResponseStatic)(nil),               // 56: client.ResponseStatic
	(*FrrConfigValidation)(nil),          // 57: client.FrrConfigValidation
	(*BgpConfigValidation)(nil),          // 58: client.BgpConfigValidation
	(*StaticRouteValidation)(nil),        // 59: client.StaticRouteValidation
}
var file_client_frr_proto_depIdxs = []int32{
	9,  // 0: client.BgpConfig.neighbors:type_name -> client.BgpNeighbor
	16, // 1: client.BgpConfig.networks:type_name -> client.BgpNetwork
	7,  // 2: client.BgpConfig.global_config:type_name -> client.BgpGlobalConfig
	8,  // 3: client.BgpConfig.ipv6_config:type_name -> client.BgpIpv6Config
	17, // 4: client.BgpConfig.route_maps:type_name -> client.BgpRouteMap
	20, // 5: client.BgpConfig.community_lists:type_name -> client.BgpCommunityList
	21, // 6: client.BgpConfig.prefix_lists:type_name -> client.BgpPrefixList
	22, // 7: client.BgpConfig.confederation:type_name -> client.BgpConfederation
	23, // 8: client.BgpConfig.route_reflector:type_name -> client.BgpRouteReflector
	24, // 9: client.BgpConfig.graceful_restart:type_name -> client.BgpGracefulRestart
	25, // 10: client.BgpConfig.aggregate_addresses:type_name -> client.BgpAggregateAddress
	26, // 11: client.BgpConfig.default_originate:type_name -> client.BgpDefaultOriginate
	9,  // 12: client.BgpIpv6Config.ipv6_neighbors:type_name -> client.BgpNeighbor
	16, // 13: client.BgpIpv6Config.ipv6_networks:type_name -> client.BgpNetwork
	10, // 14: client.BgpNeighbor.timers:type_name -> client.BgpNeighborTimers
	11, // 15: client.BgpNeighbor.capabilities:type_name -> client.BgpNeighborCapabilities
	12, // 16: client.BgpNeighbor.route_maps:type_name -> client.BgpNeighborRouteMaps
	13, // 17: client.BgpNeighbor.prefix_lists:type_name -> client.BgpNeighborPrefixLists
	14, // 18: client.BgpNeighbor.filter_lists:type_name -> client.BgpNeighborFilterLists
	15, // 19: client.BgpNeighbor.distribute_lists:type_name -> client.BgpNeighborDistributeLists
	2,  // 20: client.BgpRouteMap.action:type_name -> client.BgpRouteMapAction
	18, // 21: client.BgpRouteMap.match_conditions:type_name -> client.BgpRouteMapMatch
	19, // 22: client.BgpRouteMap.set_actions:type_name -> client.BgpRouteMapSet
	2,  // 23: client.BgpCommunityList.action:type_name -> client.BgpRouteMapAction
	2,  // 24: client.BgpPrefixList.action:type_name -> client.BgpRouteMapAction
	31, // 25: client.BgpState.neighbor_states:type_name -> client.BgpNeighborState
	28, // 26: client.BgpState.global_state:type_name -> client.BgpGlobalState
	29, // 27: client.BgpState.table_states:type_name -> client.BgpTableState
	30, // 28: client.BgpState.memory_usage:type_name -> client.BgpMemoryUsage
	32, // 29: client.BgpNeighborState.statistics:type_name -> client.BgpNeighborStatistics
	33, // 30: client.BgpNeighborState.capabilities_state:type_name -> client.BgpNeighborCapabilitiesState
	34, // 31: client.BgpNeighborState.timer_state:type_name -> client.BgpNeighborTimerState
	35, // 32: client.BgpNeighborState.connection_state:type_name -> client.BgpNeighborConnectionState
	37, // 33: client.BgpStatistics.global_stats:type_name -> client.BgpGlobalStatistics
	38, // 34: client.BgpStatistics.table_stats:type_name -> client.BgpTableStatistics
	39, // 35: client.BgpStatistics.message_stats:type_name -> client.BgpMessageStatistics
	42, // 36: client.StaticConfig.routes:type_name -> client.StaticRoute
	44, // 37: client.StaticConfig.route_tables:type_name -> client.StaticRouteTable
	45, // 38: client.StaticConfig.nexthop_groups:type_name -> client.StaticNexthopGroup
	41, // 39: client.StaticConfig.global_config:type_name -> client.StaticGlobalConfig
	4,  // 40: client.StaticRoute.route_type:type_name -> client.StaticRouteType
	43, // 41: client.StaticRoute.flags:type_name -> client.StaticRouteFlags
	42, // 42: client.StaticRouteTable.routes:type_name -> client.StaticRoute
	46, // 43: client.StaticNexthopGroup.nexthops:type_name -> client.StaticNexthop
	5,  // 44: client.StaticNexthopGroup.type:type_name -> client.StaticNexthopGroupType
	48, // 45: client.StaticStatistics.table_stats:type_name -> client.StaticTableStatistics
	49, // 46: client.StaticStatistics.route_type_stats:type_name -> client.StaticRouteTypeStatistics
	50, // 47: client.StaticStatistics.nexthop_group_stats:type_name -> client.StaticNexthopGroupStatistics
	1,  // 48: client.RequestBgp.operation:type_name -> client.BgpOperationType
	6,  // 49: client.RequestBgp.config:type_name -> client.BgpConfig
	9,  // 50: client.RequestBgp.neighbor:type_name -> client.BgpNeighbor
	16, // 51: client.RequestBgp.network:type_name -> client.BgpNetwork
	17, // 52: client.RequestBgp.route_map:type_name -> client.BgpRouteMap
	20, // 53: client.RequestBgp.community_list:type_name -> client.BgpCommunityList
	21, // 54: client.RequestBgp.prefix_list:type_name -> client.BgpPrefixList
	1,  // 55: client.ResponseBgp.operation:type_name -> client.BgpOperationType
	6,  // 56: client.ResponseBgp.config:type_name -> client.BgpConfig
	9,  // 57: client.ResponseBgp.neighbors:type_name -> client.BgpNeighbor
	16, // 58: client.ResponseBgp.networks:type_name -> client.BgpNetwork
	27, // 59: client.ResponseBgp.state:type_name -> client.BgpState
	36, // 60: client.ResponseBgp.statistics:type_name -> client.BgpStatistics
	17, // 61: client.ResponseBgp.route_maps:type_name -> client.BgpRouteMap
	20, // 62: client.ResponseBgp.community_lists:type_name -> client.BgpCommunityList
	21, // 63: client.ResponseBgp.prefix_lists:type_name -> client.BgpPrefixList
	53, // 64: client.ResponseBgp.summary:type_name -> client.BgpSummary
	54, // 65: client.BgpSummary.peer_summary:type_name -> client.BgpPeerSummary
	3,  // 66: client.RequestStatic.operation:type_name -> client.StaticOperationType
	40, // 67: client.RequestStatic.config:type_name -> client.StaticConfig
	42, // 68: client.RequestStatic.route:type_name -> client.StaticRoute
	44, // 69: client.RequestStatic.route_table:type_name -> client.StaticRouteTable
	45, // 70: client.RequestStatic.nexthop_group:type_name -> client.StaticNexthopGroup
	3,  // 71: client.ResponseStatic.operation:type_name -> client.StaticOperationType
	40, // 72: client.ResponseStatic.config:type_name -> client.StaticConfig
	42, // 73: client.ResponseStatic.routes:type_name -> client.StaticRoute
	44, // 74: client.ResponseStatic.route_tables:type_name -> client.StaticRouteTable
	45, // 75: client.ResponseStatic.nexthop_groups:type_name -> client.StaticNexthopGroup
	47, // 76: client.ResponseStatic.statistics:type_name -> client.StaticStatistics
	77, // [77:77] is the sub-list for method output_type
	77, // [77:77] is the sub-list for method input_type
	77, // [77:77] is the sub-list for extension type_name
	77, // [77:77] is the sub-list for extension extendee
	0,  // [0:77] is the sub-list for field type_name
}

func init() { file_client_frr_proto_init() }
func file_client_frr_proto_init() {
	if File_client_frr_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_client_frr_proto_rawDesc,
			NumEnums:      6,
			NumMessages:   54,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_client_frr_proto_goTypes,
		DependencyIndexes: file_client_frr_proto_depIdxs,
		EnumInfos:         file_client_frr_proto_enumTypes,
		MessageInfos:      file_client_frr_proto_msgTypes,
	}.Build()
	File_client_frr_proto = out.File
	file_client_frr_proto_rawDesc = nil
	file_client_frr_proto_goTypes = nil
	file_client_frr_proto_depIdxs = nil
}
