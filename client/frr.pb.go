// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.1
// 	protoc        v5.28.2
// source: client/frr.proto

package client

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type FrrProtocolType int32

const (
	FrrProtocolType_FRR_PROTOCOL_UNKNOWN FrrProtocolType = 0
	FrrProtocolType_FRR_PROTOCOL_BGP     FrrProtocolType = 1
)

// Enum value maps for FrrProtocolType.
var (
	FrrProtocolType_name = map[int32]string{
		0: "FRR_PROTOCOL_UNKNOWN",
		1: "FRR_PROTOCOL_BGP",
	}
	FrrProtocolType_value = map[string]int32{
		"FRR_PROTOCOL_UNKNOWN": 0,
		"FRR_PROTOCOL_BGP":     1,
	}
)

func (x FrrProtocolType) Enum() *FrrProtocolType {
	p := new(FrrProtocolType)
	*p = x
	return p
}

func (x FrrProtocolType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FrrProtocolType) Descriptor() protoreflect.EnumDescriptor {
	return file_client_frr_proto_enumTypes[0].Descriptor()
}

func (FrrProtocolType) Type() protoreflect.EnumType {
	return &file_client_frr_proto_enumTypes[0]
}

func (x FrrProtocolType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FrrProtocolType.Descriptor instead.
func (FrrProtocolType) EnumDescriptor() ([]byte, []int) {
	return file_client_frr_proto_rawDescGZIP(), []int{0}
}

type BgpOperationType int32

const (
	BgpOperationType_BGP_UNKNOWN               BgpOperationType = 0
	BgpOperationType_BGP_GET_CONFIG            BgpOperationType = 1
	BgpOperationType_BGP_SET_CONFIG            BgpOperationType = 2
	BgpOperationType_BGP_ADD_NEIGHBOR          BgpOperationType = 3
	BgpOperationType_BGP_UPDATE_NEIGHBOR       BgpOperationType = 4
	BgpOperationType_BGP_LIST_NEIGHBORS        BgpOperationType = 5
	BgpOperationType_BGP_GET_NEIGHBOR          BgpOperationType = 6
	BgpOperationType_BGP_REMOVE_NEIGHBOR       BgpOperationType = 7
	BgpOperationType_BGP_GET_POLICY_CONFIG     BgpOperationType = 8
	BgpOperationType_BGP_APPLY_PREFIX_LIST     BgpOperationType = 9
	BgpOperationType_BGP_REMOVE_PREFIX_LIST    BgpOperationType = 10
	BgpOperationType_BGP_APPLY_COMMUNITY_LIST  BgpOperationType = 11
	BgpOperationType_BGP_REMOVE_COMMUNITY_LIST BgpOperationType = 12
	BgpOperationType_BGP_APPLY_ROUTE_MAP       BgpOperationType = 13
	BgpOperationType_BGP_REMOVE_ROUTE_MAP      BgpOperationType = 14
	BgpOperationType_BGP_SHOW_ROUTES           BgpOperationType = 15
	BgpOperationType_BGP_GET_STATE             BgpOperationType = 16
)

// Enum value maps for BgpOperationType.
var (
	BgpOperationType_name = map[int32]string{
		0:  "BGP_UNKNOWN",
		1:  "BGP_GET_CONFIG",
		2:  "BGP_SET_CONFIG",
		3:  "BGP_ADD_NEIGHBOR",
		4:  "BGP_UPDATE_NEIGHBOR",
		5:  "BGP_LIST_NEIGHBORS",
		6:  "BGP_GET_NEIGHBOR",
		7:  "BGP_REMOVE_NEIGHBOR",
		8:  "BGP_GET_POLICY_CONFIG",
		9:  "BGP_APPLY_PREFIX_LIST",
		10: "BGP_REMOVE_PREFIX_LIST",
		11: "BGP_APPLY_COMMUNITY_LIST",
		12: "BGP_REMOVE_COMMUNITY_LIST",
		13: "BGP_APPLY_ROUTE_MAP",
		14: "BGP_REMOVE_ROUTE_MAP",
		15: "BGP_SHOW_ROUTES",
		16: "BGP_GET_STATE",
	}
	BgpOperationType_value = map[string]int32{
		"BGP_UNKNOWN":               0,
		"BGP_GET_CONFIG":            1,
		"BGP_SET_CONFIG":            2,
		"BGP_ADD_NEIGHBOR":          3,
		"BGP_UPDATE_NEIGHBOR":       4,
		"BGP_LIST_NEIGHBORS":        5,
		"BGP_GET_NEIGHBOR":          6,
		"BGP_REMOVE_NEIGHBOR":       7,
		"BGP_GET_POLICY_CONFIG":     8,
		"BGP_APPLY_PREFIX_LIST":     9,
		"BGP_REMOVE_PREFIX_LIST":    10,
		"BGP_APPLY_COMMUNITY_LIST":  11,
		"BGP_REMOVE_COMMUNITY_LIST": 12,
		"BGP_APPLY_ROUTE_MAP":       13,
		"BGP_REMOVE_ROUTE_MAP":      14,
		"BGP_SHOW_ROUTES":           15,
		"BGP_GET_STATE":             16,
	}
)

func (x BgpOperationType) Enum() *BgpOperationType {
	p := new(BgpOperationType)
	*p = x
	return p
}

func (x BgpOperationType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BgpOperationType) Descriptor() protoreflect.EnumDescriptor {
	return file_client_frr_proto_enumTypes[1].Descriptor()
}

func (BgpOperationType) Type() protoreflect.EnumType {
	return &file_client_frr_proto_enumTypes[1]
}

func (x BgpOperationType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BgpOperationType.Descriptor instead.
func (BgpOperationType) EnumDescriptor() ([]byte, []int) {
	return file_client_frr_proto_rawDescGZIP(), []int{1}
}

type BgpRouteMapAction int32

const (
	BgpRouteMapAction_ROUTE_MAP_UNKNOWN BgpRouteMapAction = 0
	BgpRouteMapAction_ROUTE_MAP_PERMIT  BgpRouteMapAction = 1
	BgpRouteMapAction_ROUTE_MAP_DENY    BgpRouteMapAction = 2
)

// Enum value maps for BgpRouteMapAction.
var (
	BgpRouteMapAction_name = map[int32]string{
		0: "ROUTE_MAP_UNKNOWN",
		1: "ROUTE_MAP_PERMIT",
		2: "ROUTE_MAP_DENY",
	}
	BgpRouteMapAction_value = map[string]int32{
		"ROUTE_MAP_UNKNOWN": 0,
		"ROUTE_MAP_PERMIT":  1,
		"ROUTE_MAP_DENY":    2,
	}
)

func (x BgpRouteMapAction) Enum() *BgpRouteMapAction {
	p := new(BgpRouteMapAction)
	*p = x
	return p
}

func (x BgpRouteMapAction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BgpRouteMapAction) Descriptor() protoreflect.EnumDescriptor {
	return file_client_frr_proto_enumTypes[2].Descriptor()
}

func (BgpRouteMapAction) Type() protoreflect.EnumType {
	return &file_client_frr_proto_enumTypes[2]
}

func (x BgpRouteMapAction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BgpRouteMapAction.Descriptor instead.
func (BgpRouteMapAction) EnumDescriptor() ([]byte, []int) {
	return file_client_frr_proto_rawDescGZIP(), []int{2}
}

type RequestBgp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Operation     BgpOperationType  `protobuf:"varint,1,opt,name=operation,proto3,enum=client.BgpOperationType" json:"operation,omitempty"`
	Config        *BgpConfig        `protobuf:"bytes,2,opt,name=config,proto3" json:"config,omitempty"`
	Neighbor      *BgpNeighbor      `protobuf:"bytes,3,opt,name=neighbor,proto3" json:"neighbor,omitempty"`
	PeerIp        string            `protobuf:"bytes,4,opt,name=peer_ip,json=peerIp,proto3" json:"peer_ip,omitempty"`
	RouteMap      *BgpRouteMap      `protobuf:"bytes,5,opt,name=route_map,json=routeMap,proto3" json:"route_map,omitempty"`
	CommunityList *BgpCommunityList `protobuf:"bytes,6,opt,name=community_list,json=communityList,proto3" json:"community_list,omitempty"`
	PrefixList    *BgpPrefixList    `protobuf:"bytes,7,opt,name=prefix_list,json=prefixList,proto3" json:"prefix_list,omitempty"`
	AsNumber      uint32            `protobuf:"varint,8,opt,name=as_number,json=asNumber,proto3" json:"as_number,omitempty"`
	LocalAs       uint32            `protobuf:"varint,9,opt,name=local_as,json=localAs,proto3" json:"local_as,omitempty"`
	RemoteAs      uint32            `protobuf:"varint,10,opt,name=remote_as,json=remoteAs,proto3" json:"remote_as,omitempty"`
	Clear         *ClearBgp         `protobuf:"bytes,11,opt,name=clear,proto3" json:"clear,omitempty"`
}

func (x *RequestBgp) Reset() {
	*x = RequestBgp{}
	mi := &file_client_frr_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RequestBgp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestBgp) ProtoMessage() {}

func (x *RequestBgp) ProtoReflect() protoreflect.Message {
	mi := &file_client_frr_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestBgp.ProtoReflect.Descriptor instead.
func (*RequestBgp) Descriptor() ([]byte, []int) {
	return file_client_frr_proto_rawDescGZIP(), []int{0}
}

func (x *RequestBgp) GetOperation() BgpOperationType {
	if x != nil {
		return x.Operation
	}
	return BgpOperationType_BGP_UNKNOWN
}

func (x *RequestBgp) GetConfig() *BgpConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *RequestBgp) GetNeighbor() *BgpNeighbor {
	if x != nil {
		return x.Neighbor
	}
	return nil
}

func (x *RequestBgp) GetPeerIp() string {
	if x != nil {
		return x.PeerIp
	}
	return ""
}

func (x *RequestBgp) GetRouteMap() *BgpRouteMap {
	if x != nil {
		return x.RouteMap
	}
	return nil
}

func (x *RequestBgp) GetCommunityList() *BgpCommunityList {
	if x != nil {
		return x.CommunityList
	}
	return nil
}

func (x *RequestBgp) GetPrefixList() *BgpPrefixList {
	if x != nil {
		return x.PrefixList
	}
	return nil
}

func (x *RequestBgp) GetAsNumber() uint32 {
	if x != nil {
		return x.AsNumber
	}
	return 0
}

func (x *RequestBgp) GetLocalAs() uint32 {
	if x != nil {
		return x.LocalAs
	}
	return 0
}

func (x *RequestBgp) GetRemoteAs() uint32 {
	if x != nil {
		return x.RemoteAs
	}
	return 0
}

func (x *RequestBgp) GetClear() *ClearBgp {
	if x != nil {
		return x.Clear
	}
	return nil
}

type ResponseBgp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Operation          BgpOperationType    `protobuf:"varint,1,opt,name=operation,proto3,enum=client.BgpOperationType" json:"operation,omitempty"`
	Success            bool                `protobuf:"varint,2,opt,name=success,proto3" json:"success,omitempty"`
	Message            string              `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	Config             *BgpConfig          `protobuf:"bytes,4,opt,name=config,proto3" json:"config,omitempty"`
	Summary            *Ipv4UnicastSummary `protobuf:"bytes,5,opt,name=summary,proto3" json:"summary,omitempty"`
	ShowNeighbors      *ShowBgpNeighbors   `protobuf:"bytes,6,opt,name=show_neighbors,json=showNeighbors,proto3" json:"show_neighbors,omitempty"`
	Neighbor           *BgpNeighbor        `protobuf:"bytes,7,opt,name=neighbor,proto3" json:"neighbor,omitempty"`
	PolicyConfig       *BgpPolicyConfig    `protobuf:"bytes,8,opt,name=policy_config,json=policyConfig,proto3" json:"policy_config,omitempty"`
	Routes             *Routes             `protobuf:"bytes,9,opt,name=routes,proto3" json:"routes,omitempty"`
	ValidationErrors   []string            `protobuf:"bytes,10,rep,name=validation_errors,json=validationErrors,proto3" json:"validation_errors,omitempty"`
	ValidationWarnings []string            `protobuf:"bytes,11,rep,name=validation_warnings,json=validationWarnings,proto3" json:"validation_warnings,omitempty"`
}

func (x *ResponseBgp) Reset() {
	*x = ResponseBgp{}
	mi := &file_client_frr_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResponseBgp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseBgp) ProtoMessage() {}

func (x *ResponseBgp) ProtoReflect() protoreflect.Message {
	mi := &file_client_frr_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseBgp.ProtoReflect.Descriptor instead.
func (*ResponseBgp) Descriptor() ([]byte, []int) {
	return file_client_frr_proto_rawDescGZIP(), []int{1}
}

func (x *ResponseBgp) GetOperation() BgpOperationType {
	if x != nil {
		return x.Operation
	}
	return BgpOperationType_BGP_UNKNOWN
}

func (x *ResponseBgp) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *ResponseBgp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ResponseBgp) GetConfig() *BgpConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *ResponseBgp) GetSummary() *Ipv4UnicastSummary {
	if x != nil {
		return x.Summary
	}
	return nil
}

func (x *ResponseBgp) GetShowNeighbors() *ShowBgpNeighbors {
	if x != nil {
		return x.ShowNeighbors
	}
	return nil
}

func (x *ResponseBgp) GetNeighbor() *BgpNeighbor {
	if x != nil {
		return x.Neighbor
	}
	return nil
}

func (x *ResponseBgp) GetPolicyConfig() *BgpPolicyConfig {
	if x != nil {
		return x.PolicyConfig
	}
	return nil
}

func (x *ResponseBgp) GetRoutes() *Routes {
	if x != nil {
		return x.Routes
	}
	return nil
}

func (x *ResponseBgp) GetValidationErrors() []string {
	if x != nil {
		return x.ValidationErrors
	}
	return nil
}

func (x *ResponseBgp) GetValidationWarnings() []string {
	if x != nil {
		return x.ValidationWarnings
	}
	return nil
}

type BgpConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AutonomousSystem       uint32              `protobuf:"varint,1,opt,name=autonomous_system,json=autonomousSystem,proto3" json:"autonomous_system,omitempty"`
	RouterId               string              `protobuf:"bytes,2,opt,name=router_id,json=routerId,proto3" json:"router_id,omitempty"`
	Neighbors              []*BgpNeighbor      `protobuf:"bytes,3,rep,name=neighbors,proto3" json:"neighbors,omitempty"`
	KeepaliveTime          uint32              `protobuf:"varint,5,opt,name=keepalive_time,json=keepaliveTime,proto3" json:"keepalive_time,omitempty"`
	HoldTime               uint32              `protobuf:"varint,6,opt,name=hold_time,json=holdTime,proto3" json:"hold_time,omitempty"`
	RedistributeConnected  bool                `protobuf:"varint,7,opt,name=redistribute_connected,json=redistributeConnected,proto3" json:"redistribute_connected,omitempty"`
	RedistributeStatic     bool                `protobuf:"varint,8,opt,name=redistribute_static,json=redistributeStatic,proto3" json:"redistribute_static,omitempty"`
	RedistributeKernel     bool                `protobuf:"varint,9,opt,name=redistribute_kernel,json=redistributeKernel,proto3" json:"redistribute_kernel,omitempty"`
	RedistributeLocal      bool                `protobuf:"varint,10,opt,name=redistribute_local,json=redistributeLocal,proto3" json:"redistribute_local,omitempty"`
	RouteMaps              []*BgpRouteMap      `protobuf:"bytes,11,rep,name=route_maps,json=routeMaps,proto3" json:"route_maps,omitempty"`
	CommunityLists         []*BgpCommunityList `protobuf:"bytes,12,rep,name=community_lists,json=communityLists,proto3" json:"community_lists,omitempty"`
	PrefixLists            []*BgpPrefixList    `protobuf:"bytes,13,rep,name=prefix_lists,json=prefixLists,proto3" json:"prefix_lists,omitempty"`
	MaximumPaths           uint32              `protobuf:"varint,14,opt,name=maximum_paths,json=maximumPaths,proto3" json:"maximum_paths,omitempty"`
	AdministrativeDistance string              `protobuf:"bytes,15,opt,name=administrative_distance,json=administrativeDistance,proto3" json:"administrative_distance,omitempty"`
	DeterministicMed       bool                `protobuf:"varint,16,opt,name=deterministic_med,json=deterministicMed,proto3" json:"deterministic_med,omitempty"`
	AlwaysCompareMed       bool                `protobuf:"varint,17,opt,name=always_compare_med,json=alwaysCompareMed,proto3" json:"always_compare_med,omitempty"`
	LogNeighborChanges     bool                `protobuf:"varint,18,opt,name=log_neighbor_changes,json=logNeighborChanges,proto3" json:"log_neighbor_changes,omitempty"`
}

func (x *BgpConfig) Reset() {
	*x = BgpConfig{}
	mi := &file_client_frr_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BgpConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpConfig) ProtoMessage() {}

func (x *BgpConfig) ProtoReflect() protoreflect.Message {
	mi := &file_client_frr_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpConfig.ProtoReflect.Descriptor instead.
func (*BgpConfig) Descriptor() ([]byte, []int) {
	return file_client_frr_proto_rawDescGZIP(), []int{2}
}

func (x *BgpConfig) GetAutonomousSystem() uint32 {
	if x != nil {
		return x.AutonomousSystem
	}
	return 0
}

func (x *BgpConfig) GetRouterId() string {
	if x != nil {
		return x.RouterId
	}
	return ""
}

func (x *BgpConfig) GetNeighbors() []*BgpNeighbor {
	if x != nil {
		return x.Neighbors
	}
	return nil
}

func (x *BgpConfig) GetKeepaliveTime() uint32 {
	if x != nil {
		return x.KeepaliveTime
	}
	return 0
}

func (x *BgpConfig) GetHoldTime() uint32 {
	if x != nil {
		return x.HoldTime
	}
	return 0
}

func (x *BgpConfig) GetRedistributeConnected() bool {
	if x != nil {
		return x.RedistributeConnected
	}
	return false
}

func (x *BgpConfig) GetRedistributeStatic() bool {
	if x != nil {
		return x.RedistributeStatic
	}
	return false
}

func (x *BgpConfig) GetRedistributeKernel() bool {
	if x != nil {
		return x.RedistributeKernel
	}
	return false
}

func (x *BgpConfig) GetRedistributeLocal() bool {
	if x != nil {
		return x.RedistributeLocal
	}
	return false
}

func (x *BgpConfig) GetRouteMaps() []*BgpRouteMap {
	if x != nil {
		return x.RouteMaps
	}
	return nil
}

func (x *BgpConfig) GetCommunityLists() []*BgpCommunityList {
	if x != nil {
		return x.CommunityLists
	}
	return nil
}

func (x *BgpConfig) GetPrefixLists() []*BgpPrefixList {
	if x != nil {
		return x.PrefixLists
	}
	return nil
}

func (x *BgpConfig) GetMaximumPaths() uint32 {
	if x != nil {
		return x.MaximumPaths
	}
	return 0
}

func (x *BgpConfig) GetAdministrativeDistance() string {
	if x != nil {
		return x.AdministrativeDistance
	}
	return ""
}

func (x *BgpConfig) GetDeterministicMed() bool {
	if x != nil {
		return x.DeterministicMed
	}
	return false
}

func (x *BgpConfig) GetAlwaysCompareMed() bool {
	if x != nil {
		return x.AlwaysCompareMed
	}
	return false
}

func (x *BgpConfig) GetLogNeighborChanges() bool {
	if x != nil {
		return x.LogNeighborChanges
	}
	return false
}

type Ipv4UnicastSummary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RouterId        string                  `protobuf:"bytes,1,opt,name=routerId,proto3" json:"routerId,omitempty"`
	AsNumber        uint32                  `protobuf:"varint,2,opt,name=asNumber,proto3" json:"asNumber,omitempty"`
	VrfId           uint32                  `protobuf:"varint,3,opt,name=vrfId,proto3" json:"vrfId,omitempty"`
	VrfName         string                  `protobuf:"bytes,4,opt,name=vrfName,proto3" json:"vrfName,omitempty"`
	TableVersion    uint64                  `protobuf:"varint,5,opt,name=tableVersion,proto3" json:"tableVersion,omitempty"`
	RibCount        uint64                  `protobuf:"varint,6,opt,name=ribCount,proto3" json:"ribCount,omitempty"`
	RibMemory       uint64                  `protobuf:"varint,7,opt,name=ribMemory,proto3" json:"ribMemory,omitempty"`
	PeerCount       uint32                  `protobuf:"varint,8,opt,name=peerCount,proto3" json:"peerCount,omitempty"`
	PeerMemory      uint64                  `protobuf:"varint,9,opt,name=peerMemory,proto3" json:"peerMemory,omitempty"`
	PeerGroupCount  uint32                  `protobuf:"varint,10,opt,name=peerGroupCount,proto3" json:"peerGroupCount,omitempty"`
	PeerGroupMemory uint64                  `protobuf:"varint,11,opt,name=peerGroupMemory,proto3" json:"peerGroupMemory,omitempty"`
	Peers           map[string]*PeerSummary `protobuf:"bytes,12,rep,name=peers,proto3" json:"peers,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	FailedPeers     uint32                  `protobuf:"varint,13,opt,name=failedPeers,proto3" json:"failedPeers,omitempty"`
	DisplayedPeers  uint32                  `protobuf:"varint,14,opt,name=displayedPeers,proto3" json:"displayedPeers,omitempty"`
	TotalPeers      uint32                  `protobuf:"varint,15,opt,name=totalPeers,proto3" json:"totalPeers,omitempty"`
	DynamicPeers    uint32                  `protobuf:"varint,16,opt,name=dynamicPeers,proto3" json:"dynamicPeers,omitempty"`
	BestPath        *BestPathOptions        `protobuf:"bytes,17,opt,name=bestPath,proto3" json:"bestPath,omitempty"`
}

func (x *Ipv4UnicastSummary) Reset() {
	*x = Ipv4UnicastSummary{}
	mi := &file_client_frr_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Ipv4UnicastSummary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ipv4UnicastSummary) ProtoMessage() {}

func (x *Ipv4UnicastSummary) ProtoReflect() protoreflect.Message {
	mi := &file_client_frr_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ipv4UnicastSummary.ProtoReflect.Descriptor instead.
func (*Ipv4UnicastSummary) Descriptor() ([]byte, []int) {
	return file_client_frr_proto_rawDescGZIP(), []int{3}
}

func (x *Ipv4UnicastSummary) GetRouterId() string {
	if x != nil {
		return x.RouterId
	}
	return ""
}

func (x *Ipv4UnicastSummary) GetAsNumber() uint32 {
	if x != nil {
		return x.AsNumber
	}
	return 0
}

func (x *Ipv4UnicastSummary) GetVrfId() uint32 {
	if x != nil {
		return x.VrfId
	}
	return 0
}

func (x *Ipv4UnicastSummary) GetVrfName() string {
	if x != nil {
		return x.VrfName
	}
	return ""
}

func (x *Ipv4UnicastSummary) GetTableVersion() uint64 {
	if x != nil {
		return x.TableVersion
	}
	return 0
}

func (x *Ipv4UnicastSummary) GetRibCount() uint64 {
	if x != nil {
		return x.RibCount
	}
	return 0
}

func (x *Ipv4UnicastSummary) GetRibMemory() uint64 {
	if x != nil {
		return x.RibMemory
	}
	return 0
}

func (x *Ipv4UnicastSummary) GetPeerCount() uint32 {
	if x != nil {
		return x.PeerCount
	}
	return 0
}

func (x *Ipv4UnicastSummary) GetPeerMemory() uint64 {
	if x != nil {
		return x.PeerMemory
	}
	return 0
}

func (x *Ipv4UnicastSummary) GetPeerGroupCount() uint32 {
	if x != nil {
		return x.PeerGroupCount
	}
	return 0
}

func (x *Ipv4UnicastSummary) GetPeerGroupMemory() uint64 {
	if x != nil {
		return x.PeerGroupMemory
	}
	return 0
}

func (x *Ipv4UnicastSummary) GetPeers() map[string]*PeerSummary {
	if x != nil {
		return x.Peers
	}
	return nil
}

func (x *Ipv4UnicastSummary) GetFailedPeers() uint32 {
	if x != nil {
		return x.FailedPeers
	}
	return 0
}

func (x *Ipv4UnicastSummary) GetDisplayedPeers() uint32 {
	if x != nil {
		return x.DisplayedPeers
	}
	return 0
}

func (x *Ipv4UnicastSummary) GetTotalPeers() uint32 {
	if x != nil {
		return x.TotalPeers
	}
	return 0
}

func (x *Ipv4UnicastSummary) GetDynamicPeers() uint32 {
	if x != nil {
		return x.DynamicPeers
	}
	return 0
}

func (x *Ipv4UnicastSummary) GetBestPath() *BestPathOptions {
	if x != nil {
		return x.BestPath
	}
	return nil
}

type PeerSummary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SoftwareVersion            string `protobuf:"bytes,1,opt,name=softwareVersion,proto3" json:"softwareVersion,omitempty"`
	RemoteAs                   uint32 `protobuf:"varint,2,opt,name=remoteAs,proto3" json:"remoteAs,omitempty"`
	LocalAs                    uint32 `protobuf:"varint,3,opt,name=localAs,proto3" json:"localAs,omitempty"`
	Version                    uint32 `protobuf:"varint,4,opt,name=version,proto3" json:"version,omitempty"`
	MsgRcvd                    uint64 `protobuf:"varint,5,opt,name=msgRcvd,proto3" json:"msgRcvd,omitempty"`
	MsgSent                    uint64 `protobuf:"varint,6,opt,name=msgSent,proto3" json:"msgSent,omitempty"`
	TableVersion               uint64 `protobuf:"varint,7,opt,name=tableVersion,proto3" json:"tableVersion,omitempty"`
	Outq                       uint32 `protobuf:"varint,8,opt,name=outq,proto3" json:"outq,omitempty"`
	Inq                        uint32 `protobuf:"varint,9,opt,name=inq,proto3" json:"inq,omitempty"`
	PeerUptime                 string `protobuf:"bytes,10,opt,name=peerUptime,proto3" json:"peerUptime,omitempty"`
	PeerUptimeMsec             uint64 `protobuf:"varint,11,opt,name=peerUptimeMsec,proto3" json:"peerUptimeMsec,omitempty"`
	PeerUptimeEstablishedEpoch uint64 `protobuf:"varint,12,opt,name=peerUptimeEstablishedEpoch,proto3" json:"peerUptimeEstablishedEpoch,omitempty"`
	PfxRcd                     uint32 `protobuf:"varint,13,opt,name=pfxRcd,proto3" json:"pfxRcd,omitempty"`
	PfxSnt                     uint32 `protobuf:"varint,14,opt,name=pfxSnt,proto3" json:"pfxSnt,omitempty"`
	State                      string `protobuf:"bytes,15,opt,name=state,proto3" json:"state,omitempty"`
	PeerState                  string `protobuf:"bytes,16,opt,name=peerState,proto3" json:"peerState,omitempty"`
	ConnectionsEstablished     uint32 `protobuf:"varint,17,opt,name=connectionsEstablished,proto3" json:"connectionsEstablished,omitempty"`
	ConnectionsDropped         uint32 `protobuf:"varint,18,opt,name=connectionsDropped,proto3" json:"connectionsDropped,omitempty"`
	Desc                       string `protobuf:"bytes,19,opt,name=desc,proto3" json:"desc,omitempty"`
	IdType                     string `protobuf:"bytes,20,opt,name=idType,proto3" json:"idType,omitempty"`
}

func (x *PeerSummary) Reset() {
	*x = PeerSummary{}
	mi := &file_client_frr_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PeerSummary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PeerSummary) ProtoMessage() {}

func (x *PeerSummary) ProtoReflect() protoreflect.Message {
	mi := &file_client_frr_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PeerSummary.ProtoReflect.Descriptor instead.
func (*PeerSummary) Descriptor() ([]byte, []int) {
	return file_client_frr_proto_rawDescGZIP(), []int{4}
}

func (x *PeerSummary) GetSoftwareVersion() string {
	if x != nil {
		return x.SoftwareVersion
	}
	return ""
}

func (x *PeerSummary) GetRemoteAs() uint32 {
	if x != nil {
		return x.RemoteAs
	}
	return 0
}

func (x *PeerSummary) GetLocalAs() uint32 {
	if x != nil {
		return x.LocalAs
	}
	return 0
}

func (x *PeerSummary) GetVersion() uint32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *PeerSummary) GetMsgRcvd() uint64 {
	if x != nil {
		return x.MsgRcvd
	}
	return 0
}

func (x *PeerSummary) GetMsgSent() uint64 {
	if x != nil {
		return x.MsgSent
	}
	return 0
}

func (x *PeerSummary) GetTableVersion() uint64 {
	if x != nil {
		return x.TableVersion
	}
	return 0
}

func (x *PeerSummary) GetOutq() uint32 {
	if x != nil {
		return x.Outq
	}
	return 0
}

func (x *PeerSummary) GetInq() uint32 {
	if x != nil {
		return x.Inq
	}
	return 0
}

func (x *PeerSummary) GetPeerUptime() string {
	if x != nil {
		return x.PeerUptime
	}
	return ""
}

func (x *PeerSummary) GetPeerUptimeMsec() uint64 {
	if x != nil {
		return x.PeerUptimeMsec
	}
	return 0
}

func (x *PeerSummary) GetPeerUptimeEstablishedEpoch() uint64 {
	if x != nil {
		return x.PeerUptimeEstablishedEpoch
	}
	return 0
}

func (x *PeerSummary) GetPfxRcd() uint32 {
	if x != nil {
		return x.PfxRcd
	}
	return 0
}

func (x *PeerSummary) GetPfxSnt() uint32 {
	if x != nil {
		return x.PfxSnt
	}
	return 0
}

func (x *PeerSummary) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *PeerSummary) GetPeerState() string {
	if x != nil {
		return x.PeerState
	}
	return ""
}

func (x *PeerSummary) GetConnectionsEstablished() uint32 {
	if x != nil {
		return x.ConnectionsEstablished
	}
	return 0
}

func (x *PeerSummary) GetConnectionsDropped() uint32 {
	if x != nil {
		return x.ConnectionsDropped
	}
	return 0
}

func (x *PeerSummary) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *PeerSummary) GetIdType() string {
	if x != nil {
		return x.IdType
	}
	return ""
}

type BestPathOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MultiPathRelax bool `protobuf:"varint,1,opt,name=multiPathRelax,proto3" json:"multiPathRelax,omitempty"`
}

func (x *BestPathOptions) Reset() {
	*x = BestPathOptions{}
	mi := &file_client_frr_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BestPathOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BestPathOptions) ProtoMessage() {}

func (x *BestPathOptions) ProtoReflect() protoreflect.Message {
	mi := &file_client_frr_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BestPathOptions.ProtoReflect.Descriptor instead.
func (*BestPathOptions) Descriptor() ([]byte, []int) {
	return file_client_frr_proto_rawDescGZIP(), []int{5}
}

func (x *BestPathOptions) GetMultiPathRelax() bool {
	if x != nil {
		return x.MultiPathRelax
	}
	return false
}

type ClearBgp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Soft      bool   `protobuf:"varint,1,opt,name=soft,proto3" json:"soft,omitempty"`
	Direction string `protobuf:"bytes,2,opt,name=direction,proto3" json:"direction,omitempty"`
	Neighbor  string `protobuf:"bytes,3,opt,name=neighbor,proto3" json:"neighbor,omitempty"`
}

func (x *ClearBgp) Reset() {
	*x = ClearBgp{}
	mi := &file_client_frr_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClearBgp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClearBgp) ProtoMessage() {}

func (x *ClearBgp) ProtoReflect() protoreflect.Message {
	mi := &file_client_frr_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClearBgp.ProtoReflect.Descriptor instead.
func (*ClearBgp) Descriptor() ([]byte, []int) {
	return file_client_frr_proto_rawDescGZIP(), []int{6}
}

func (x *ClearBgp) GetSoft() bool {
	if x != nil {
		return x.Soft
	}
	return false
}

func (x *ClearBgp) GetDirection() string {
	if x != nil {
		return x.Direction
	}
	return ""
}

func (x *ClearBgp) GetNeighbor() string {
	if x != nil {
		return x.Neighbor
	}
	return ""
}

type BgpNeighbor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PeerIp                string                  `protobuf:"bytes,1,opt,name=peer_ip,json=peerIp,proto3" json:"peer_ip,omitempty"`
	RemoteAs              uint32                  `protobuf:"varint,2,opt,name=remote_as,json=remoteAs,proto3" json:"remote_as,omitempty"`
	Description           string                  `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Password              string                  `protobuf:"bytes,4,opt,name=password,proto3" json:"password,omitempty"`
	Timers                *BgpNeighborTimers      `protobuf:"bytes,5,opt,name=timers,proto3" json:"timers,omitempty"`
	RouteMaps             *BgpNeighborRouteMaps   `protobuf:"bytes,6,opt,name=route_maps,json=routeMaps,proto3" json:"route_maps,omitempty"`
	PrefixLists           *BgpNeighborPrefixLists `protobuf:"bytes,7,opt,name=prefix_lists,json=prefixLists,proto3" json:"prefix_lists,omitempty"`
	NextHopSelf           bool                    `protobuf:"varint,8,opt,name=next_hop_self,json=nextHopSelf,proto3" json:"next_hop_self,omitempty"`
	SoftReconfiguration   bool                    `protobuf:"varint,9,opt,name=soft_reconfiguration,json=softReconfiguration,proto3" json:"soft_reconfiguration,omitempty"`
	Shutdown              bool                    `protobuf:"varint,10,opt,name=shutdown,proto3" json:"shutdown,omitempty"`
	UpdateSource          string                  `protobuf:"bytes,11,opt,name=update_source,json=updateSource,proto3" json:"update_source,omitempty"`
	MaximumPrefix         uint32                  `protobuf:"varint,12,opt,name=maximum_prefix,json=maximumPrefix,proto3" json:"maximum_prefix,omitempty"`
	MaximumPrefixOut      uint32                  `protobuf:"varint,13,opt,name=maximum_prefix_out,json=maximumPrefixOut,proto3" json:"maximum_prefix_out,omitempty"`
	AllowasIn             uint32                  `protobuf:"varint,14,opt,name=allowas_in,json=allowasIn,proto3" json:"allowas_in,omitempty"`
	Weight                uint32                  `protobuf:"varint,15,opt,name=weight,proto3" json:"weight,omitempty"`
	EbgpMultihop          bool                    `protobuf:"varint,16,opt,name=ebgp_multihop,json=ebgpMultihop,proto3" json:"ebgp_multihop,omitempty"`
	EbgpMultihopTtl       uint32                  `protobuf:"varint,17,opt,name=ebgp_multihop_ttl,json=ebgpMultihopTtl,proto3" json:"ebgp_multihop_ttl,omitempty"`
	DisableConnectedCheck bool                    `protobuf:"varint,18,opt,name=disable_connected_check,json=disableConnectedCheck,proto3" json:"disable_connected_check,omitempty"`
}

func (x *BgpNeighbor) Reset() {
	*x = BgpNeighbor{}
	mi := &file_client_frr_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BgpNeighbor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpNeighbor) ProtoMessage() {}

func (x *BgpNeighbor) ProtoReflect() protoreflect.Message {
	mi := &file_client_frr_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpNeighbor.ProtoReflect.Descriptor instead.
func (*BgpNeighbor) Descriptor() ([]byte, []int) {
	return file_client_frr_proto_rawDescGZIP(), []int{7}
}

func (x *BgpNeighbor) GetPeerIp() string {
	if x != nil {
		return x.PeerIp
	}
	return ""
}

func (x *BgpNeighbor) GetRemoteAs() uint32 {
	if x != nil {
		return x.RemoteAs
	}
	return 0
}

func (x *BgpNeighbor) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *BgpNeighbor) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *BgpNeighbor) GetTimers() *BgpNeighborTimers {
	if x != nil {
		return x.Timers
	}
	return nil
}

func (x *BgpNeighbor) GetRouteMaps() *BgpNeighborRouteMaps {
	if x != nil {
		return x.RouteMaps
	}
	return nil
}

func (x *BgpNeighbor) GetPrefixLists() *BgpNeighborPrefixLists {
	if x != nil {
		return x.PrefixLists
	}
	return nil
}

func (x *BgpNeighbor) GetNextHopSelf() bool {
	if x != nil {
		return x.NextHopSelf
	}
	return false
}

func (x *BgpNeighbor) GetSoftReconfiguration() bool {
	if x != nil {
		return x.SoftReconfiguration
	}
	return false
}

func (x *BgpNeighbor) GetShutdown() bool {
	if x != nil {
		return x.Shutdown
	}
	return false
}

func (x *BgpNeighbor) GetUpdateSource() string {
	if x != nil {
		return x.UpdateSource
	}
	return ""
}

func (x *BgpNeighbor) GetMaximumPrefix() uint32 {
	if x != nil {
		return x.MaximumPrefix
	}
	return 0
}

func (x *BgpNeighbor) GetMaximumPrefixOut() uint32 {
	if x != nil {
		return x.MaximumPrefixOut
	}
	return 0
}

func (x *BgpNeighbor) GetAllowasIn() uint32 {
	if x != nil {
		return x.AllowasIn
	}
	return 0
}

func (x *BgpNeighbor) GetWeight() uint32 {
	if x != nil {
		return x.Weight
	}
	return 0
}

func (x *BgpNeighbor) GetEbgpMultihop() bool {
	if x != nil {
		return x.EbgpMultihop
	}
	return false
}

func (x *BgpNeighbor) GetEbgpMultihopTtl() uint32 {
	if x != nil {
		return x.EbgpMultihopTtl
	}
	return 0
}

func (x *BgpNeighbor) GetDisableConnectedCheck() bool {
	if x != nil {
		return x.DisableConnectedCheck
	}
	return false
}

// BGP Neighbor Timers
type BgpNeighborTimers struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Keepalive    uint32 `protobuf:"varint,1,opt,name=keepalive,proto3" json:"keepalive,omitempty"`
	Holdtime     uint32 `protobuf:"varint,2,opt,name=holdtime,proto3" json:"holdtime,omitempty"`
	ConnectRetry uint32 `protobuf:"varint,3,opt,name=connect_retry,json=connectRetry,proto3" json:"connect_retry,omitempty"`
}

func (x *BgpNeighborTimers) Reset() {
	*x = BgpNeighborTimers{}
	mi := &file_client_frr_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BgpNeighborTimers) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpNeighborTimers) ProtoMessage() {}

func (x *BgpNeighborTimers) ProtoReflect() protoreflect.Message {
	mi := &file_client_frr_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpNeighborTimers.ProtoReflect.Descriptor instead.
func (*BgpNeighborTimers) Descriptor() ([]byte, []int) {
	return file_client_frr_proto_rawDescGZIP(), []int{8}
}

func (x *BgpNeighborTimers) GetKeepalive() uint32 {
	if x != nil {
		return x.Keepalive
	}
	return 0
}

func (x *BgpNeighborTimers) GetHoldtime() uint32 {
	if x != nil {
		return x.Holdtime
	}
	return 0
}

func (x *BgpNeighborTimers) GetConnectRetry() uint32 {
	if x != nil {
		return x.ConnectRetry
	}
	return 0
}

// BGP Neighbor Route Maps
type BgpNeighborRouteMaps struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RouteMapIn  []string `protobuf:"bytes,1,rep,name=route_map_in,json=routeMapIn,proto3" json:"route_map_in,omitempty"`
	RouteMapOut []string `protobuf:"bytes,2,rep,name=route_map_out,json=routeMapOut,proto3" json:"route_map_out,omitempty"`
}

func (x *BgpNeighborRouteMaps) Reset() {
	*x = BgpNeighborRouteMaps{}
	mi := &file_client_frr_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BgpNeighborRouteMaps) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpNeighborRouteMaps) ProtoMessage() {}

func (x *BgpNeighborRouteMaps) ProtoReflect() protoreflect.Message {
	mi := &file_client_frr_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpNeighborRouteMaps.ProtoReflect.Descriptor instead.
func (*BgpNeighborRouteMaps) Descriptor() ([]byte, []int) {
	return file_client_frr_proto_rawDescGZIP(), []int{9}
}

func (x *BgpNeighborRouteMaps) GetRouteMapIn() []string {
	if x != nil {
		return x.RouteMapIn
	}
	return nil
}

func (x *BgpNeighborRouteMaps) GetRouteMapOut() []string {
	if x != nil {
		return x.RouteMapOut
	}
	return nil
}

// BGP Neighbor Prefix Lists
type BgpNeighborPrefixLists struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PrefixListIn  []string `protobuf:"bytes,1,rep,name=prefix_list_in,json=prefixListIn,proto3" json:"prefix_list_in,omitempty"`
	PrefixListOut []string `protobuf:"bytes,2,rep,name=prefix_list_out,json=prefixListOut,proto3" json:"prefix_list_out,omitempty"`
}

func (x *BgpNeighborPrefixLists) Reset() {
	*x = BgpNeighborPrefixLists{}
	mi := &file_client_frr_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BgpNeighborPrefixLists) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpNeighborPrefixLists) ProtoMessage() {}

func (x *BgpNeighborPrefixLists) ProtoReflect() protoreflect.Message {
	mi := &file_client_frr_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpNeighborPrefixLists.ProtoReflect.Descriptor instead.
func (*BgpNeighborPrefixLists) Descriptor() ([]byte, []int) {
	return file_client_frr_proto_rawDescGZIP(), []int{10}
}

func (x *BgpNeighborPrefixLists) GetPrefixListIn() []string {
	if x != nil {
		return x.PrefixListIn
	}
	return nil
}

func (x *BgpNeighborPrefixLists) GetPrefixListOut() []string {
	if x != nil {
		return x.PrefixListOut
	}
	return nil
}

// BGP Route Map Configuration
type BgpRouteMap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name            string              `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Sequence        uint32              `protobuf:"varint,2,opt,name=sequence,proto3" json:"sequence,omitempty"`
	Action          BgpRouteMapAction   `protobuf:"varint,3,opt,name=action,proto3,enum=client.BgpRouteMapAction" json:"action,omitempty"`
	MatchConditions []*BgpRouteMapMatch `protobuf:"bytes,4,rep,name=match_conditions,json=matchConditions,proto3" json:"match_conditions,omitempty"`
	SetActions      *BgpRouteMapSet     `protobuf:"bytes,5,opt,name=set_actions,json=setActions,proto3" json:"set_actions,omitempty"`
	Description     string              `protobuf:"bytes,6,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *BgpRouteMap) Reset() {
	*x = BgpRouteMap{}
	mi := &file_client_frr_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BgpRouteMap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpRouteMap) ProtoMessage() {}

func (x *BgpRouteMap) ProtoReflect() protoreflect.Message {
	mi := &file_client_frr_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpRouteMap.ProtoReflect.Descriptor instead.
func (*BgpRouteMap) Descriptor() ([]byte, []int) {
	return file_client_frr_proto_rawDescGZIP(), []int{11}
}

func (x *BgpRouteMap) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *BgpRouteMap) GetSequence() uint32 {
	if x != nil {
		return x.Sequence
	}
	return 0
}

func (x *BgpRouteMap) GetAction() BgpRouteMapAction {
	if x != nil {
		return x.Action
	}
	return BgpRouteMapAction_ROUTE_MAP_UNKNOWN
}

func (x *BgpRouteMap) GetMatchConditions() []*BgpRouteMapMatch {
	if x != nil {
		return x.MatchConditions
	}
	return nil
}

func (x *BgpRouteMap) GetSetActions() *BgpRouteMapSet {
	if x != nil {
		return x.SetActions
	}
	return nil
}

func (x *BgpRouteMap) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

// BGP Route Map Match Conditions
type BgpRouteMapMatch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MatchType  string `protobuf:"bytes,1,opt,name=match_type,json=matchType,proto3" json:"match_type,omitempty"`
	MatchValue string `protobuf:"bytes,2,opt,name=match_value,json=matchValue,proto3" json:"match_value,omitempty"`
}

func (x *BgpRouteMapMatch) Reset() {
	*x = BgpRouteMapMatch{}
	mi := &file_client_frr_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BgpRouteMapMatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpRouteMapMatch) ProtoMessage() {}

func (x *BgpRouteMapMatch) ProtoReflect() protoreflect.Message {
	mi := &file_client_frr_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpRouteMapMatch.ProtoReflect.Descriptor instead.
func (*BgpRouteMapMatch) Descriptor() ([]byte, []int) {
	return file_client_frr_proto_rawDescGZIP(), []int{12}
}

func (x *BgpRouteMapMatch) GetMatchType() string {
	if x != nil {
		return x.MatchType
	}
	return ""
}

func (x *BgpRouteMapMatch) GetMatchValue() string {
	if x != nil {
		return x.MatchValue
	}
	return ""
}

// BGP Route Map Set Actions
type BgpRouteMapSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SetLocalPreference uint32 `protobuf:"varint,1,opt,name=set_local_preference,json=setLocalPreference,proto3" json:"set_local_preference,omitempty"`
	SetMetric          uint32 `protobuf:"varint,2,opt,name=set_metric,json=setMetric,proto3" json:"set_metric,omitempty"`
	SetCommunity       string `protobuf:"bytes,3,opt,name=set_community,json=setCommunity,proto3" json:"set_community,omitempty"`
	SetNexthop         string `protobuf:"bytes,4,opt,name=set_nexthop,json=setNexthop,proto3" json:"set_nexthop,omitempty"`
}

func (x *BgpRouteMapSet) Reset() {
	*x = BgpRouteMapSet{}
	mi := &file_client_frr_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BgpRouteMapSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpRouteMapSet) ProtoMessage() {}

func (x *BgpRouteMapSet) ProtoReflect() protoreflect.Message {
	mi := &file_client_frr_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpRouteMapSet.ProtoReflect.Descriptor instead.
func (*BgpRouteMapSet) Descriptor() ([]byte, []int) {
	return file_client_frr_proto_rawDescGZIP(), []int{13}
}

func (x *BgpRouteMapSet) GetSetLocalPreference() uint32 {
	if x != nil {
		return x.SetLocalPreference
	}
	return 0
}

func (x *BgpRouteMapSet) GetSetMetric() uint32 {
	if x != nil {
		return x.SetMetric
	}
	return 0
}

func (x *BgpRouteMapSet) GetSetCommunity() string {
	if x != nil {
		return x.SetCommunity
	}
	return ""
}

func (x *BgpRouteMapSet) GetSetNexthop() string {
	if x != nil {
		return x.SetNexthop
	}
	return ""
}

// BGP Community List
type BgpCommunityList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name            string            `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Sequence        uint32            `protobuf:"varint,2,opt,name=sequence,proto3" json:"sequence,omitempty"`
	Action          BgpRouteMapAction `protobuf:"varint,3,opt,name=action,proto3,enum=client.BgpRouteMapAction" json:"action,omitempty"`
	CommunityValues string            `protobuf:"bytes,4,opt,name=community_values,json=communityValues,proto3" json:"community_values,omitempty"`
	Type            string            `protobuf:"bytes,5,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *BgpCommunityList) Reset() {
	*x = BgpCommunityList{}
	mi := &file_client_frr_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BgpCommunityList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpCommunityList) ProtoMessage() {}

func (x *BgpCommunityList) ProtoReflect() protoreflect.Message {
	mi := &file_client_frr_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpCommunityList.ProtoReflect.Descriptor instead.
func (*BgpCommunityList) Descriptor() ([]byte, []int) {
	return file_client_frr_proto_rawDescGZIP(), []int{14}
}

func (x *BgpCommunityList) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *BgpCommunityList) GetSequence() uint32 {
	if x != nil {
		return x.Sequence
	}
	return 0
}

func (x *BgpCommunityList) GetAction() BgpRouteMapAction {
	if x != nil {
		return x.Action
	}
	return BgpRouteMapAction_ROUTE_MAP_UNKNOWN
}

func (x *BgpCommunityList) GetCommunityValues() string {
	if x != nil {
		return x.CommunityValues
	}
	return ""
}

func (x *BgpCommunityList) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

// BGP Prefix List
type BgpPrefixList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name     string            `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Sequence uint32            `protobuf:"varint,2,opt,name=sequence,proto3" json:"sequence,omitempty"`
	Action   BgpRouteMapAction `protobuf:"varint,3,opt,name=action,proto3,enum=client.BgpRouteMapAction" json:"action,omitempty"`
	Prefix   string            `protobuf:"bytes,4,opt,name=prefix,proto3" json:"prefix,omitempty"`
	Le       uint32            `protobuf:"varint,5,opt,name=le,proto3" json:"le,omitempty"`
	Ge       uint32            `protobuf:"varint,6,opt,name=ge,proto3" json:"ge,omitempty"`
}

func (x *BgpPrefixList) Reset() {
	*x = BgpPrefixList{}
	mi := &file_client_frr_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BgpPrefixList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpPrefixList) ProtoMessage() {}

func (x *BgpPrefixList) ProtoReflect() protoreflect.Message {
	mi := &file_client_frr_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpPrefixList.ProtoReflect.Descriptor instead.
func (*BgpPrefixList) Descriptor() ([]byte, []int) {
	return file_client_frr_proto_rawDescGZIP(), []int{15}
}

func (x *BgpPrefixList) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *BgpPrefixList) GetSequence() uint32 {
	if x != nil {
		return x.Sequence
	}
	return 0
}

func (x *BgpPrefixList) GetAction() BgpRouteMapAction {
	if x != nil {
		return x.Action
	}
	return BgpRouteMapAction_ROUTE_MAP_UNKNOWN
}

func (x *BgpPrefixList) GetPrefix() string {
	if x != nil {
		return x.Prefix
	}
	return ""
}

func (x *BgpPrefixList) GetLe() uint32 {
	if x != nil {
		return x.Le
	}
	return 0
}

func (x *BgpPrefixList) GetGe() uint32 {
	if x != nil {
		return x.Ge
	}
	return 0
}

type ShowBgpSummary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Instances map[string]*BgpSummaryInstance `protobuf:"bytes,1,rep,name=instances,proto3" json:"instances,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ShowBgpSummary) Reset() {
	*x = ShowBgpSummary{}
	mi := &file_client_frr_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ShowBgpSummary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShowBgpSummary) ProtoMessage() {}

func (x *ShowBgpSummary) ProtoReflect() protoreflect.Message {
	mi := &file_client_frr_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShowBgpSummary.ProtoReflect.Descriptor instead.
func (*ShowBgpSummary) Descriptor() ([]byte, []int) {
	return file_client_frr_proto_rawDescGZIP(), []int{16}
}

func (x *ShowBgpSummary) GetInstances() map[string]*BgpSummaryInstance {
	if x != nil {
		return x.Instances
	}
	return nil
}

type BgpSummaryInstance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RouterId     uint32                         `protobuf:"varint,1,opt,name=router_id,json=routerId,proto3" json:"router_id,omitempty"`
	As           uint32                         `protobuf:"varint,2,opt,name=as,proto3" json:"as,omitempty"`
	TableVersion uint64                         `protobuf:"varint,3,opt,name=table_version,json=tableVersion,proto3" json:"table_version,omitempty"`
	RibEntries   uint32                         `protobuf:"varint,4,opt,name=rib_entries,json=ribEntries,proto3" json:"rib_entries,omitempty"`
	RibMemory    uint32                         `protobuf:"varint,5,opt,name=rib_memory,json=ribMemory,proto3" json:"rib_memory,omitempty"`
	PeerCount    uint32                         `protobuf:"varint,6,opt,name=peer_count,json=peerCount,proto3" json:"peer_count,omitempty"`
	PeerMemory   uint32                         `protobuf:"varint,7,opt,name=peer_memory,json=peerMemory,proto3" json:"peer_memory,omitempty"`
	Peers        map[string]*BgpPeerSummaryInfo `protobuf:"bytes,8,rep,name=peers,proto3" json:"peers,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *BgpSummaryInstance) Reset() {
	*x = BgpSummaryInstance{}
	mi := &file_client_frr_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BgpSummaryInstance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpSummaryInstance) ProtoMessage() {}

func (x *BgpSummaryInstance) ProtoReflect() protoreflect.Message {
	mi := &file_client_frr_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpSummaryInstance.ProtoReflect.Descriptor instead.
func (*BgpSummaryInstance) Descriptor() ([]byte, []int) {
	return file_client_frr_proto_rawDescGZIP(), []int{17}
}

func (x *BgpSummaryInstance) GetRouterId() uint32 {
	if x != nil {
		return x.RouterId
	}
	return 0
}

func (x *BgpSummaryInstance) GetAs() uint32 {
	if x != nil {
		return x.As
	}
	return 0
}

func (x *BgpSummaryInstance) GetTableVersion() uint64 {
	if x != nil {
		return x.TableVersion
	}
	return 0
}

func (x *BgpSummaryInstance) GetRibEntries() uint32 {
	if x != nil {
		return x.RibEntries
	}
	return 0
}

func (x *BgpSummaryInstance) GetRibMemory() uint32 {
	if x != nil {
		return x.RibMemory
	}
	return 0
}

func (x *BgpSummaryInstance) GetPeerCount() uint32 {
	if x != nil {
		return x.PeerCount
	}
	return 0
}

func (x *BgpSummaryInstance) GetPeerMemory() uint32 {
	if x != nil {
		return x.PeerMemory
	}
	return 0
}

func (x *BgpSummaryInstance) GetPeers() map[string]*BgpPeerSummaryInfo {
	if x != nil {
		return x.Peers
	}
	return nil
}

type BgpPeerSummaryInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RemoteAs       uint32 `protobuf:"varint,1,opt,name=remote_as,json=remoteAs,proto3" json:"remote_as,omitempty"`
	LocalAs        uint32 `protobuf:"varint,2,opt,name=local_as,json=localAs,proto3" json:"local_as,omitempty"`
	State          string `protobuf:"bytes,3,opt,name=state,proto3" json:"state,omitempty"`
	Uptime         uint64 `protobuf:"varint,4,opt,name=uptime,proto3" json:"uptime,omitempty"`
	PrefixReceived uint32 `protobuf:"varint,5,opt,name=prefix_received,json=prefixReceived,proto3" json:"prefix_received,omitempty"`
	PrefixSent     uint32 `protobuf:"varint,6,opt,name=prefix_sent,json=prefixSent,proto3" json:"prefix_sent,omitempty"`
	StatePfxRcd    string `protobuf:"bytes,7,opt,name=state_pfx_rcd,json=statePfxRcd,proto3" json:"state_pfx_rcd,omitempty"`
}

func (x *BgpPeerSummaryInfo) Reset() {
	*x = BgpPeerSummaryInfo{}
	mi := &file_client_frr_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BgpPeerSummaryInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpPeerSummaryInfo) ProtoMessage() {}

func (x *BgpPeerSummaryInfo) ProtoReflect() protoreflect.Message {
	mi := &file_client_frr_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpPeerSummaryInfo.ProtoReflect.Descriptor instead.
func (*BgpPeerSummaryInfo) Descriptor() ([]byte, []int) {
	return file_client_frr_proto_rawDescGZIP(), []int{18}
}

func (x *BgpPeerSummaryInfo) GetRemoteAs() uint32 {
	if x != nil {
		return x.RemoteAs
	}
	return 0
}

func (x *BgpPeerSummaryInfo) GetLocalAs() uint32 {
	if x != nil {
		return x.LocalAs
	}
	return 0
}

func (x *BgpPeerSummaryInfo) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *BgpPeerSummaryInfo) GetUptime() uint64 {
	if x != nil {
		return x.Uptime
	}
	return 0
}

func (x *BgpPeerSummaryInfo) GetPrefixReceived() uint32 {
	if x != nil {
		return x.PrefixReceived
	}
	return 0
}

func (x *BgpPeerSummaryInfo) GetPrefixSent() uint32 {
	if x != nil {
		return x.PrefixSent
	}
	return 0
}

func (x *BgpPeerSummaryInfo) GetStatePfxRcd() string {
	if x != nil {
		return x.StatePfxRcd
	}
	return ""
}

type ShowBgpNeighbors struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Neighbors map[string]*BgpNeighborInfo `protobuf:"bytes,1,rep,name=neighbors,proto3" json:"neighbors,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ShowBgpNeighbors) Reset() {
	*x = ShowBgpNeighbors{}
	mi := &file_client_frr_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ShowBgpNeighbors) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShowBgpNeighbors) ProtoMessage() {}

func (x *ShowBgpNeighbors) ProtoReflect() protoreflect.Message {
	mi := &file_client_frr_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShowBgpNeighbors.ProtoReflect.Descriptor instead.
func (*ShowBgpNeighbors) Descriptor() ([]byte, []int) {
	return file_client_frr_proto_rawDescGZIP(), []int{19}
}

func (x *ShowBgpNeighbors) GetNeighbors() map[string]*BgpNeighborInfo {
	if x != nil {
		return x.Neighbors
	}
	return nil
}

type BgpNeighborInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RemoteAs                                       uint32                  `protobuf:"varint,1,opt,name=remote_as,json=remoteAs,proto3" json:"remote_as,omitempty"`
	LocalAs                                        uint32                  `protobuf:"varint,2,opt,name=local_as,json=localAs,proto3" json:"local_as,omitempty"`
	LocalAsReplaceAsDualAs                         bool                    `protobuf:"varint,3,opt,name=local_as_replace_as_dual_as,json=localAsReplaceAsDualAs,proto3" json:"local_as_replace_as_dual_as,omitempty"`
	NbrExternalLink                                bool                    `protobuf:"varint,4,opt,name=nbr_external_link,json=nbrExternalLink,proto3" json:"nbr_external_link,omitempty"`
	LocalRole                                      string                  `protobuf:"bytes,5,opt,name=local_role,json=localRole,proto3" json:"local_role,omitempty"`
	RemoteRole                                     string                  `protobuf:"bytes,6,opt,name=remote_role,json=remoteRole,proto3" json:"remote_role,omitempty"`
	NbrDesc                                        string                  `protobuf:"bytes,7,opt,name=nbr_desc,json=nbrDesc,proto3" json:"nbr_desc,omitempty"`
	Hostname                                       string                  `protobuf:"bytes,8,opt,name=hostname,proto3" json:"hostname,omitempty"`
	BgpVersion                                     uint32                  `protobuf:"varint,9,opt,name=bgp_version,json=bgpVersion,proto3" json:"bgp_version,omitempty"`
	RemoteRouterId                                 string                  `protobuf:"bytes,10,opt,name=remote_router_id,json=remoteRouterId,proto3" json:"remote_router_id,omitempty"`
	LocalRouterId                                  string                  `protobuf:"bytes,11,opt,name=local_router_id,json=localRouterId,proto3" json:"local_router_id,omitempty"`
	BgpState                                       string                  `protobuf:"bytes,12,opt,name=bgp_state,json=bgpState,proto3" json:"bgp_state,omitempty"`
	BgpTimerLastRead                               uint64                  `protobuf:"varint,13,opt,name=bgp_timer_last_read,json=bgpTimerLastRead,proto3" json:"bgp_timer_last_read,omitempty"`
	BgpTimerLastWrite                              uint64                  `protobuf:"varint,14,opt,name=bgp_timer_last_write,json=bgpTimerLastWrite,proto3" json:"bgp_timer_last_write,omitempty"`
	BgpInUpdateElapsedTimeMsecs                    uint64                  `protobuf:"varint,15,opt,name=bgp_in_update_elapsed_time_msecs,json=bgpInUpdateElapsedTimeMsecs,proto3" json:"bgp_in_update_elapsed_time_msecs,omitempty"`
	BgpTimerConfiguredHoldTimeMsecs                uint64                  `protobuf:"varint,16,opt,name=bgp_timer_configured_hold_time_msecs,json=bgpTimerConfiguredHoldTimeMsecs,proto3" json:"bgp_timer_configured_hold_time_msecs,omitempty"`
	BgpTimerConfiguredKeepAliveIntervalMsecs       uint64                  `protobuf:"varint,17,opt,name=bgp_timer_configured_keep_alive_interval_msecs,json=bgpTimerConfiguredKeepAliveIntervalMsecs,proto3" json:"bgp_timer_configured_keep_alive_interval_msecs,omitempty"`
	BgpTimerHoldTimeMsecs                          uint64                  `protobuf:"varint,18,opt,name=bgp_timer_hold_time_msecs,json=bgpTimerHoldTimeMsecs,proto3" json:"bgp_timer_hold_time_msecs,omitempty"`
	BgpTimerKeepAliveIntervalMsecs                 uint64                  `protobuf:"varint,19,opt,name=bgp_timer_keep_alive_interval_msecs,json=bgpTimerKeepAliveIntervalMsecs,proto3" json:"bgp_timer_keep_alive_interval_msecs,omitempty"`
	BgpTcpMssConfigured                            uint32                  `protobuf:"varint,20,opt,name=bgp_tcp_mss_configured,json=bgpTcpMssConfigured,proto3" json:"bgp_tcp_mss_configured,omitempty"`
	BgpTcpMssSynced                                uint32                  `protobuf:"varint,21,opt,name=bgp_tcp_mss_synced,json=bgpTcpMssSynced,proto3" json:"bgp_tcp_mss_synced,omitempty"`
	ExtendedOptionalParametersLength               bool                    `protobuf:"varint,22,opt,name=extended_optional_parameters_length,json=extendedOptionalParametersLength,proto3" json:"extended_optional_parameters_length,omitempty"`
	BgpTimerConfiguredConditionalAdvertisementsSec uint32                  `protobuf:"varint,23,opt,name=bgp_timer_configured_conditional_advertisements_sec,json=bgpTimerConfiguredConditionalAdvertisementsSec,proto3" json:"bgp_timer_configured_conditional_advertisements_sec,omitempty"`
	GracefulRestartInfo                            *BgpGracefulRestartInfo `protobuf:"bytes,24,opt,name=graceful_restart_info,json=gracefulRestartInfo,proto3" json:"graceful_restart_info,omitempty"`
	MessageStats                                   *BgpMessageStats        `protobuf:"bytes,25,opt,name=message_stats,json=messageStats,proto3" json:"message_stats,omitempty"`
	PrefixStats                                    *BgpPrefixStats         `protobuf:"bytes,26,opt,name=prefix_stats,json=prefixStats,proto3" json:"prefix_stats,omitempty"`
	MinBtwnAdvertisementRunsTimerMsecs             uint32                  `protobuf:"varint,27,opt,name=min_btwn_advertisement_runs_timer_msecs,json=minBtwnAdvertisementRunsTimerMsecs,proto3" json:"min_btwn_advertisement_runs_timer_msecs,omitempty"`
	AddressFamilyInfo                              *BgpAddressFamilyInfo   `protobuf:"bytes,28,opt,name=address_family_info,json=addressFamilyInfo,proto3" json:"address_family_info,omitempty"`
	ConnectionsEstablished                         uint32                  `protobuf:"varint,29,opt,name=connections_established,json=connectionsEstablished,proto3" json:"connections_established,omitempty"`
	ConnectionsDropped                             uint32                  `protobuf:"varint,30,opt,name=connections_dropped,json=connectionsDropped,proto3" json:"connections_dropped,omitempty"`
	LastResetTimerMsecs                            uint64                  `protobuf:"varint,31,opt,name=last_reset_timer_msecs,json=lastResetTimerMsecs,proto3" json:"last_reset_timer_msecs,omitempty"`
	LastResetDueTo                                 string                  `protobuf:"bytes,32,opt,name=last_reset_due_to,json=lastResetDueTo,proto3" json:"last_reset_due_to,omitempty"`
	LastResetCode                                  uint32                  `protobuf:"varint,33,opt,name=last_reset_code,json=lastResetCode,proto3" json:"last_reset_code,omitempty"`
	SoftwareVersion                                string                  `protobuf:"bytes,34,opt,name=software_version,json=softwareVersion,proto3" json:"software_version,omitempty"`
	ExternalBgpNbrMaxHopsAway                      uint32                  `protobuf:"varint,35,opt,name=external_bgp_nbr_max_hops_away,json=externalBgpNbrMaxHopsAway,proto3" json:"external_bgp_nbr_max_hops_away,omitempty"`
	HostLocal                                      string                  `protobuf:"bytes,36,opt,name=host_local,json=hostLocal,proto3" json:"host_local,omitempty"`
	PortLocal                                      uint32                  `protobuf:"varint,37,opt,name=port_local,json=portLocal,proto3" json:"port_local,omitempty"`
	HostForeign                                    string                  `protobuf:"bytes,38,opt,name=host_foreign,json=hostForeign,proto3" json:"host_foreign,omitempty"`
	PortForeign                                    uint32                  `protobuf:"varint,39,opt,name=port_foreign,json=portForeign,proto3" json:"port_foreign,omitempty"`
	Nexthop                                        string                  `protobuf:"bytes,40,opt,name=nexthop,proto3" json:"nexthop,omitempty"`
	NexthopGlobal                                  string                  `protobuf:"bytes,41,opt,name=nexthop_global,json=nexthopGlobal,proto3" json:"nexthop_global,omitempty"`
	NexthopLocal                                   string                  `protobuf:"bytes,42,opt,name=nexthop_local,json=nexthopLocal,proto3" json:"nexthop_local,omitempty"`
	BgpConnection                                  string                  `protobuf:"bytes,43,opt,name=bgp_connection,json=bgpConnection,proto3" json:"bgp_connection,omitempty"`
	ConnectRetryTimer                              uint32                  `protobuf:"varint,44,opt,name=connect_retry_timer,json=connectRetryTimer,proto3" json:"connect_retry_timer,omitempty"`
	NextConnectTimerDueInMsecs                     uint64                  `protobuf:"varint,45,opt,name=next_connect_timer_due_in_msecs,json=nextConnectTimerDueInMsecs,proto3" json:"next_connect_timer_due_in_msecs,omitempty"`
	ReadThread                                     string                  `protobuf:"bytes,46,opt,name=read_thread,json=readThread,proto3" json:"read_thread,omitempty"`
	WriteThread                                    string                  `protobuf:"bytes,47,opt,name=write_thread,json=writeThread,proto3" json:"write_thread,omitempty"`
}

func (x *BgpNeighborInfo) Reset() {
	*x = BgpNeighborInfo{}
	mi := &file_client_frr_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BgpNeighborInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpNeighborInfo) ProtoMessage() {}

func (x *BgpNeighborInfo) ProtoReflect() protoreflect.Message {
	mi := &file_client_frr_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpNeighborInfo.ProtoReflect.Descriptor instead.
func (*BgpNeighborInfo) Descriptor() ([]byte, []int) {
	return file_client_frr_proto_rawDescGZIP(), []int{20}
}

func (x *BgpNeighborInfo) GetRemoteAs() uint32 {
	if x != nil {
		return x.RemoteAs
	}
	return 0
}

func (x *BgpNeighborInfo) GetLocalAs() uint32 {
	if x != nil {
		return x.LocalAs
	}
	return 0
}

func (x *BgpNeighborInfo) GetLocalAsReplaceAsDualAs() bool {
	if x != nil {
		return x.LocalAsReplaceAsDualAs
	}
	return false
}

func (x *BgpNeighborInfo) GetNbrExternalLink() bool {
	if x != nil {
		return x.NbrExternalLink
	}
	return false
}

func (x *BgpNeighborInfo) GetLocalRole() string {
	if x != nil {
		return x.LocalRole
	}
	return ""
}

func (x *BgpNeighborInfo) GetRemoteRole() string {
	if x != nil {
		return x.RemoteRole
	}
	return ""
}

func (x *BgpNeighborInfo) GetNbrDesc() string {
	if x != nil {
		return x.NbrDesc
	}
	return ""
}

func (x *BgpNeighborInfo) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

func (x *BgpNeighborInfo) GetBgpVersion() uint32 {
	if x != nil {
		return x.BgpVersion
	}
	return 0
}

func (x *BgpNeighborInfo) GetRemoteRouterId() string {
	if x != nil {
		return x.RemoteRouterId
	}
	return ""
}

func (x *BgpNeighborInfo) GetLocalRouterId() string {
	if x != nil {
		return x.LocalRouterId
	}
	return ""
}

func (x *BgpNeighborInfo) GetBgpState() string {
	if x != nil {
		return x.BgpState
	}
	return ""
}

func (x *BgpNeighborInfo) GetBgpTimerLastRead() uint64 {
	if x != nil {
		return x.BgpTimerLastRead
	}
	return 0
}

func (x *BgpNeighborInfo) GetBgpTimerLastWrite() uint64 {
	if x != nil {
		return x.BgpTimerLastWrite
	}
	return 0
}

func (x *BgpNeighborInfo) GetBgpInUpdateElapsedTimeMsecs() uint64 {
	if x != nil {
		return x.BgpInUpdateElapsedTimeMsecs
	}
	return 0
}

func (x *BgpNeighborInfo) GetBgpTimerConfiguredHoldTimeMsecs() uint64 {
	if x != nil {
		return x.BgpTimerConfiguredHoldTimeMsecs
	}
	return 0
}

func (x *BgpNeighborInfo) GetBgpTimerConfiguredKeepAliveIntervalMsecs() uint64 {
	if x != nil {
		return x.BgpTimerConfiguredKeepAliveIntervalMsecs
	}
	return 0
}

func (x *BgpNeighborInfo) GetBgpTimerHoldTimeMsecs() uint64 {
	if x != nil {
		return x.BgpTimerHoldTimeMsecs
	}
	return 0
}

func (x *BgpNeighborInfo) GetBgpTimerKeepAliveIntervalMsecs() uint64 {
	if x != nil {
		return x.BgpTimerKeepAliveIntervalMsecs
	}
	return 0
}

func (x *BgpNeighborInfo) GetBgpTcpMssConfigured() uint32 {
	if x != nil {
		return x.BgpTcpMssConfigured
	}
	return 0
}

func (x *BgpNeighborInfo) GetBgpTcpMssSynced() uint32 {
	if x != nil {
		return x.BgpTcpMssSynced
	}
	return 0
}

func (x *BgpNeighborInfo) GetExtendedOptionalParametersLength() bool {
	if x != nil {
		return x.ExtendedOptionalParametersLength
	}
	return false
}

func (x *BgpNeighborInfo) GetBgpTimerConfiguredConditionalAdvertisementsSec() uint32 {
	if x != nil {
		return x.BgpTimerConfiguredConditionalAdvertisementsSec
	}
	return 0
}

func (x *BgpNeighborInfo) GetGracefulRestartInfo() *BgpGracefulRestartInfo {
	if x != nil {
		return x.GracefulRestartInfo
	}
	return nil
}

func (x *BgpNeighborInfo) GetMessageStats() *BgpMessageStats {
	if x != nil {
		return x.MessageStats
	}
	return nil
}

func (x *BgpNeighborInfo) GetPrefixStats() *BgpPrefixStats {
	if x != nil {
		return x.PrefixStats
	}
	return nil
}

func (x *BgpNeighborInfo) GetMinBtwnAdvertisementRunsTimerMsecs() uint32 {
	if x != nil {
		return x.MinBtwnAdvertisementRunsTimerMsecs
	}
	return 0
}

func (x *BgpNeighborInfo) GetAddressFamilyInfo() *BgpAddressFamilyInfo {
	if x != nil {
		return x.AddressFamilyInfo
	}
	return nil
}

func (x *BgpNeighborInfo) GetConnectionsEstablished() uint32 {
	if x != nil {
		return x.ConnectionsEstablished
	}
	return 0
}

func (x *BgpNeighborInfo) GetConnectionsDropped() uint32 {
	if x != nil {
		return x.ConnectionsDropped
	}
	return 0
}

func (x *BgpNeighborInfo) GetLastResetTimerMsecs() uint64 {
	if x != nil {
		return x.LastResetTimerMsecs
	}
	return 0
}

func (x *BgpNeighborInfo) GetLastResetDueTo() string {
	if x != nil {
		return x.LastResetDueTo
	}
	return ""
}

func (x *BgpNeighborInfo) GetLastResetCode() uint32 {
	if x != nil {
		return x.LastResetCode
	}
	return 0
}

func (x *BgpNeighborInfo) GetSoftwareVersion() string {
	if x != nil {
		return x.SoftwareVersion
	}
	return ""
}

func (x *BgpNeighborInfo) GetExternalBgpNbrMaxHopsAway() uint32 {
	if x != nil {
		return x.ExternalBgpNbrMaxHopsAway
	}
	return 0
}

func (x *BgpNeighborInfo) GetHostLocal() string {
	if x != nil {
		return x.HostLocal
	}
	return ""
}

func (x *BgpNeighborInfo) GetPortLocal() uint32 {
	if x != nil {
		return x.PortLocal
	}
	return 0
}

func (x *BgpNeighborInfo) GetHostForeign() string {
	if x != nil {
		return x.HostForeign
	}
	return ""
}

func (x *BgpNeighborInfo) GetPortForeign() uint32 {
	if x != nil {
		return x.PortForeign
	}
	return 0
}

func (x *BgpNeighborInfo) GetNexthop() string {
	if x != nil {
		return x.Nexthop
	}
	return ""
}

func (x *BgpNeighborInfo) GetNexthopGlobal() string {
	if x != nil {
		return x.NexthopGlobal
	}
	return ""
}

func (x *BgpNeighborInfo) GetNexthopLocal() string {
	if x != nil {
		return x.NexthopLocal
	}
	return ""
}

func (x *BgpNeighborInfo) GetBgpConnection() string {
	if x != nil {
		return x.BgpConnection
	}
	return ""
}

func (x *BgpNeighborInfo) GetConnectRetryTimer() uint32 {
	if x != nil {
		return x.ConnectRetryTimer
	}
	return 0
}

func (x *BgpNeighborInfo) GetNextConnectTimerDueInMsecs() uint64 {
	if x != nil {
		return x.NextConnectTimerDueInMsecs
	}
	return 0
}

func (x *BgpNeighborInfo) GetReadThread() string {
	if x != nil {
		return x.ReadThread
	}
	return ""
}

func (x *BgpNeighborInfo) GetWriteThread() string {
	if x != nil {
		return x.WriteThread
	}
	return ""
}

type BgpGracefulRestartInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EndOfRibSend map[string]bool           `protobuf:"bytes,1,rep,name=end_of_rib_send,json=endOfRibSend,proto3" json:"end_of_rib_send,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	EndOfRibRecv map[string]bool           `protobuf:"bytes,2,rep,name=end_of_rib_recv,json=endOfRibRecv,proto3" json:"end_of_rib_recv,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	LocalGrMode  string                    `protobuf:"bytes,3,opt,name=local_gr_mode,json=localGrMode,proto3" json:"local_gr_mode,omitempty"`
	RemoteGrMode string                    `protobuf:"bytes,4,opt,name=remote_gr_mode,json=remoteGrMode,proto3" json:"remote_gr_mode,omitempty"`
	RBit         bool                      `protobuf:"varint,5,opt,name=r_bit,json=rBit,proto3" json:"r_bit,omitempty"`
	NBit         bool                      `protobuf:"varint,6,opt,name=n_bit,json=nBit,proto3" json:"n_bit,omitempty"`
	Timers       *BgpGracefulRestartTimers `protobuf:"bytes,7,opt,name=timers,proto3" json:"timers,omitempty"`
}

func (x *BgpGracefulRestartInfo) Reset() {
	*x = BgpGracefulRestartInfo{}
	mi := &file_client_frr_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BgpGracefulRestartInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpGracefulRestartInfo) ProtoMessage() {}

func (x *BgpGracefulRestartInfo) ProtoReflect() protoreflect.Message {
	mi := &file_client_frr_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpGracefulRestartInfo.ProtoReflect.Descriptor instead.
func (*BgpGracefulRestartInfo) Descriptor() ([]byte, []int) {
	return file_client_frr_proto_rawDescGZIP(), []int{21}
}

func (x *BgpGracefulRestartInfo) GetEndOfRibSend() map[string]bool {
	if x != nil {
		return x.EndOfRibSend
	}
	return nil
}

func (x *BgpGracefulRestartInfo) GetEndOfRibRecv() map[string]bool {
	if x != nil {
		return x.EndOfRibRecv
	}
	return nil
}

func (x *BgpGracefulRestartInfo) GetLocalGrMode() string {
	if x != nil {
		return x.LocalGrMode
	}
	return ""
}

func (x *BgpGracefulRestartInfo) GetRemoteGrMode() string {
	if x != nil {
		return x.RemoteGrMode
	}
	return ""
}

func (x *BgpGracefulRestartInfo) GetRBit() bool {
	if x != nil {
		return x.RBit
	}
	return false
}

func (x *BgpGracefulRestartInfo) GetNBit() bool {
	if x != nil {
		return x.NBit
	}
	return false
}

func (x *BgpGracefulRestartInfo) GetTimers() *BgpGracefulRestartTimers {
	if x != nil {
		return x.Timers
	}
	return nil
}

type BgpGracefulRestartTimers struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConfiguredRestartTimer  uint32 `protobuf:"varint,1,opt,name=configured_restart_timer,json=configuredRestartTimer,proto3" json:"configured_restart_timer,omitempty"`
	ConfiguredLlgrStaleTime uint32 `protobuf:"varint,2,opt,name=configured_llgr_stale_time,json=configuredLlgrStaleTime,proto3" json:"configured_llgr_stale_time,omitempty"`
	ReceivedRestartTimer    uint32 `protobuf:"varint,3,opt,name=received_restart_timer,json=receivedRestartTimer,proto3" json:"received_restart_timer,omitempty"`
}

func (x *BgpGracefulRestartTimers) Reset() {
	*x = BgpGracefulRestartTimers{}
	mi := &file_client_frr_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BgpGracefulRestartTimers) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpGracefulRestartTimers) ProtoMessage() {}

func (x *BgpGracefulRestartTimers) ProtoReflect() protoreflect.Message {
	mi := &file_client_frr_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpGracefulRestartTimers.ProtoReflect.Descriptor instead.
func (*BgpGracefulRestartTimers) Descriptor() ([]byte, []int) {
	return file_client_frr_proto_rawDescGZIP(), []int{22}
}

func (x *BgpGracefulRestartTimers) GetConfiguredRestartTimer() uint32 {
	if x != nil {
		return x.ConfiguredRestartTimer
	}
	return 0
}

func (x *BgpGracefulRestartTimers) GetConfiguredLlgrStaleTime() uint32 {
	if x != nil {
		return x.ConfiguredLlgrStaleTime
	}
	return 0
}

func (x *BgpGracefulRestartTimers) GetReceivedRestartTimer() uint32 {
	if x != nil {
		return x.ReceivedRestartTimer
	}
	return 0
}

type BgpMessageStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DepthInq          uint32 `protobuf:"varint,1,opt,name=depth_inq,json=depthInq,proto3" json:"depth_inq,omitempty"`
	DepthOutq         uint32 `protobuf:"varint,2,opt,name=depth_outq,json=depthOutq,proto3" json:"depth_outq,omitempty"`
	OpensSent         uint32 `protobuf:"varint,3,opt,name=opens_sent,json=opensSent,proto3" json:"opens_sent,omitempty"`
	OpensRecv         uint32 `protobuf:"varint,4,opt,name=opens_recv,json=opensRecv,proto3" json:"opens_recv,omitempty"`
	NotificationsSent uint32 `protobuf:"varint,5,opt,name=notifications_sent,json=notificationsSent,proto3" json:"notifications_sent,omitempty"`
	NotificationsRecv uint32 `protobuf:"varint,6,opt,name=notifications_recv,json=notificationsRecv,proto3" json:"notifications_recv,omitempty"`
	UpdatesSent       uint32 `protobuf:"varint,7,opt,name=updates_sent,json=updatesSent,proto3" json:"updates_sent,omitempty"`
	UpdatesRecv       uint32 `protobuf:"varint,8,opt,name=updates_recv,json=updatesRecv,proto3" json:"updates_recv,omitempty"`
	KeepalivesSent    uint32 `protobuf:"varint,9,opt,name=keepalives_sent,json=keepalivesSent,proto3" json:"keepalives_sent,omitempty"`
	KeepalivesRecv    uint32 `protobuf:"varint,10,opt,name=keepalives_recv,json=keepalivesRecv,proto3" json:"keepalives_recv,omitempty"`
	RouteRefreshSent  uint32 `protobuf:"varint,11,opt,name=route_refresh_sent,json=routeRefreshSent,proto3" json:"route_refresh_sent,omitempty"`
	RouteRefreshRecv  uint32 `protobuf:"varint,12,opt,name=route_refresh_recv,json=routeRefreshRecv,proto3" json:"route_refresh_recv,omitempty"`
	CapabilitySent    uint32 `protobuf:"varint,13,opt,name=capability_sent,json=capabilitySent,proto3" json:"capability_sent,omitempty"`
	CapabilityRecv    uint32 `protobuf:"varint,14,opt,name=capability_recv,json=capabilityRecv,proto3" json:"capability_recv,omitempty"`
	TotalSent         uint32 `protobuf:"varint,15,opt,name=total_sent,json=totalSent,proto3" json:"total_sent,omitempty"`
	TotalRecv         uint32 `protobuf:"varint,16,opt,name=total_recv,json=totalRecv,proto3" json:"total_recv,omitempty"`
}

func (x *BgpMessageStats) Reset() {
	*x = BgpMessageStats{}
	mi := &file_client_frr_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BgpMessageStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpMessageStats) ProtoMessage() {}

func (x *BgpMessageStats) ProtoReflect() protoreflect.Message {
	mi := &file_client_frr_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpMessageStats.ProtoReflect.Descriptor instead.
func (*BgpMessageStats) Descriptor() ([]byte, []int) {
	return file_client_frr_proto_rawDescGZIP(), []int{23}
}

func (x *BgpMessageStats) GetDepthInq() uint32 {
	if x != nil {
		return x.DepthInq
	}
	return 0
}

func (x *BgpMessageStats) GetDepthOutq() uint32 {
	if x != nil {
		return x.DepthOutq
	}
	return 0
}

func (x *BgpMessageStats) GetOpensSent() uint32 {
	if x != nil {
		return x.OpensSent
	}
	return 0
}

func (x *BgpMessageStats) GetOpensRecv() uint32 {
	if x != nil {
		return x.OpensRecv
	}
	return 0
}

func (x *BgpMessageStats) GetNotificationsSent() uint32 {
	if x != nil {
		return x.NotificationsSent
	}
	return 0
}

func (x *BgpMessageStats) GetNotificationsRecv() uint32 {
	if x != nil {
		return x.NotificationsRecv
	}
	return 0
}

func (x *BgpMessageStats) GetUpdatesSent() uint32 {
	if x != nil {
		return x.UpdatesSent
	}
	return 0
}

func (x *BgpMessageStats) GetUpdatesRecv() uint32 {
	if x != nil {
		return x.UpdatesRecv
	}
	return 0
}

func (x *BgpMessageStats) GetKeepalivesSent() uint32 {
	if x != nil {
		return x.KeepalivesSent
	}
	return 0
}

func (x *BgpMessageStats) GetKeepalivesRecv() uint32 {
	if x != nil {
		return x.KeepalivesRecv
	}
	return 0
}

func (x *BgpMessageStats) GetRouteRefreshSent() uint32 {
	if x != nil {
		return x.RouteRefreshSent
	}
	return 0
}

func (x *BgpMessageStats) GetRouteRefreshRecv() uint32 {
	if x != nil {
		return x.RouteRefreshRecv
	}
	return 0
}

func (x *BgpMessageStats) GetCapabilitySent() uint32 {
	if x != nil {
		return x.CapabilitySent
	}
	return 0
}

func (x *BgpMessageStats) GetCapabilityRecv() uint32 {
	if x != nil {
		return x.CapabilityRecv
	}
	return 0
}

func (x *BgpMessageStats) GetTotalSent() uint32 {
	if x != nil {
		return x.TotalSent
	}
	return 0
}

func (x *BgpMessageStats) GetTotalRecv() uint32 {
	if x != nil {
		return x.TotalRecv
	}
	return 0
}

type BgpPrefixStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InboundFiltered     uint32 `protobuf:"varint,1,opt,name=inbound_filtered,json=inboundFiltered,proto3" json:"inbound_filtered,omitempty"`
	AspathLoop          uint32 `protobuf:"varint,2,opt,name=aspath_loop,json=aspathLoop,proto3" json:"aspath_loop,omitempty"`
	OriginatorLoop      uint32 `protobuf:"varint,3,opt,name=originator_loop,json=originatorLoop,proto3" json:"originator_loop,omitempty"`
	ClusterLoop         uint32 `protobuf:"varint,4,opt,name=cluster_loop,json=clusterLoop,proto3" json:"cluster_loop,omitempty"`
	InvalidNextHop      uint32 `protobuf:"varint,5,opt,name=invalid_next_hop,json=invalidNextHop,proto3" json:"invalid_next_hop,omitempty"`
	Withdrawn           uint32 `protobuf:"varint,6,opt,name=withdrawn,proto3" json:"withdrawn,omitempty"`
	AttributesDiscarded uint32 `protobuf:"varint,7,opt,name=attributes_discarded,json=attributesDiscarded,proto3" json:"attributes_discarded,omitempty"`
}

func (x *BgpPrefixStats) Reset() {
	*x = BgpPrefixStats{}
	mi := &file_client_frr_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BgpPrefixStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpPrefixStats) ProtoMessage() {}

func (x *BgpPrefixStats) ProtoReflect() protoreflect.Message {
	mi := &file_client_frr_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpPrefixStats.ProtoReflect.Descriptor instead.
func (*BgpPrefixStats) Descriptor() ([]byte, []int) {
	return file_client_frr_proto_rawDescGZIP(), []int{24}
}

func (x *BgpPrefixStats) GetInboundFiltered() uint32 {
	if x != nil {
		return x.InboundFiltered
	}
	return 0
}

func (x *BgpPrefixStats) GetAspathLoop() uint32 {
	if x != nil {
		return x.AspathLoop
	}
	return 0
}

func (x *BgpPrefixStats) GetOriginatorLoop() uint32 {
	if x != nil {
		return x.OriginatorLoop
	}
	return 0
}

func (x *BgpPrefixStats) GetClusterLoop() uint32 {
	if x != nil {
		return x.ClusterLoop
	}
	return 0
}

func (x *BgpPrefixStats) GetInvalidNextHop() uint32 {
	if x != nil {
		return x.InvalidNextHop
	}
	return 0
}

func (x *BgpPrefixStats) GetWithdrawn() uint32 {
	if x != nil {
		return x.Withdrawn
	}
	return 0
}

func (x *BgpPrefixStats) GetAttributesDiscarded() uint32 {
	if x != nil {
		return x.AttributesDiscarded
	}
	return 0
}

type BgpAddressFamilyInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ipv4Unicast *BgpIpv4UnicastInfo `protobuf:"bytes,1,opt,name=ipv4_unicast,json=ipv4Unicast,proto3" json:"ipv4_unicast,omitempty"`
}

func (x *BgpAddressFamilyInfo) Reset() {
	*x = BgpAddressFamilyInfo{}
	mi := &file_client_frr_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BgpAddressFamilyInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpAddressFamilyInfo) ProtoMessage() {}

func (x *BgpAddressFamilyInfo) ProtoReflect() protoreflect.Message {
	mi := &file_client_frr_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpAddressFamilyInfo.ProtoReflect.Descriptor instead.
func (*BgpAddressFamilyInfo) Descriptor() ([]byte, []int) {
	return file_client_frr_proto_rawDescGZIP(), []int{25}
}

func (x *BgpAddressFamilyInfo) GetIpv4Unicast() *BgpIpv4UnicastInfo {
	if x != nil {
		return x.Ipv4Unicast
	}
	return nil
}

type BgpIpv4UnicastInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommAttriSentToNbr         string `protobuf:"bytes,1,opt,name=comm_attri_sent_to_nbr,json=commAttriSentToNbr,proto3" json:"comm_attri_sent_to_nbr,omitempty"`
	InboundEbgpRequiresPolicy  string `protobuf:"bytes,2,opt,name=inbound_ebgp_requires_policy,json=inboundEbgpRequiresPolicy,proto3" json:"inbound_ebgp_requires_policy,omitempty"`
	OutboundEbgpRequiresPolicy string `protobuf:"bytes,3,opt,name=outbound_ebgp_requires_policy,json=outboundEbgpRequiresPolicy,proto3" json:"outbound_ebgp_requires_policy,omitempty"`
	AcceptedPrefixCounter      uint32 `protobuf:"varint,4,opt,name=accepted_prefix_counter,json=acceptedPrefixCounter,proto3" json:"accepted_prefix_counter,omitempty"`
	RouterAlwaysNextHop        bool   `protobuf:"varint,5,opt,name=router_always_next_hop,json=routerAlwaysNextHop,proto3" json:"router_always_next_hop,omitempty"`
}

func (x *BgpIpv4UnicastInfo) Reset() {
	*x = BgpIpv4UnicastInfo{}
	mi := &file_client_frr_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BgpIpv4UnicastInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpIpv4UnicastInfo) ProtoMessage() {}

func (x *BgpIpv4UnicastInfo) ProtoReflect() protoreflect.Message {
	mi := &file_client_frr_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpIpv4UnicastInfo.ProtoReflect.Descriptor instead.
func (*BgpIpv4UnicastInfo) Descriptor() ([]byte, []int) {
	return file_client_frr_proto_rawDescGZIP(), []int{26}
}

func (x *BgpIpv4UnicastInfo) GetCommAttriSentToNbr() string {
	if x != nil {
		return x.CommAttriSentToNbr
	}
	return ""
}

func (x *BgpIpv4UnicastInfo) GetInboundEbgpRequiresPolicy() string {
	if x != nil {
		return x.InboundEbgpRequiresPolicy
	}
	return ""
}

func (x *BgpIpv4UnicastInfo) GetOutboundEbgpRequiresPolicy() string {
	if x != nil {
		return x.OutboundEbgpRequiresPolicy
	}
	return ""
}

func (x *BgpIpv4UnicastInfo) GetAcceptedPrefixCounter() uint32 {
	if x != nil {
		return x.AcceptedPrefixCounter
	}
	return 0
}

func (x *BgpIpv4UnicastInfo) GetRouterAlwaysNextHop() bool {
	if x != nil {
		return x.RouterAlwaysNextHop
	}
	return false
}

type Routes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Received   *ReceivedRoutes     `protobuf:"bytes,1,opt,name=received,proto3" json:"received,omitempty"`
	Advertised []*AdvertisedRoutes `protobuf:"bytes,2,rep,name=advertised,proto3" json:"advertised,omitempty"`
}

func (x *Routes) Reset() {
	*x = Routes{}
	mi := &file_client_frr_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Routes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Routes) ProtoMessage() {}

func (x *Routes) ProtoReflect() protoreflect.Message {
	mi := &file_client_frr_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Routes.ProtoReflect.Descriptor instead.
func (*Routes) Descriptor() ([]byte, []int) {
	return file_client_frr_proto_rawDescGZIP(), []int{27}
}

func (x *Routes) GetReceived() *ReceivedRoutes {
	if x != nil {
		return x.Received
	}
	return nil
}

func (x *Routes) GetAdvertised() []*AdvertisedRoutes {
	if x != nil {
		return x.Advertised
	}
	return nil
}

type ReceivedRoutes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TotalRoutes uint32                 `protobuf:"varint,1,opt,name=total_routes,json=totalRoutes,proto3" json:"total_routes,omitempty"`
	TotalPaths  uint32                 `protobuf:"varint,2,opt,name=total_paths,json=totalPaths,proto3" json:"total_paths,omitempty"`
	RouterId    string                 `protobuf:"bytes,3,opt,name=router_id,json=routerId,proto3" json:"router_id,omitempty"`
	Routes      map[string]*RouteEntry `protobuf:"bytes,4,rep,name=routes,proto3" json:"routes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ReceivedRoutes) Reset() {
	*x = ReceivedRoutes{}
	mi := &file_client_frr_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReceivedRoutes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReceivedRoutes) ProtoMessage() {}

func (x *ReceivedRoutes) ProtoReflect() protoreflect.Message {
	mi := &file_client_frr_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReceivedRoutes.ProtoReflect.Descriptor instead.
func (*ReceivedRoutes) Descriptor() ([]byte, []int) {
	return file_client_frr_proto_rawDescGZIP(), []int{28}
}

func (x *ReceivedRoutes) GetTotalRoutes() uint32 {
	if x != nil {
		return x.TotalRoutes
	}
	return 0
}

func (x *ReceivedRoutes) GetTotalPaths() uint32 {
	if x != nil {
		return x.TotalPaths
	}
	return 0
}

func (x *ReceivedRoutes) GetRouterId() string {
	if x != nil {
		return x.RouterId
	}
	return ""
}

func (x *ReceivedRoutes) GetRoutes() map[string]*RouteEntry {
	if x != nil {
		return x.Routes
	}
	return nil
}

type RouteEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Paths []*Path `protobuf:"bytes,1,rep,name=paths,proto3" json:"paths,omitempty"`
}

func (x *RouteEntry) Reset() {
	*x = RouteEntry{}
	mi := &file_client_frr_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RouteEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RouteEntry) ProtoMessage() {}

func (x *RouteEntry) ProtoReflect() protoreflect.Message {
	mi := &file_client_frr_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RouteEntry.ProtoReflect.Descriptor instead.
func (*RouteEntry) Descriptor() ([]byte, []int) {
	return file_client_frr_proto_rawDescGZIP(), []int{29}
}

func (x *RouteEntry) GetPaths() []*Path {
	if x != nil {
		return x.Paths
	}
	return nil
}

type Path struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Valid           bool       `protobuf:"varint,1,opt,name=valid,proto3" json:"valid,omitempty"`
	Bestpath        bool       `protobuf:"varint,2,opt,name=bestpath,proto3" json:"bestpath,omitempty"`
	SelectionReason string     `protobuf:"bytes,3,opt,name=selection_reason,json=selectionReason,proto3" json:"selection_reason,omitempty"`
	PathFrom        string     `protobuf:"bytes,4,opt,name=path_from,json=pathFrom,proto3" json:"path_from,omitempty"`
	Prefix          string     `protobuf:"bytes,5,opt,name=prefix,proto3" json:"prefix,omitempty"`
	PrefixLen       uint32     `protobuf:"varint,6,opt,name=prefix_len,json=prefixLen,proto3" json:"prefix_len,omitempty"`
	Network         string     `protobuf:"bytes,7,opt,name=network,proto3" json:"network,omitempty"`
	Version         uint32     `protobuf:"varint,8,opt,name=version,proto3" json:"version,omitempty"`
	Metric          uint32     `protobuf:"varint,9,opt,name=metric,proto3" json:"metric,omitempty"`
	Weight          uint32     `protobuf:"varint,10,opt,name=weight,proto3" json:"weight,omitempty"`
	PeerId          string     `protobuf:"bytes,11,opt,name=peer_id,json=peerId,proto3" json:"peer_id,omitempty"`
	Path            string     `protobuf:"bytes,12,opt,name=path,proto3" json:"path,omitempty"`
	Origin          string     `protobuf:"bytes,13,opt,name=origin,proto3" json:"origin,omitempty"`
	Nexthops        []*Nexthop `protobuf:"bytes,14,rep,name=nexthops,proto3" json:"nexthops,omitempty"`
}

func (x *Path) Reset() {
	*x = Path{}
	mi := &file_client_frr_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Path) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Path) ProtoMessage() {}

func (x *Path) ProtoReflect() protoreflect.Message {
	mi := &file_client_frr_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Path.ProtoReflect.Descriptor instead.
func (*Path) Descriptor() ([]byte, []int) {
	return file_client_frr_proto_rawDescGZIP(), []int{30}
}

func (x *Path) GetValid() bool {
	if x != nil {
		return x.Valid
	}
	return false
}

func (x *Path) GetBestpath() bool {
	if x != nil {
		return x.Bestpath
	}
	return false
}

func (x *Path) GetSelectionReason() string {
	if x != nil {
		return x.SelectionReason
	}
	return ""
}

func (x *Path) GetPathFrom() string {
	if x != nil {
		return x.PathFrom
	}
	return ""
}

func (x *Path) GetPrefix() string {
	if x != nil {
		return x.Prefix
	}
	return ""
}

func (x *Path) GetPrefixLen() uint32 {
	if x != nil {
		return x.PrefixLen
	}
	return 0
}

func (x *Path) GetNetwork() string {
	if x != nil {
		return x.Network
	}
	return ""
}

func (x *Path) GetVersion() uint32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *Path) GetMetric() uint32 {
	if x != nil {
		return x.Metric
	}
	return 0
}

func (x *Path) GetWeight() uint32 {
	if x != nil {
		return x.Weight
	}
	return 0
}

func (x *Path) GetPeerId() string {
	if x != nil {
		return x.PeerId
	}
	return ""
}

func (x *Path) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *Path) GetOrigin() string {
	if x != nil {
		return x.Origin
	}
	return ""
}

func (x *Path) GetNexthops() []*Nexthop {
	if x != nil {
		return x.Nexthops
	}
	return nil
}

type Nexthop struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ip       string `protobuf:"bytes,1,opt,name=ip,proto3" json:"ip,omitempty"`
	Hostname string `protobuf:"bytes,2,opt,name=hostname,proto3" json:"hostname,omitempty"`
	Afi      string `protobuf:"bytes,3,opt,name=afi,proto3" json:"afi,omitempty"`
	Used     bool   `protobuf:"varint,4,opt,name=used,proto3" json:"used,omitempty"`
}

func (x *Nexthop) Reset() {
	*x = Nexthop{}
	mi := &file_client_frr_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Nexthop) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Nexthop) ProtoMessage() {}

func (x *Nexthop) ProtoReflect() protoreflect.Message {
	mi := &file_client_frr_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Nexthop.ProtoReflect.Descriptor instead.
func (*Nexthop) Descriptor() ([]byte, []int) {
	return file_client_frr_proto_rawDescGZIP(), []int{31}
}

func (x *Nexthop) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *Nexthop) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

func (x *Nexthop) GetAfi() string {
	if x != nil {
		return x.Afi
	}
	return ""
}

func (x *Nexthop) GetUsed() bool {
	if x != nil {
		return x.Used
	}
	return false
}

type AdvertisedRoutes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NeighborIp          string                           `protobuf:"bytes,1,opt,name=neighbor_ip,json=neighborIp,proto3" json:"neighbor_ip,omitempty"`
	RouterId            string                           `protobuf:"bytes,2,opt,name=router_id,json=routerId,proto3" json:"router_id,omitempty"`
	BgpTableVersion     uint32                           `protobuf:"varint,3,opt,name=bgp_table_version,json=bgpTableVersion,proto3" json:"bgp_table_version,omitempty"`
	LocalAs             uint32                           `protobuf:"varint,4,opt,name=local_as,json=localAs,proto3" json:"local_as,omitempty"`
	DefaultLocalPref    uint32                           `protobuf:"varint,5,opt,name=default_local_pref,json=defaultLocalPref,proto3" json:"default_local_pref,omitempty"`
	TotalPrefixCount    uint32                           `protobuf:"varint,6,opt,name=total_prefix_count,json=totalPrefixCount,proto3" json:"total_prefix_count,omitempty"`
	FilteredPrefixCount uint32                           `protobuf:"varint,7,opt,name=filtered_prefix_count,json=filteredPrefixCount,proto3" json:"filtered_prefix_count,omitempty"`
	Advertised          map[string]*AdvertisedRouteEntry `protobuf:"bytes,8,rep,name=advertised,proto3" json:"advertised,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *AdvertisedRoutes) Reset() {
	*x = AdvertisedRoutes{}
	mi := &file_client_frr_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AdvertisedRoutes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdvertisedRoutes) ProtoMessage() {}

func (x *AdvertisedRoutes) ProtoReflect() protoreflect.Message {
	mi := &file_client_frr_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdvertisedRoutes.ProtoReflect.Descriptor instead.
func (*AdvertisedRoutes) Descriptor() ([]byte, []int) {
	return file_client_frr_proto_rawDescGZIP(), []int{32}
}

func (x *AdvertisedRoutes) GetNeighborIp() string {
	if x != nil {
		return x.NeighborIp
	}
	return ""
}

func (x *AdvertisedRoutes) GetRouterId() string {
	if x != nil {
		return x.RouterId
	}
	return ""
}

func (x *AdvertisedRoutes) GetBgpTableVersion() uint32 {
	if x != nil {
		return x.BgpTableVersion
	}
	return 0
}

func (x *AdvertisedRoutes) GetLocalAs() uint32 {
	if x != nil {
		return x.LocalAs
	}
	return 0
}

func (x *AdvertisedRoutes) GetDefaultLocalPref() uint32 {
	if x != nil {
		return x.DefaultLocalPref
	}
	return 0
}

func (x *AdvertisedRoutes) GetTotalPrefixCount() uint32 {
	if x != nil {
		return x.TotalPrefixCount
	}
	return 0
}

func (x *AdvertisedRoutes) GetFilteredPrefixCount() uint32 {
	if x != nil {
		return x.FilteredPrefixCount
	}
	return 0
}

func (x *AdvertisedRoutes) GetAdvertised() map[string]*AdvertisedRouteEntry {
	if x != nil {
		return x.Advertised
	}
	return nil
}

type AdvertisedRouteEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AddrPrefix string `protobuf:"bytes,1,opt,name=addr_prefix,json=addrPrefix,proto3" json:"addr_prefix,omitempty"`
	PrefixLen  uint32 `protobuf:"varint,2,opt,name=prefix_len,json=prefixLen,proto3" json:"prefix_len,omitempty"`
	Network    string `protobuf:"bytes,3,opt,name=network,proto3" json:"network,omitempty"`
	NextHop    string `protobuf:"bytes,4,opt,name=next_hop,json=nextHop,proto3" json:"next_hop,omitempty"`
	Metric     uint32 `protobuf:"varint,5,opt,name=metric,proto3" json:"metric,omitempty"`
	Weight     uint32 `protobuf:"varint,6,opt,name=weight,proto3" json:"weight,omitempty"`
	Path       string `protobuf:"bytes,7,opt,name=path,proto3" json:"path,omitempty"`
	Origin     string `protobuf:"bytes,8,opt,name=origin,proto3" json:"origin,omitempty"`
	Valid      bool   `protobuf:"varint,9,opt,name=valid,proto3" json:"valid,omitempty"`
	Best       bool   `protobuf:"varint,10,opt,name=best,proto3" json:"best,omitempty"`
}

func (x *AdvertisedRouteEntry) Reset() {
	*x = AdvertisedRouteEntry{}
	mi := &file_client_frr_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AdvertisedRouteEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdvertisedRouteEntry) ProtoMessage() {}

func (x *AdvertisedRouteEntry) ProtoReflect() protoreflect.Message {
	mi := &file_client_frr_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdvertisedRouteEntry.ProtoReflect.Descriptor instead.
func (*AdvertisedRouteEntry) Descriptor() ([]byte, []int) {
	return file_client_frr_proto_rawDescGZIP(), []int{33}
}

func (x *AdvertisedRouteEntry) GetAddrPrefix() string {
	if x != nil {
		return x.AddrPrefix
	}
	return ""
}

func (x *AdvertisedRouteEntry) GetPrefixLen() uint32 {
	if x != nil {
		return x.PrefixLen
	}
	return 0
}

func (x *AdvertisedRouteEntry) GetNetwork() string {
	if x != nil {
		return x.Network
	}
	return ""
}

func (x *AdvertisedRouteEntry) GetNextHop() string {
	if x != nil {
		return x.NextHop
	}
	return ""
}

func (x *AdvertisedRouteEntry) GetMetric() uint32 {
	if x != nil {
		return x.Metric
	}
	return 0
}

func (x *AdvertisedRouteEntry) GetWeight() uint32 {
	if x != nil {
		return x.Weight
	}
	return 0
}

func (x *AdvertisedRouteEntry) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *AdvertisedRouteEntry) GetOrigin() string {
	if x != nil {
		return x.Origin
	}
	return ""
}

func (x *AdvertisedRouteEntry) GetValid() bool {
	if x != nil {
		return x.Valid
	}
	return false
}

func (x *AdvertisedRouteEntry) GetBest() bool {
	if x != nil {
		return x.Best
	}
	return false
}

type BgpPolicyConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RouteMaps        []*BgpRouteMap      `protobuf:"bytes,1,rep,name=route_maps,json=routeMaps,proto3" json:"route_maps,omitempty"`
	CommunityLists   []*BgpCommunityList `protobuf:"bytes,2,rep,name=community_lists,json=communityLists,proto3" json:"community_lists,omitempty"`
	PrefixLists      []*BgpPrefixList    `protobuf:"bytes,3,rep,name=prefix_lists,json=prefixLists,proto3" json:"prefix_lists,omitempty"`
	PolicyStatistics map[string]string   `protobuf:"bytes,4,rep,name=policy_statistics,json=policyStatistics,proto3" json:"policy_statistics,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *BgpPolicyConfig) Reset() {
	*x = BgpPolicyConfig{}
	mi := &file_client_frr_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BgpPolicyConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpPolicyConfig) ProtoMessage() {}

func (x *BgpPolicyConfig) ProtoReflect() protoreflect.Message {
	mi := &file_client_frr_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpPolicyConfig.ProtoReflect.Descriptor instead.
func (*BgpPolicyConfig) Descriptor() ([]byte, []int) {
	return file_client_frr_proto_rawDescGZIP(), []int{34}
}

func (x *BgpPolicyConfig) GetRouteMaps() []*BgpRouteMap {
	if x != nil {
		return x.RouteMaps
	}
	return nil
}

func (x *BgpPolicyConfig) GetCommunityLists() []*BgpCommunityList {
	if x != nil {
		return x.CommunityLists
	}
	return nil
}

func (x *BgpPolicyConfig) GetPrefixLists() []*BgpPrefixList {
	if x != nil {
		return x.PrefixLists
	}
	return nil
}

func (x *BgpPolicyConfig) GetPolicyStatistics() map[string]string {
	if x != nil {
		return x.PolicyStatistics
	}
	return nil
}

var File_client_frr_proto protoreflect.FileDescriptor

var file_client_frr_proto_rawDesc = []byte{
	0x0a, 0x10, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2f, 0x66, 0x72, 0x72, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x06, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x22, 0xe1, 0x03, 0x0a, 0x0a, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x67, 0x70, 0x12, 0x36, 0x0a, 0x09, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x42, 0x67, 0x70, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x29, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x42, 0x67, 0x70, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x2f, 0x0a, 0x08,
	0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x42, 0x67, 0x70, 0x4e, 0x65, 0x69, 0x67, 0x68,
	0x62, 0x6f, 0x72, 0x52, 0x08, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x12, 0x17, 0x0a,
	0x07, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x69, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x70, 0x65, 0x65, 0x72, 0x49, 0x70, 0x12, 0x30, 0x0a, 0x09, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f,
	0x6d, 0x61, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x2e, 0x42, 0x67, 0x70, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x4d, 0x61, 0x70, 0x52, 0x08,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x4d, 0x61, 0x70, 0x12, 0x3f, 0x0a, 0x0e, 0x63, 0x6f, 0x6d, 0x6d,
	0x75, 0x6e, 0x69, 0x74, 0x79, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x42, 0x67, 0x70, 0x43, 0x6f, 0x6d,
	0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x0d, 0x63, 0x6f, 0x6d, 0x6d,
	0x75, 0x6e, 0x69, 0x74, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x0b, 0x70, 0x72, 0x65,
	0x66, 0x69, 0x78, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x42, 0x67, 0x70, 0x50, 0x72, 0x65, 0x66, 0x69,
	0x78, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x0a, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x73, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x61, 0x73, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x19,
	0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x61, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x07, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x41, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x6d,
	0x6f, 0x74, 0x65, 0x5f, 0x61, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x72, 0x65,
	0x6d, 0x6f, 0x74, 0x65, 0x41, 0x73, 0x12, 0x26, 0x0a, 0x05, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x43,
	0x6c, 0x65, 0x61, 0x72, 0x42, 0x67, 0x70, 0x52, 0x05, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x22, 0x90,
	0x04, 0x0a, 0x0b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x67, 0x70, 0x12, 0x36,
	0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x18, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x42, 0x67, 0x70, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x29, 0x0a, 0x06, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x2e, 0x42, 0x67, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x34, 0x0a, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e,
	0x49, 0x70, 0x76, 0x34, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x53, 0x75, 0x6d, 0x6d, 0x61,
	0x72, 0x79, 0x52, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x3f, 0x0a, 0x0e, 0x73,
	0x68, 0x6f, 0x77, 0x5f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x68, 0x6f,
	0x77, 0x42, 0x67, 0x70, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x52, 0x0d, 0x73,
	0x68, 0x6f, 0x77, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x12, 0x2f, 0x0a, 0x08,
	0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x42, 0x67, 0x70, 0x4e, 0x65, 0x69, 0x67, 0x68,
	0x62, 0x6f, 0x72, 0x52, 0x08, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x12, 0x3c, 0x0a,
	0x0d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x42, 0x67,
	0x70, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0c, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x26, 0x0a, 0x06, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x52, 0x06, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x73, 0x12, 0x2b, 0x0a, 0x11, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x09, 0x52, 0x10,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73,
	0x12, 0x2f, 0x0a, 0x13, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x77,
	0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x09, 0x52, 0x12, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67,
	0x73, 0x22, 0xb0, 0x06, 0x0a, 0x09, 0x42, 0x67, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x2b, 0x0a, 0x11, 0x61, 0x75, 0x74, 0x6f, 0x6e, 0x6f, 0x6d, 0x6f, 0x75, 0x73, 0x5f, 0x73, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x61, 0x75, 0x74, 0x6f,
	0x6e, 0x6f, 0x6d, 0x6f, 0x75, 0x73, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x1b, 0x0a, 0x09,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x31, 0x0a, 0x09, 0x6e, 0x65, 0x69,
	0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x42, 0x67, 0x70, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f,
	0x72, 0x52, 0x09, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x12, 0x25, 0x0a, 0x0e,
	0x6b, 0x65, 0x65, 0x70, 0x61, 0x6c, 0x69, 0x76, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x6b, 0x65, 0x65, 0x70, 0x61, 0x6c, 0x69, 0x76, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x68, 0x6f, 0x6c, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x68, 0x6f, 0x6c, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x35, 0x0a, 0x16, 0x72, 0x65, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x15, 0x72, 0x65, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x12, 0x2f, 0x0a, 0x13, 0x72, 0x65, 0x64, 0x69, 0x73,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x72, 0x65, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x12, 0x2f, 0x0a, 0x13, 0x72, 0x65, 0x64, 0x69,
	0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x5f, 0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x72, 0x65, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x4b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x12, 0x2d, 0x0a, 0x12, 0x72, 0x65, 0x64,
	0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x72, 0x65, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x12, 0x32, 0x0a, 0x0a, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x5f, 0x6d, 0x61, 0x70, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x42, 0x67, 0x70, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x4d, 0x61,
	0x70, 0x52, 0x09, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x4d, 0x61, 0x70, 0x73, 0x12, 0x41, 0x0a, 0x0f,
	0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x18,
	0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x42,
	0x67, 0x70, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x0e, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x73, 0x12,
	0x38, 0x0a, 0x0c, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x18,
	0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x42,
	0x67, 0x70, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x0b, 0x70, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x4c, 0x69, 0x73, 0x74, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x61, 0x78,
	0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0c, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x50, 0x61, 0x74, 0x68, 0x73, 0x12, 0x37,
	0x0a, 0x17, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x76, 0x65,
	0x5f, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x16, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x76, 0x65, 0x44,
	0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x64, 0x65, 0x74, 0x65, 0x72,
	0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x69, 0x63, 0x5f, 0x6d, 0x65, 0x64, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x10, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x4d, 0x65, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x61, 0x6c, 0x77, 0x61, 0x79, 0x73, 0x5f, 0x63,
	0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x5f, 0x6d, 0x65, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x10, 0x61, 0x6c, 0x77, 0x61, 0x79, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x4d,
	0x65, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x6c, 0x6f, 0x67, 0x5f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x12, 0x6c, 0x6f, 0x67, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x73, 0x22, 0xb9, 0x05, 0x0a, 0x12, 0x49, 0x70, 0x76, 0x34, 0x55, 0x6e, 0x69,
	0x63, 0x61, 0x73, 0x74, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x73, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x61, 0x73, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x72, 0x66, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x05, 0x76, 0x72, 0x66, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x72, 0x66,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x72, 0x66, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x69, 0x62, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x72, 0x69, 0x62, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x69, 0x62, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x72, 0x69, 0x62, 0x4d, 0x65, 0x6d, 0x6f, 0x72,
	0x79, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x65, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x70, 0x65, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x1e, 0x0a, 0x0a, 0x70, 0x65, 0x65, 0x72, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0a, 0x70, 0x65, 0x65, 0x72, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x12,
	0x26, 0x0a, 0x0e, 0x70, 0x65, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x70, 0x65, 0x65, 0x72, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x70, 0x65, 0x65, 0x72, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0f, 0x70, 0x65, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x6f, 0x72,
	0x79, 0x12, 0x3b, 0x0a, 0x05, 0x70, 0x65, 0x65, 0x72, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x25, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x49, 0x70, 0x76, 0x34, 0x55, 0x6e,
	0x69, 0x63, 0x61, 0x73, 0x74, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x2e, 0x50, 0x65, 0x65,
	0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x70, 0x65, 0x65, 0x72, 0x73, 0x12, 0x20,
	0x0a, 0x0b, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x50, 0x65, 0x65, 0x72, 0x73, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0b, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x50, 0x65, 0x65, 0x72, 0x73,
	0x12, 0x26, 0x0a, 0x0e, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x50, 0x65, 0x65,
	0x72, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61,
	0x79, 0x65, 0x64, 0x50, 0x65, 0x65, 0x72, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x50, 0x65, 0x65, 0x72, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x50, 0x65, 0x65, 0x72, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x64, 0x79, 0x6e, 0x61,
	0x6d, 0x69, 0x63, 0x50, 0x65, 0x65, 0x72, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c,
	0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x50, 0x65, 0x65, 0x72, 0x73, 0x12, 0x33, 0x0a, 0x08,
	0x62, 0x65, 0x73, 0x74, 0x50, 0x61, 0x74, 0x68, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x42, 0x65, 0x73, 0x74, 0x50, 0x61, 0x74, 0x68,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x08, 0x62, 0x65, 0x73, 0x74, 0x50, 0x61, 0x74,
	0x68, 0x1a, 0x4d, 0x0a, 0x0a, 0x50, 0x65, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x29, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x53, 0x75,
	0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0x85, 0x05, 0x0a, 0x0b, 0x50, 0x65, 0x65, 0x72, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79,
	0x12, 0x28, 0x0a, 0x0f, 0x73, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x6f, 0x66, 0x74, 0x77,
	0x61, 0x72, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65,
	0x6d, 0x6f, 0x74, 0x65, 0x41, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x72, 0x65,
	0x6d, 0x6f, 0x74, 0x65, 0x41, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x41,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x41, 0x73,
	0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x73,
	0x67, 0x52, 0x63, 0x76, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x6d, 0x73, 0x67,
	0x52, 0x63, 0x76, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x73, 0x67, 0x53, 0x65, 0x6e, 0x74, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x6d, 0x73, 0x67, 0x53, 0x65, 0x6e, 0x74, 0x12, 0x22,
	0x0a, 0x0c, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6f, 0x75, 0x74, 0x71, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x04, 0x6f, 0x75, 0x74, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x6e, 0x71, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x03, 0x69, 0x6e, 0x71, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x65, 0x65, 0x72,
	0x55, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x65,
	0x65, 0x72, 0x55, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x70, 0x65, 0x65, 0x72,
	0x55, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x4d, 0x73, 0x65, 0x63, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0e, 0x70, 0x65, 0x65, 0x72, 0x55, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x4d, 0x73, 0x65, 0x63,
	0x12, 0x3e, 0x0a, 0x1a, 0x70, 0x65, 0x65, 0x72, 0x55, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x45, 0x73,
	0x74, 0x61, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x1a, 0x70, 0x65, 0x65, 0x72, 0x55, 0x70, 0x74, 0x69, 0x6d, 0x65,
	0x45, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x45, 0x70, 0x6f, 0x63, 0x68,
	0x12, 0x16, 0x0a, 0x06, 0x70, 0x66, 0x78, 0x52, 0x63, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x06, 0x70, 0x66, 0x78, 0x52, 0x63, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x66, 0x78, 0x53,
	0x6e, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x70, 0x66, 0x78, 0x53, 0x6e, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x65, 0x65, 0x72, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x65, 0x65, 0x72, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x36, 0x0a, 0x16, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x45, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x16, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x45, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x12, 0x2e, 0x0a, 0x12,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x44, 0x72, 0x6f, 0x70, 0x70,
	0x65, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x44, 0x72, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x64, 0x65, 0x73, 0x63, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63,
	0x12, 0x16, 0x0a, 0x06, 0x69, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x69, 0x64, 0x54, 0x79, 0x70, 0x65, 0x22, 0x39, 0x0a, 0x0f, 0x42, 0x65, 0x73, 0x74,
	0x50, 0x61, 0x74, 0x68, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x6d,
	0x75, 0x6c, 0x74, 0x69, 0x50, 0x61, 0x74, 0x68, 0x52, 0x65, 0x6c, 0x61, 0x78, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0e, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x50, 0x61, 0x74, 0x68, 0x52, 0x65,
	0x6c, 0x61, 0x78, 0x22, 0x58, 0x0a, 0x08, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x42, 0x67, 0x70, 0x12,
	0x12, 0x0a, 0x04, 0x73, 0x6f, 0x66, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x73,
	0x6f, 0x66, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x22, 0xe1, 0x05,
	0x0a, 0x0b, 0x42, 0x67, 0x70, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x12, 0x17, 0x0a,
	0x07, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x69, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x70, 0x65, 0x65, 0x72, 0x49, 0x70, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65,
	0x5f, 0x61, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x72, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x41, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x12, 0x31, 0x0a, 0x06, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x42, 0x67, 0x70, 0x4e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x73, 0x52, 0x06, 0x74, 0x69,
	0x6d, 0x65, 0x72, 0x73, 0x12, 0x3b, 0x0a, 0x0a, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x6d, 0x61,
	0x70, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x2e, 0x42, 0x67, 0x70, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x52, 0x6f, 0x75,
	0x74, 0x65, 0x4d, 0x61, 0x70, 0x73, 0x52, 0x09, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x4d, 0x61, 0x70,
	0x73, 0x12, 0x41, 0x0a, 0x0c, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x2e, 0x42, 0x67, 0x70, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x50, 0x72, 0x65, 0x66,
	0x69, 0x78, 0x4c, 0x69, 0x73, 0x74, 0x73, 0x52, 0x0b, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c,
	0x69, 0x73, 0x74, 0x73, 0x12, 0x22, 0x0a, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x68, 0x6f, 0x70,
	0x5f, 0x73, 0x65, 0x6c, 0x66, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x6e, 0x65, 0x78,
	0x74, 0x48, 0x6f, 0x70, 0x53, 0x65, 0x6c, 0x66, 0x12, 0x31, 0x0a, 0x14, 0x73, 0x6f, 0x66, 0x74,
	0x5f, 0x72, 0x65, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x73, 0x6f, 0x66, 0x74, 0x52, 0x65, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x73,
	0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x73,
	0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x25, 0x0a, 0x0e,
	0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x50, 0x72, 0x65,
	0x66, 0x69, 0x78, 0x12, 0x2c, 0x0a, 0x12, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x70,
	0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x6f, 0x75, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x10, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4f, 0x75,
	0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x61, 0x73, 0x5f, 0x69, 0x6e, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x61, 0x73, 0x49, 0x6e,
	0x12, 0x16, 0x0a, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x62, 0x67, 0x70,
	0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x68, 0x6f, 0x70, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0c, 0x65, 0x62, 0x67, 0x70, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x68, 0x6f, 0x70, 0x12, 0x2a, 0x0a,
	0x11, 0x65, 0x62, 0x67, 0x70, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x68, 0x6f, 0x70, 0x5f, 0x74,
	0x74, 0x6c, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x65, 0x62, 0x67, 0x70, 0x4d, 0x75,
	0x6c, 0x74, 0x69, 0x68, 0x6f, 0x70, 0x54, 0x74, 0x6c, 0x12, 0x36, 0x0a, 0x17, 0x64, 0x69, 0x73,
	0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x63,
	0x68, 0x65, 0x63, 0x6b, 0x18, 0x12, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x64, 0x69, 0x73, 0x61,
	0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x22, 0x72, 0x0a, 0x11, 0x42, 0x67, 0x70, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x54, 0x69, 0x6d, 0x65, 0x72, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x6b, 0x65, 0x65, 0x70, 0x61, 0x6c,
	0x69, 0x76, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x6b, 0x65, 0x65, 0x70, 0x61,
	0x6c, 0x69, 0x76, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x6f, 0x6c, 0x64, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x68, 0x6f, 0x6c, 0x64, 0x74, 0x69, 0x6d, 0x65,
	0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x5f, 0x72, 0x65, 0x74, 0x72,
	0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x52, 0x65, 0x74, 0x72, 0x79, 0x22, 0x5c, 0x0a, 0x14, 0x42, 0x67, 0x70, 0x4e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x4d, 0x61, 0x70, 0x73, 0x12, 0x20, 0x0a,
	0x0c, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x70, 0x5f, 0x69, 0x6e, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x4d, 0x61, 0x70, 0x49, 0x6e, 0x12,
	0x22, 0x0a, 0x0d, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x70, 0x5f, 0x6f, 0x75, 0x74,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x4d, 0x61, 0x70,
	0x4f, 0x75, 0x74, 0x22, 0x66, 0x0a, 0x16, 0x42, 0x67, 0x70, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x69, 0x73, 0x74, 0x73, 0x12, 0x24, 0x0a,
	0x0e, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x69, 0x6e, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x69, 0x73,
	0x74, 0x49, 0x6e, 0x12, 0x26, 0x0a, 0x0f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x5f, 0x6f, 0x75, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x75, 0x74, 0x22, 0x90, 0x02, 0x0a, 0x0b,
	0x42, 0x67, 0x70, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x4d, 0x61, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x2e, 0x42, 0x67, 0x70, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x4d, 0x61, 0x70,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x43,
	0x0a, 0x10, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x2e, 0x42, 0x67, 0x70, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x4d, 0x61, 0x70, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x52, 0x0f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x37, 0x0a, 0x0b, 0x73, 0x65, 0x74, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x2e, 0x42, 0x67, 0x70, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x4d, 0x61, 0x70, 0x53, 0x65, 0x74,
	0x52, 0x0a, 0x73, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x20, 0x0a, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x52,
	0x0a, 0x10, 0x42, 0x67, 0x70, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x4d, 0x61, 0x70, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x22, 0xa7, 0x01, 0x0a, 0x0e, 0x42, 0x67, 0x70, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x4d,
	0x61, 0x70, 0x53, 0x65, 0x74, 0x12, 0x30, 0x0a, 0x14, 0x73, 0x65, 0x74, 0x5f, 0x6c, 0x6f, 0x63,
	0x61, 0x6c, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x12, 0x73, 0x65, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x50, 0x72, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x74, 0x5f, 0x6d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x73, 0x65, 0x74,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65, 0x74, 0x5f, 0x63, 0x6f,
	0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73,
	0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x73,
	0x65, 0x74, 0x5f, 0x6e, 0x65, 0x78, 0x74, 0x68, 0x6f, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x73, 0x65, 0x74, 0x4e, 0x65, 0x78, 0x74, 0x68, 0x6f, 0x70, 0x22, 0xb4, 0x01, 0x0a,
	0x10, 0x42, 0x67, 0x70, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63,
	0x65, 0x12, 0x31, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x19, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x42, 0x67, 0x70, 0x52, 0x6f,
	0x75, 0x74, 0x65, 0x4d, 0x61, 0x70, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74,
	0x79, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x22, 0xaa, 0x01, 0x0a, 0x0d, 0x42, 0x67, 0x70, 0x50, 0x72, 0x65, 0x66, 0x69,
	0x78, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x71,
	0x75, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x73, 0x65, 0x71,
	0x75, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x42,
	0x67, 0x70, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x4d, 0x61, 0x70, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x72, 0x65, 0x66,
	0x69, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78,
	0x12, 0x0e, 0x0a, 0x02, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x6c, 0x65,
	0x12, 0x0e, 0x0a, 0x02, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x67, 0x65,
	0x22, 0xaf, 0x01, 0x0a, 0x0e, 0x53, 0x68, 0x6f, 0x77, 0x42, 0x67, 0x70, 0x53, 0x75, 0x6d, 0x6d,
	0x61, 0x72, 0x79, 0x12, 0x43, 0x0a, 0x09, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e,
	0x53, 0x68, 0x6f, 0x77, 0x42, 0x67, 0x70, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x2e, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x1a, 0x58, 0x0a, 0x0e, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x30, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x2e, 0x42, 0x67, 0x70, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0xf9, 0x02, 0x0a, 0x12, 0x42, 0x67, 0x70, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72,
	0x79, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x61, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x02, 0x61, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x72,
	0x69, 0x62, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0a, 0x72, 0x69, 0x62, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a,
	0x72, 0x69, 0x62, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x09, 0x72, 0x69, 0x62, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x70,
	0x65, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x09, 0x70, 0x65, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x65,
	0x65, 0x72, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0a, 0x70, 0x65, 0x65, 0x72, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x12, 0x3b, 0x0a, 0x05, 0x70,
	0x65, 0x65, 0x72, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x2e, 0x42, 0x67, 0x70, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x05, 0x70, 0x65, 0x65, 0x72, 0x73, 0x1a, 0x54, 0x0a, 0x0a, 0x50, 0x65, 0x65, 0x72,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x30, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x2e, 0x42, 0x67, 0x70, 0x50, 0x65, 0x65, 0x72, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xe8,
	0x01, 0x0a, 0x12, 0x42, 0x67, 0x70, 0x50, 0x65, 0x65, 0x72, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72,
	0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f,
	0x61, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65,
	0x41, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x61, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x41, 0x73, 0x12, 0x14, 0x0a,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x06, 0x75, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x70,
	0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x52, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x73,
	0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x70, 0x72, 0x65, 0x66, 0x69,
	0x78, 0x53, 0x65, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x70,
	0x66, 0x78, 0x5f, 0x72, 0x63, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x50, 0x66, 0x78, 0x52, 0x63, 0x64, 0x22, 0xb0, 0x01, 0x0a, 0x10, 0x53, 0x68,
	0x6f, 0x77, 0x42, 0x67, 0x70, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x12, 0x45,
	0x0a, 0x09, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x27, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x68, 0x6f, 0x77, 0x42,
	0x67, 0x70, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x6e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x73, 0x1a, 0x55, 0x0a, 0x0e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f,
	0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2d, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x2e, 0x42, 0x67, 0x70, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xd0, 0x12, 0x0a,
	0x0f, 0x42, 0x67, 0x70, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x61, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x08, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x41, 0x73, 0x12, 0x19, 0x0a,
	0x08, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x61, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x07, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x41, 0x73, 0x12, 0x3b, 0x0a, 0x1b, 0x6c, 0x6f, 0x63, 0x61,
	0x6c, 0x5f, 0x61, 0x73, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x5f, 0x61, 0x73, 0x5f,
	0x64, 0x75, 0x61, 0x6c, 0x5f, 0x61, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x6c,
	0x6f, 0x63, 0x61, 0x6c, 0x41, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x41, 0x73, 0x44,
	0x75, 0x61, 0x6c, 0x41, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x6e, 0x62, 0x72, 0x5f, 0x65, 0x78, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0f, 0x6e, 0x62, 0x72, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4c, 0x69, 0x6e,
	0x6b, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x52, 0x6f, 0x6c, 0x65,
	0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x52, 0x6f, 0x6c,
	0x65, 0x12, 0x19, 0x0a, 0x08, 0x6e, 0x62, 0x72, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6e, 0x62, 0x72, 0x44, 0x65, 0x73, 0x63, 0x12, 0x1a, 0x0a, 0x08,
	0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x67, 0x70, 0x5f,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x62,
	0x67, 0x70, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x10, 0x72, 0x65, 0x6d,
	0x6f, 0x74, 0x65, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x52, 0x6f, 0x75, 0x74, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6c, 0x6f,
	0x63, 0x61, 0x6c, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x62,
	0x67, 0x70, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x62, 0x67, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x2d, 0x0a, 0x13, 0x62, 0x67, 0x70, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x72, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x62, 0x67, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x4c,
	0x61, 0x73, 0x74, 0x52, 0x65, 0x61, 0x64, 0x12, 0x2f, 0x0a, 0x14, 0x62, 0x67, 0x70, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x72, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x77, 0x72, 0x69, 0x74, 0x65, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x62, 0x67, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x4c,
	0x61, 0x73, 0x74, 0x57, 0x72, 0x69, 0x74, 0x65, 0x12, 0x45, 0x0a, 0x20, 0x62, 0x67, 0x70, 0x5f,
	0x69, 0x6e, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x65, 0x6c, 0x61, 0x70, 0x73, 0x65,
	0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6d, 0x73, 0x65, 0x63, 0x73, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x1b, 0x62, 0x67, 0x70, 0x49, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45,
	0x6c, 0x61, 0x70, 0x73, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x73, 0x65, 0x63, 0x73, 0x12,
	0x4d, 0x0a, 0x24, 0x62, 0x67, 0x70, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x64, 0x5f, 0x68, 0x6f, 0x6c, 0x64, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x5f, 0x6d, 0x73, 0x65, 0x63, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x04, 0x52, 0x1f, 0x62,
	0x67, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65,
	0x64, 0x48, 0x6f, 0x6c, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x73, 0x65, 0x63, 0x73, 0x12, 0x60,
	0x0a, 0x2e, 0x62, 0x67, 0x70, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x75, 0x72, 0x65, 0x64, 0x5f, 0x6b, 0x65, 0x65, 0x70, 0x5f, 0x61, 0x6c, 0x69, 0x76,
	0x65, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x5f, 0x6d, 0x73, 0x65, 0x63, 0x73,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x04, 0x52, 0x28, 0x62, 0x67, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x72,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x64, 0x4b, 0x65, 0x65, 0x70, 0x41, 0x6c,
	0x69, 0x76, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x4d, 0x73, 0x65, 0x63, 0x73,
	0x12, 0x38, 0x0a, 0x19, 0x62, 0x67, 0x70, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x5f, 0x68, 0x6f,
	0x6c, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6d, 0x73, 0x65, 0x63, 0x73, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x15, 0x62, 0x67, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x48, 0x6f, 0x6c,
	0x64, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x73, 0x65, 0x63, 0x73, 0x12, 0x4b, 0x0a, 0x23, 0x62, 0x67,
	0x70, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x5f, 0x6b, 0x65, 0x65, 0x70, 0x5f, 0x61, 0x6c, 0x69,
	0x76, 0x65, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x5f, 0x6d, 0x73, 0x65, 0x63,
	0x73, 0x18, 0x13, 0x20, 0x01, 0x28, 0x04, 0x52, 0x1e, 0x62, 0x67, 0x70, 0x54, 0x69, 0x6d, 0x65,
	0x72, 0x4b, 0x65, 0x65, 0x70, 0x41, 0x6c, 0x69, 0x76, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x4d, 0x73, 0x65, 0x63, 0x73, 0x12, 0x33, 0x0a, 0x16, 0x62, 0x67, 0x70, 0x5f, 0x74,
	0x63, 0x70, 0x5f, 0x6d, 0x73, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65,
	0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x62, 0x67, 0x70, 0x54, 0x63, 0x70, 0x4d,
	0x73, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x64, 0x12, 0x2b, 0x0a, 0x12,
	0x62, 0x67, 0x70, 0x5f, 0x74, 0x63, 0x70, 0x5f, 0x6d, 0x73, 0x73, 0x5f, 0x73, 0x79, 0x6e, 0x63,
	0x65, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x62, 0x67, 0x70, 0x54, 0x63, 0x70,
	0x4d, 0x73, 0x73, 0x53, 0x79, 0x6e, 0x63, 0x65, 0x64, 0x12, 0x4d, 0x0a, 0x23, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x64, 0x65, 0x64, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68,
	0x18, 0x16, 0x20, 0x01, 0x28, 0x08, 0x52, 0x20, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x73, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x6b, 0x0a, 0x33, 0x62, 0x67, 0x70, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x64,
	0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x61, 0x64, 0x76,
	0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x73, 0x65, 0x63, 0x18,
	0x17, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x2e, 0x62, 0x67, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x41, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x53, 0x65, 0x63, 0x12, 0x52, 0x0a, 0x15, 0x67, 0x72, 0x61, 0x63, 0x65, 0x66, 0x75,
	0x6c, 0x5f, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x18,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x42, 0x67,
	0x70, 0x47, 0x72, 0x61, 0x63, 0x65, 0x66, 0x75, 0x6c, 0x52, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x13, 0x67, 0x72, 0x61, 0x63, 0x65, 0x66, 0x75, 0x6c, 0x52, 0x65,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3c, 0x0a, 0x0d, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x42, 0x67, 0x70, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x0c, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x39, 0x0a, 0x0c, 0x70, 0x72, 0x65, 0x66, 0x69,
	0x78, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x42, 0x67, 0x70, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78,
	0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x0b, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x53, 0x74, 0x61,
	0x74, 0x73, 0x12, 0x53, 0x0a, 0x27, 0x6d, 0x69, 0x6e, 0x5f, 0x62, 0x74, 0x77, 0x6e, 0x5f, 0x61,
	0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x75, 0x6e,
	0x73, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x5f, 0x6d, 0x73, 0x65, 0x63, 0x73, 0x18, 0x1b, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x22, 0x6d, 0x69, 0x6e, 0x42, 0x74, 0x77, 0x6e, 0x41, 0x64, 0x76, 0x65,
	0x72, 0x74, 0x69, 0x73, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x6e, 0x73, 0x54, 0x69, 0x6d,
	0x65, 0x72, 0x4d, 0x73, 0x65, 0x63, 0x73, 0x12, 0x4c, 0x0a, 0x13, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x5f, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x1c,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x42, 0x67,
	0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x11, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x46, 0x61, 0x6d, 0x69, 0x6c,
	0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x37, 0x0a, 0x17, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x65, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64,
	0x18, 0x1d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x16, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x45, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x12, 0x2f,
	0x0a, 0x13, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x64, 0x72,
	0x6f, 0x70, 0x70, 0x65, 0x64, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x44, 0x72, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x12,
	0x33, 0x0a, 0x16, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x74, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x72, 0x5f, 0x6d, 0x73, 0x65, 0x63, 0x73, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x13, 0x6c, 0x61, 0x73, 0x74, 0x52, 0x65, 0x73, 0x65, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x4d,
	0x73, 0x65, 0x63, 0x73, 0x12, 0x29, 0x0a, 0x11, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x73,
	0x65, 0x74, 0x5f, 0x64, 0x75, 0x65, 0x5f, 0x74, 0x6f, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x6c, 0x61, 0x73, 0x74, 0x52, 0x65, 0x73, 0x65, 0x74, 0x44, 0x75, 0x65, 0x54, 0x6f, 0x12,
	0x26, 0x0a, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x74, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x21, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x52, 0x65,
	0x73, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x73, 0x6f, 0x66, 0x74, 0x77,
	0x61, 0x72, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x22, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x73, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x41, 0x0a, 0x1e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x62,
	0x67, 0x70, 0x5f, 0x6e, 0x62, 0x72, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x68, 0x6f, 0x70, 0x73, 0x5f,
	0x61, 0x77, 0x61, 0x79, 0x18, 0x23, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x19, 0x65, 0x78, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x42, 0x67, 0x70, 0x4e, 0x62, 0x72, 0x4d, 0x61, 0x78, 0x48, 0x6f, 0x70,
	0x73, 0x41, 0x77, 0x61, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x6c, 0x6f,
	0x63, 0x61, 0x6c, 0x18, 0x24, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x68, 0x6f, 0x73, 0x74, 0x4c,
	0x6f, 0x63, 0x61, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6c, 0x6f, 0x63,
	0x61, 0x6c, 0x18, 0x25, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x70, 0x6f, 0x72, 0x74, 0x4c, 0x6f,
	0x63, 0x61, 0x6c, 0x12, 0x21, 0x0a, 0x0c, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x66, 0x6f, 0x72, 0x65,
	0x69, 0x67, 0x6e, 0x18, 0x26, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x68, 0x6f, 0x73, 0x74, 0x46,
	0x6f, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x66,
	0x6f, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x18, 0x27, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x70, 0x6f,
	0x72, 0x74, 0x46, 0x6f, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x6e, 0x65, 0x78,
	0x74, 0x68, 0x6f, 0x70, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6e, 0x65, 0x78, 0x74,
	0x68, 0x6f, 0x70, 0x12, 0x25, 0x0a, 0x0e, 0x6e, 0x65, 0x78, 0x74, 0x68, 0x6f, 0x70, 0x5f, 0x67,
	0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x18, 0x29, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78,
	0x74, 0x68, 0x6f, 0x70, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x12, 0x23, 0x0a, 0x0d, 0x6e, 0x65,
	0x78, 0x74, 0x68, 0x6f, 0x70, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x18, 0x2a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x6e, 0x65, 0x78, 0x74, 0x68, 0x6f, 0x70, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x12,
	0x25, 0x0a, 0x0e, 0x62, 0x67, 0x70, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x62, 0x67, 0x70, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x13, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x5f, 0x72, 0x65, 0x74, 0x72, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x18, 0x2c, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x11, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x52, 0x65, 0x74, 0x72,
	0x79, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x12, 0x43, 0x0a, 0x1f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x5f, 0x64, 0x75, 0x65,
	0x5f, 0x69, 0x6e, 0x5f, 0x6d, 0x73, 0x65, 0x63, 0x73, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x1a, 0x6e, 0x65, 0x78, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x72, 0x44, 0x75, 0x65, 0x49, 0x6e, 0x4d, 0x73, 0x65, 0x63, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x72,
	0x65, 0x61, 0x64, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x72, 0x65, 0x61, 0x64, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x12, 0x21, 0x0a, 0x0c,
	0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x18, 0x2f, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x77, 0x72, 0x69, 0x74, 0x65, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x22,
	0xfa, 0x03, 0x0a, 0x16, 0x42, 0x67, 0x70, 0x47, 0x72, 0x61, 0x63, 0x65, 0x66, 0x75, 0x6c, 0x52,
	0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x57, 0x0a, 0x0f, 0x65, 0x6e,
	0x64, 0x5f, 0x6f, 0x66, 0x5f, 0x72, 0x69, 0x62, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x42, 0x67, 0x70,
	0x47, 0x72, 0x61, 0x63, 0x65, 0x66, 0x75, 0x6c, 0x52, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x49,
	0x6e, 0x66, 0x6f, 0x2e, 0x45, 0x6e, 0x64, 0x4f, 0x66, 0x52, 0x69, 0x62, 0x53, 0x65, 0x6e, 0x64,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x65, 0x6e, 0x64, 0x4f, 0x66, 0x52, 0x69, 0x62, 0x53,
	0x65, 0x6e, 0x64, 0x12, 0x57, 0x0a, 0x0f, 0x65, 0x6e, 0x64, 0x5f, 0x6f, 0x66, 0x5f, 0x72, 0x69,
	0x62, 0x5f, 0x72, 0x65, 0x63, 0x76, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x42, 0x67, 0x70, 0x47, 0x72, 0x61, 0x63, 0x65, 0x66, 0x75,
	0x6c, 0x52, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x45, 0x6e, 0x64,
	0x4f, 0x66, 0x52, 0x69, 0x62, 0x52, 0x65, 0x63, 0x76, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c,
	0x65, 0x6e, 0x64, 0x4f, 0x66, 0x52, 0x69, 0x62, 0x52, 0x65, 0x63, 0x76, 0x12, 0x22, 0x0a, 0x0d,
	0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x67, 0x72, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x47, 0x72, 0x4d, 0x6f, 0x64, 0x65,
	0x12, 0x24, 0x0a, 0x0e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x67, 0x72, 0x5f, 0x6d, 0x6f,
	0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65,
	0x47, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x13, 0x0a, 0x05, 0x72, 0x5f, 0x62, 0x69, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x72, 0x42, 0x69, 0x74, 0x12, 0x13, 0x0a, 0x05, 0x6e,
	0x5f, 0x62, 0x69, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x6e, 0x42, 0x69, 0x74,
	0x12, 0x38, 0x0a, 0x06, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x42, 0x67, 0x70, 0x47, 0x72, 0x61,
	0x63, 0x65, 0x66, 0x75, 0x6c, 0x52, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x72, 0x73, 0x52, 0x06, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x73, 0x1a, 0x3f, 0x0a, 0x11, 0x45, 0x6e,
	0x64, 0x4f, 0x66, 0x52, 0x69, 0x62, 0x53, 0x65, 0x6e, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3f, 0x0a, 0x11, 0x45,
	0x6e, 0x64, 0x4f, 0x66, 0x52, 0x69, 0x62, 0x52, 0x65, 0x63, 0x76, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xc7, 0x01, 0x0a,
	0x18, 0x42, 0x67, 0x70, 0x47, 0x72, 0x61, 0x63, 0x65, 0x66, 0x75, 0x6c, 0x52, 0x65, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x73, 0x12, 0x38, 0x0a, 0x18, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x16, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x64, 0x52, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x72, 0x12, 0x3b, 0x0a, 0x1a, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65,
	0x64, 0x5f, 0x6c, 0x6c, 0x67, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x6c, 0x65, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x17, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75,
	0x72, 0x65, 0x64, 0x4c, 0x6c, 0x67, 0x72, 0x53, 0x74, 0x61, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x34, 0x0a, 0x16, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x14, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x52, 0x65, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x22, 0xed, 0x04, 0x0a, 0x0f, 0x42, 0x67, 0x70, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65,
	0x70, 0x74, 0x68, 0x5f, 0x69, 0x6e, 0x71, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x64,
	0x65, 0x70, 0x74, 0x68, 0x49, 0x6e, 0x71, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x65, 0x70, 0x74, 0x68,
	0x5f, 0x6f, 0x75, 0x74, 0x71, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x64, 0x65, 0x70,
	0x74, 0x68, 0x4f, 0x75, 0x74, 0x71, 0x12, 0x1d, 0x0a, 0x0a, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x5f,
	0x73, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x6e,
	0x73, 0x53, 0x65, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x5f, 0x72,
	0x65, 0x63, 0x76, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x6e, 0x73,
	0x52, 0x65, 0x63, 0x76, 0x12, 0x2d, 0x0a, 0x12, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x73, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x11, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53,
	0x65, 0x6e, 0x74, 0x12, 0x2d, 0x0a, 0x12, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x72, 0x65, 0x63, 0x76, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x11, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65,
	0x63, 0x76, 0x12, 0x21, 0x0a, 0x0c, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x5f, 0x73, 0x65,
	0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x73, 0x53, 0x65, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73,
	0x5f, 0x72, 0x65, 0x63, 0x76, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x73, 0x52, 0x65, 0x63, 0x76, 0x12, 0x27, 0x0a, 0x0f, 0x6b, 0x65, 0x65, 0x70,
	0x61, 0x6c, 0x69, 0x76, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0e, 0x6b, 0x65, 0x65, 0x70, 0x61, 0x6c, 0x69, 0x76, 0x65, 0x73, 0x53, 0x65, 0x6e,
	0x74, 0x12, 0x27, 0x0a, 0x0f, 0x6b, 0x65, 0x65, 0x70, 0x61, 0x6c, 0x69, 0x76, 0x65, 0x73, 0x5f,
	0x72, 0x65, 0x63, 0x76, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x6b, 0x65, 0x65, 0x70,
	0x61, 0x6c, 0x69, 0x76, 0x65, 0x73, 0x52, 0x65, 0x63, 0x76, 0x12, 0x2c, 0x0a, 0x12, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f, 0x73, 0x65, 0x6e, 0x74,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x65, 0x66,
	0x72, 0x65, 0x73, 0x68, 0x53, 0x65, 0x6e, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x5f, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f, 0x72, 0x65, 0x63, 0x76, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x65, 0x66, 0x72, 0x65,
	0x73, 0x68, 0x52, 0x65, 0x63, 0x76, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x65, 0x6e, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0e, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x53, 0x65, 0x6e, 0x74, 0x12,
	0x27, 0x0a, 0x0f, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x72, 0x65,
	0x63, 0x76, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x52, 0x65, 0x63, 0x76, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x5f, 0x73, 0x65, 0x6e, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x53, 0x65, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x5f, 0x72, 0x65, 0x63, 0x76, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x52, 0x65, 0x63, 0x76, 0x22, 0xa3, 0x02, 0x0a, 0x0e, 0x42, 0x67, 0x70, 0x50, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x69, 0x6e, 0x62,
	0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x65, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0f, 0x69, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x65, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x73, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x6c,
	0x6f, 0x6f, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x61, 0x73, 0x70, 0x61, 0x74,
	0x68, 0x4c, 0x6f, 0x6f, 0x70, 0x12, 0x27, 0x0a, 0x0f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61,
	0x74, 0x6f, 0x72, 0x5f, 0x6c, 0x6f, 0x6f, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e,
	0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x4c, 0x6f, 0x6f, 0x70, 0x12, 0x21,
	0x0a, 0x0c, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6c, 0x6f, 0x6f, 0x70, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4c, 0x6f, 0x6f,
	0x70, 0x12, 0x28, 0x0a, 0x10, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x6e, 0x65, 0x78,
	0x74, 0x5f, 0x68, 0x6f, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x69, 0x6e, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x12, 0x1c, 0x0a, 0x09, 0x77,
	0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09,
	0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x6e, 0x12, 0x31, 0x0a, 0x14, 0x61, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x65,
	0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x73, 0x44, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x65, 0x64, 0x22, 0x55, 0x0a, 0x14,
	0x42, 0x67, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3d, 0x0a, 0x0c, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x75, 0x6e, 0x69,
	0x63, 0x61, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x2e, 0x42, 0x67, 0x70, 0x49, 0x70, 0x76, 0x34, 0x55, 0x6e, 0x69, 0x63, 0x61,
	0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x69, 0x70, 0x76, 0x34, 0x55, 0x6e, 0x69, 0x63,
	0x61, 0x73, 0x74, 0x22, 0xb9, 0x02, 0x0a, 0x12, 0x42, 0x67, 0x70, 0x49, 0x70, 0x76, 0x34, 0x55,
	0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x32, 0x0a, 0x16, 0x63, 0x6f,
	0x6d, 0x6d, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x5f, 0x73, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x6f,
	0x5f, 0x6e, 0x62, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x63, 0x6f, 0x6d, 0x6d,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x53, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x4e, 0x62, 0x72, 0x12, 0x3f,
	0x0a, 0x1c, 0x69, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x65, 0x62, 0x67, 0x70, 0x5f, 0x72,
	0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x73, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x19, 0x69, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x45, 0x62, 0x67,
	0x70, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x73, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12,
	0x41, 0x0a, 0x1d, 0x6f, 0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x65, 0x62, 0x67, 0x70,
	0x5f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x73, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1a, 0x6f, 0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64,
	0x45, 0x62, 0x67, 0x70, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x73, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x12, 0x36, 0x0a, 0x17, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x5f, 0x70,
	0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x15, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x50, 0x72, 0x65,
	0x66, 0x69, 0x78, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x33, 0x0a, 0x16, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x72, 0x5f, 0x61, 0x6c, 0x77, 0x61, 0x79, 0x73, 0x5f, 0x6e, 0x65, 0x78, 0x74,
	0x5f, 0x68, 0x6f, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x72, 0x41, 0x6c, 0x77, 0x61, 0x79, 0x73, 0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x22,
	0x76, 0x0a, 0x06, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x12, 0x32, 0x0a, 0x08, 0x72, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x2e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x52, 0x6f, 0x75,
	0x74, 0x65, 0x73, 0x52, 0x08, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x12, 0x38, 0x0a,
	0x0a, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x64, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x64, 0x76, 0x65, 0x72,
	0x74, 0x69, 0x73, 0x65, 0x64, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x52, 0x0a, 0x61, 0x64, 0x76,
	0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x64, 0x22, 0xfc, 0x01, 0x0a, 0x0e, 0x52, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x64, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x12, 0x1f, 0x0a,
	0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x61, 0x74, 0x68, 0x73, 0x12, 0x1b,
	0x0a, 0x09, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x3a, 0x0a, 0x06, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x2e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x52, 0x6f, 0x75,
	0x74, 0x65, 0x73, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x06, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x1a, 0x4d, 0x0a, 0x0b, 0x52, 0x6f, 0x75, 0x74, 0x65,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x28, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x30, 0x0a, 0x0a, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x22, 0x0a, 0x05, 0x70, 0x61, 0x74, 0x68, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x50, 0x61, 0x74,
	0x68, 0x52, 0x05, 0x70, 0x61, 0x74, 0x68, 0x73, 0x22, 0x8d, 0x03, 0x0a, 0x04, 0x50, 0x61, 0x74,
	0x68, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x65, 0x73, 0x74, 0x70,
	0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x62, 0x65, 0x73, 0x74, 0x70,
	0x61, 0x74, 0x68, 0x12, 0x29, 0x0a, 0x10, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x1b,
	0x0a, 0x09, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x70, 0x61, 0x74, 0x68, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x70,
	0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x72, 0x65,
	0x66, 0x69, 0x78, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x6c, 0x65,
	0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c,
	0x65, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x18, 0x0a, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12, 0x16,
	0x0a, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06,
	0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x65, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70,
	0x61, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x12, 0x2b, 0x0a, 0x08, 0x6e,
	0x65, 0x78, 0x74, 0x68, 0x6f, 0x70, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x4e, 0x65, 0x78, 0x74, 0x68, 0x6f, 0x70, 0x52, 0x08,
	0x6e, 0x65, 0x78, 0x74, 0x68, 0x6f, 0x70, 0x73, 0x22, 0x5b, 0x0a, 0x07, 0x4e, 0x65, 0x78, 0x74,
	0x68, 0x6f, 0x70, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x10, 0x0a, 0x03, 0x61, 0x66, 0x69, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x61, 0x66,
	0x69, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x04, 0x75, 0x73, 0x65, 0x64, 0x22, 0xce, 0x03, 0x0a, 0x10, 0x41, 0x64, 0x76, 0x65, 0x72, 0x74,
	0x69, 0x73, 0x65, 0x64, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x5f, 0x69, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x49, 0x70, 0x12, 0x1b, 0x0a, 0x09, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x62, 0x67, 0x70, 0x5f,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0f, 0x62, 0x67, 0x70, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x61, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x41, 0x73, 0x12,
	0x2c, 0x0a, 0x12, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x6c,
	0x5f, 0x70, 0x72, 0x65, 0x66, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x64, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x50, 0x72, 0x65, 0x66, 0x12, 0x2c, 0x0a,
	0x12, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x32, 0x0a, 0x15, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x65, 0x64, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x65, 0x64, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x48, 0x0a, 0x0a, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x64, 0x18, 0x08, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x64, 0x76,
	0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x64, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x41, 0x64,
	0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x61,
	0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x64, 0x1a, 0x5b, 0x0a, 0x0f, 0x41, 0x64, 0x76,
	0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x32,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65,
	0x64, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x91, 0x02, 0x0a, 0x14, 0x41, 0x64, 0x76, 0x65, 0x72,
	0x74, 0x69, 0x73, 0x65, 0x64, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x1f, 0x0a, 0x0b, 0x61, 0x64, 0x64, 0x72, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x64, 0x64, 0x72, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78,
	0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x6c, 0x65, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x65, 0x6e, 0x12,
	0x18, 0x0a, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x19, 0x0a, 0x08, 0x6e, 0x65, 0x78,
	0x74, 0x5f, 0x68, 0x6f, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6e, 0x65, 0x78,
	0x74, 0x48, 0x6f, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12, 0x16, 0x0a, 0x06,
	0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x77, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x72, 0x69, 0x67,
	0x69, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x65, 0x73, 0x74, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x62, 0x65, 0x73, 0x74, 0x22, 0xe3, 0x02, 0x0a, 0x0f, 0x42,
	0x67, 0x70, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x32,
	0x0a, 0x0a, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x70, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x42, 0x67, 0x70, 0x52,
	0x6f, 0x75, 0x74, 0x65, 0x4d, 0x61, 0x70, 0x52, 0x09, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x4d, 0x61,
	0x70, 0x73, 0x12, 0x41, 0x0a, 0x0f, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x2e, 0x42, 0x67, 0x70, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74,
	0x79, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x0e, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79,
	0x4c, 0x69, 0x73, 0x74, 0x73, 0x12, 0x38, 0x0a, 0x0c, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x2e, 0x42, 0x67, 0x70, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x0b, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x69, 0x73, 0x74, 0x73, 0x12,
	0x5a, 0x0a, 0x11, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x2e, 0x42, 0x67, 0x70, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x10, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x1a, 0x43, 0x0a, 0x15, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x2a, 0x41, 0x0a, 0x0f, 0x46, 0x72, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x14, 0x46, 0x52, 0x52, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f,
	0x43, 0x4f, 0x4c, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x14, 0x0a,
	0x10, 0x46, 0x52, 0x52, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x42, 0x47,
	0x50, 0x10, 0x01, 0x2a, 0xab, 0x03, 0x0a, 0x10, 0x42, 0x67, 0x70, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x42, 0x47, 0x50, 0x5f,
	0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x42, 0x47, 0x50,
	0x5f, 0x47, 0x45, 0x54, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x10, 0x01, 0x12, 0x12, 0x0a,
	0x0e, 0x42, 0x47, 0x50, 0x5f, 0x53, 0x45, 0x54, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x10,
	0x02, 0x12, 0x14, 0x0a, 0x10, 0x42, 0x47, 0x50, 0x5f, 0x41, 0x44, 0x44, 0x5f, 0x4e, 0x45, 0x49,
	0x47, 0x48, 0x42, 0x4f, 0x52, 0x10, 0x03, 0x12, 0x17, 0x0a, 0x13, 0x42, 0x47, 0x50, 0x5f, 0x55,
	0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x4e, 0x45, 0x49, 0x47, 0x48, 0x42, 0x4f, 0x52, 0x10, 0x04,
	0x12, 0x16, 0x0a, 0x12, 0x42, 0x47, 0x50, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x4e, 0x45, 0x49,
	0x47, 0x48, 0x42, 0x4f, 0x52, 0x53, 0x10, 0x05, 0x12, 0x14, 0x0a, 0x10, 0x42, 0x47, 0x50, 0x5f,
	0x47, 0x45, 0x54, 0x5f, 0x4e, 0x45, 0x49, 0x47, 0x48, 0x42, 0x4f, 0x52, 0x10, 0x06, 0x12, 0x17,
	0x0a, 0x13, 0x42, 0x47, 0x50, 0x5f, 0x52, 0x45, 0x4d, 0x4f, 0x56, 0x45, 0x5f, 0x4e, 0x45, 0x49,
	0x47, 0x48, 0x42, 0x4f, 0x52, 0x10, 0x07, 0x12, 0x19, 0x0a, 0x15, 0x42, 0x47, 0x50, 0x5f, 0x47,
	0x45, 0x54, 0x5f, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47,
	0x10, 0x08, 0x12, 0x19, 0x0a, 0x15, 0x42, 0x47, 0x50, 0x5f, 0x41, 0x50, 0x50, 0x4c, 0x59, 0x5f,
	0x50, 0x52, 0x45, 0x46, 0x49, 0x58, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x10, 0x09, 0x12, 0x1a, 0x0a,
	0x16, 0x42, 0x47, 0x50, 0x5f, 0x52, 0x45, 0x4d, 0x4f, 0x56, 0x45, 0x5f, 0x50, 0x52, 0x45, 0x46,
	0x49, 0x58, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x10, 0x0a, 0x12, 0x1c, 0x0a, 0x18, 0x42, 0x47, 0x50,
	0x5f, 0x41, 0x50, 0x50, 0x4c, 0x59, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x55, 0x4e, 0x49, 0x54, 0x59,
	0x5f, 0x4c, 0x49, 0x53, 0x54, 0x10, 0x0b, 0x12, 0x1d, 0x0a, 0x19, 0x42, 0x47, 0x50, 0x5f, 0x52,
	0x45, 0x4d, 0x4f, 0x56, 0x45, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x55, 0x4e, 0x49, 0x54, 0x59, 0x5f,
	0x4c, 0x49, 0x53, 0x54, 0x10, 0x0c, 0x12, 0x17, 0x0a, 0x13, 0x42, 0x47, 0x50, 0x5f, 0x41, 0x50,
	0x50, 0x4c, 0x59, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x5f, 0x4d, 0x41, 0x50, 0x10, 0x0d, 0x12,
	0x18, 0x0a, 0x14, 0x42, 0x47, 0x50, 0x5f, 0x52, 0x45, 0x4d, 0x4f, 0x56, 0x45, 0x5f, 0x52, 0x4f,
	0x55, 0x54, 0x45, 0x5f, 0x4d, 0x41, 0x50, 0x10, 0x0e, 0x12, 0x13, 0x0a, 0x0f, 0x42, 0x47, 0x50,
	0x5f, 0x53, 0x48, 0x4f, 0x57, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x53, 0x10, 0x0f, 0x12, 0x11,
	0x0a, 0x0d, 0x42, 0x47, 0x50, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x10,
	0x10, 0x2a, 0x54, 0x0a, 0x11, 0x42, 0x67, 0x70, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x4d, 0x61, 0x70,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x15, 0x0a, 0x11, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x5f,
	0x4d, 0x41, 0x50, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x14, 0x0a,
	0x10, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x5f, 0x4d, 0x41, 0x50, 0x5f, 0x50, 0x45, 0x52, 0x4d, 0x49,
	0x54, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x5f, 0x4d, 0x41, 0x50,
	0x5f, 0x44, 0x45, 0x4e, 0x59, 0x10, 0x02, 0x42, 0x2d, 0x5a, 0x2b, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x45, 0x6c, 0x63, 0x68, 0x69, 0x54, 0x68, 0x65, 0x47, 0x72,
	0x65, 0x61, 0x74, 0x2f, 0x65, 0x6c, 0x63, 0x68, 0x69, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_client_frr_proto_rawDescOnce sync.Once
	file_client_frr_proto_rawDescData = file_client_frr_proto_rawDesc
)

func file_client_frr_proto_rawDescGZIP() []byte {
	file_client_frr_proto_rawDescOnce.Do(func() {
		file_client_frr_proto_rawDescData = protoimpl.X.CompressGZIP(file_client_frr_proto_rawDescData)
	})
	return file_client_frr_proto_rawDescData
}

var file_client_frr_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_client_frr_proto_msgTypes = make([]protoimpl.MessageInfo, 44)
var file_client_frr_proto_goTypes = []any{
	(FrrProtocolType)(0),             // 0: client.FrrProtocolType
	(BgpOperationType)(0),            // 1: client.BgpOperationType
	(BgpRouteMapAction)(0),           // 2: client.BgpRouteMapAction
	(*RequestBgp)(nil),               // 3: client.RequestBgp
	(*ResponseBgp)(nil),              // 4: client.ResponseBgp
	(*BgpConfig)(nil),                // 5: client.BgpConfig
	(*Ipv4UnicastSummary)(nil),       // 6: client.Ipv4UnicastSummary
	(*PeerSummary)(nil),              // 7: client.PeerSummary
	(*BestPathOptions)(nil),          // 8: client.BestPathOptions
	(*ClearBgp)(nil),                 // 9: client.ClearBgp
	(*BgpNeighbor)(nil),              // 10: client.BgpNeighbor
	(*BgpNeighborTimers)(nil),        // 11: client.BgpNeighborTimers
	(*BgpNeighborRouteMaps)(nil),     // 12: client.BgpNeighborRouteMaps
	(*BgpNeighborPrefixLists)(nil),   // 13: client.BgpNeighborPrefixLists
	(*BgpRouteMap)(nil),              // 14: client.BgpRouteMap
	(*BgpRouteMapMatch)(nil),         // 15: client.BgpRouteMapMatch
	(*BgpRouteMapSet)(nil),           // 16: client.BgpRouteMapSet
	(*BgpCommunityList)(nil),         // 17: client.BgpCommunityList
	(*BgpPrefixList)(nil),            // 18: client.BgpPrefixList
	(*ShowBgpSummary)(nil),           // 19: client.ShowBgpSummary
	(*BgpSummaryInstance)(nil),       // 20: client.BgpSummaryInstance
	(*BgpPeerSummaryInfo)(nil),       // 21: client.BgpPeerSummaryInfo
	(*ShowBgpNeighbors)(nil),         // 22: client.ShowBgpNeighbors
	(*BgpNeighborInfo)(nil),          // 23: client.BgpNeighborInfo
	(*BgpGracefulRestartInfo)(nil),   // 24: client.BgpGracefulRestartInfo
	(*BgpGracefulRestartTimers)(nil), // 25: client.BgpGracefulRestartTimers
	(*BgpMessageStats)(nil),          // 26: client.BgpMessageStats
	(*BgpPrefixStats)(nil),           // 27: client.BgpPrefixStats
	(*BgpAddressFamilyInfo)(nil),     // 28: client.BgpAddressFamilyInfo
	(*BgpIpv4UnicastInfo)(nil),       // 29: client.BgpIpv4UnicastInfo
	(*Routes)(nil),                   // 30: client.Routes
	(*ReceivedRoutes)(nil),           // 31: client.ReceivedRoutes
	(*RouteEntry)(nil),               // 32: client.RouteEntry
	(*Path)(nil),                     // 33: client.Path
	(*Nexthop)(nil),                  // 34: client.Nexthop
	(*AdvertisedRoutes)(nil),         // 35: client.AdvertisedRoutes
	(*AdvertisedRouteEntry)(nil),     // 36: client.AdvertisedRouteEntry
	(*BgpPolicyConfig)(nil),          // 37: client.BgpPolicyConfig
	nil,                              // 38: client.Ipv4UnicastSummary.PeersEntry
	nil,                              // 39: client.ShowBgpSummary.InstancesEntry
	nil,                              // 40: client.BgpSummaryInstance.PeersEntry
	nil,                              // 41: client.ShowBgpNeighbors.NeighborsEntry
	nil,                              // 42: client.BgpGracefulRestartInfo.EndOfRibSendEntry
	nil,                              // 43: client.BgpGracefulRestartInfo.EndOfRibRecvEntry
	nil,                              // 44: client.ReceivedRoutes.RoutesEntry
	nil,                              // 45: client.AdvertisedRoutes.AdvertisedEntry
	nil,                              // 46: client.BgpPolicyConfig.PolicyStatisticsEntry
}
var file_client_frr_proto_depIdxs = []int32{
	1,  // 0: client.RequestBgp.operation:type_name -> client.BgpOperationType
	5,  // 1: client.RequestBgp.config:type_name -> client.BgpConfig
	10, // 2: client.RequestBgp.neighbor:type_name -> client.BgpNeighbor
	14, // 3: client.RequestBgp.route_map:type_name -> client.BgpRouteMap
	17, // 4: client.RequestBgp.community_list:type_name -> client.BgpCommunityList
	18, // 5: client.RequestBgp.prefix_list:type_name -> client.BgpPrefixList
	9,  // 6: client.RequestBgp.clear:type_name -> client.ClearBgp
	1,  // 7: client.ResponseBgp.operation:type_name -> client.BgpOperationType
	5,  // 8: client.ResponseBgp.config:type_name -> client.BgpConfig
	6,  // 9: client.ResponseBgp.summary:type_name -> client.Ipv4UnicastSummary
	22, // 10: client.ResponseBgp.show_neighbors:type_name -> client.ShowBgpNeighbors
	10, // 11: client.ResponseBgp.neighbor:type_name -> client.BgpNeighbor
	37, // 12: client.ResponseBgp.policy_config:type_name -> client.BgpPolicyConfig
	30, // 13: client.ResponseBgp.routes:type_name -> client.Routes
	10, // 14: client.BgpConfig.neighbors:type_name -> client.BgpNeighbor
	14, // 15: client.BgpConfig.route_maps:type_name -> client.BgpRouteMap
	17, // 16: client.BgpConfig.community_lists:type_name -> client.BgpCommunityList
	18, // 17: client.BgpConfig.prefix_lists:type_name -> client.BgpPrefixList
	38, // 18: client.Ipv4UnicastSummary.peers:type_name -> client.Ipv4UnicastSummary.PeersEntry
	8,  // 19: client.Ipv4UnicastSummary.bestPath:type_name -> client.BestPathOptions
	11, // 20: client.BgpNeighbor.timers:type_name -> client.BgpNeighborTimers
	12, // 21: client.BgpNeighbor.route_maps:type_name -> client.BgpNeighborRouteMaps
	13, // 22: client.BgpNeighbor.prefix_lists:type_name -> client.BgpNeighborPrefixLists
	2,  // 23: client.BgpRouteMap.action:type_name -> client.BgpRouteMapAction
	15, // 24: client.BgpRouteMap.match_conditions:type_name -> client.BgpRouteMapMatch
	16, // 25: client.BgpRouteMap.set_actions:type_name -> client.BgpRouteMapSet
	2,  // 26: client.BgpCommunityList.action:type_name -> client.BgpRouteMapAction
	2,  // 27: client.BgpPrefixList.action:type_name -> client.BgpRouteMapAction
	39, // 28: client.ShowBgpSummary.instances:type_name -> client.ShowBgpSummary.InstancesEntry
	40, // 29: client.BgpSummaryInstance.peers:type_name -> client.BgpSummaryInstance.PeersEntry
	41, // 30: client.ShowBgpNeighbors.neighbors:type_name -> client.ShowBgpNeighbors.NeighborsEntry
	24, // 31: client.BgpNeighborInfo.graceful_restart_info:type_name -> client.BgpGracefulRestartInfo
	26, // 32: client.BgpNeighborInfo.message_stats:type_name -> client.BgpMessageStats
	27, // 33: client.BgpNeighborInfo.prefix_stats:type_name -> client.BgpPrefixStats
	28, // 34: client.BgpNeighborInfo.address_family_info:type_name -> client.BgpAddressFamilyInfo
	42, // 35: client.BgpGracefulRestartInfo.end_of_rib_send:type_name -> client.BgpGracefulRestartInfo.EndOfRibSendEntry
	43, // 36: client.BgpGracefulRestartInfo.end_of_rib_recv:type_name -> client.BgpGracefulRestartInfo.EndOfRibRecvEntry
	25, // 37: client.BgpGracefulRestartInfo.timers:type_name -> client.BgpGracefulRestartTimers
	29, // 38: client.BgpAddressFamilyInfo.ipv4_unicast:type_name -> client.BgpIpv4UnicastInfo
	31, // 39: client.Routes.received:type_name -> client.ReceivedRoutes
	35, // 40: client.Routes.advertised:type_name -> client.AdvertisedRoutes
	44, // 41: client.ReceivedRoutes.routes:type_name -> client.ReceivedRoutes.RoutesEntry
	33, // 42: client.RouteEntry.paths:type_name -> client.Path
	34, // 43: client.Path.nexthops:type_name -> client.Nexthop
	45, // 44: client.AdvertisedRoutes.advertised:type_name -> client.AdvertisedRoutes.AdvertisedEntry
	14, // 45: client.BgpPolicyConfig.route_maps:type_name -> client.BgpRouteMap
	17, // 46: client.BgpPolicyConfig.community_lists:type_name -> client.BgpCommunityList
	18, // 47: client.BgpPolicyConfig.prefix_lists:type_name -> client.BgpPrefixList
	46, // 48: client.BgpPolicyConfig.policy_statistics:type_name -> client.BgpPolicyConfig.PolicyStatisticsEntry
	7,  // 49: client.Ipv4UnicastSummary.PeersEntry.value:type_name -> client.PeerSummary
	20, // 50: client.ShowBgpSummary.InstancesEntry.value:type_name -> client.BgpSummaryInstance
	21, // 51: client.BgpSummaryInstance.PeersEntry.value:type_name -> client.BgpPeerSummaryInfo
	23, // 52: client.ShowBgpNeighbors.NeighborsEntry.value:type_name -> client.BgpNeighborInfo
	32, // 53: client.ReceivedRoutes.RoutesEntry.value:type_name -> client.RouteEntry
	36, // 54: client.AdvertisedRoutes.AdvertisedEntry.value:type_name -> client.AdvertisedRouteEntry
	55, // [55:55] is the sub-list for method output_type
	55, // [55:55] is the sub-list for method input_type
	55, // [55:55] is the sub-list for extension type_name
	55, // [55:55] is the sub-list for extension extendee
	0,  // [0:55] is the sub-list for field type_name
}

func init() { file_client_frr_proto_init() }
func file_client_frr_proto_init() {
	if File_client_frr_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_client_frr_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   44,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_client_frr_proto_goTypes,
		DependencyIndexes: file_client_frr_proto_depIdxs,
		EnumInfos:         file_client_frr_proto_enumTypes,
		MessageInfos:      file_client_frr_proto_msgTypes,
	}.Build()
	File_client_frr_proto = out.File
	file_client_frr_proto_rawDesc = nil
	file_client_frr_proto_goTypes = nil
	file_client_frr_proto_depIdxs = nil
}
