syntax = "proto3";

package client;

option go_package = "github.com/ElchiTheGreat/elchi-proto/client";

// ============================================================================
// FRR Main Request & Response Messages
// ============================================================================

enum FrrProtocolType {
  FRR_PROTOCOL_UNKNOWN = 0;
  FRR_PROTOCOL_BGP = 1;
  FRR_PROTOCOL_STATIC = 2;
}

// ============================================================================
// BGP Messages
// ============================================================================

enum BgpOperationType {
  BGP_UNKNOWN = 0;
  BGP_GET_CONFIG = 1;
  BGP_SET_CONFIG = 2;
  BGP_GET_STATE = 3;
  BGP_ADD_NEIGHBOR = 4;
  BGP_REMOVE_NEIGHBOR = 5;
  BGP_UPDATE_NEIGHBOR = 6;
  BGP_RESET_NEIGHBOR = 7;
  BGP_GET_NEIGHBORS = 8;
  BGP_GET_ROUTES = 11;
  BGP_GET_STATISTICS = 12;
  BGP_CLEAR_ROUTES = 13;
  BGP_ENABLE = 14;
  BGP_DISABLE = 15;

  BGP_SET_COMMUNITY = 16;
  BGP_CLEAR_COMMUNITY = 17;
  BGP_GET_SUMMARY = 18; // show bgp summary json
  BGP_CLEAR_SESSION = 19;
  BGP_RESET = 20;
  BGP_SHOW_NEIGHBORS = 21; // show bgp ipv4 neighbors json
  BGP_SHOW_ROUTES = 22;    // show bgp ipv4 unicast json
  BGP_GET_STATUS = 23;     // comprehensive status with cache/performance info
  BGP_CLEAR_CACHE = 24;    // clear BGP caches
  BGP_OPTIMIZE_CACHE = 25; // optimize BGP caches

  BGP_APPLY_ROUTE_MAP = 26;
  BGP_REMOVE_ROUTE_MAP = 27;
  BGP_APPLY_COMMUNITY_LIST = 28;  // ApplyCommunityList()
  BGP_REMOVE_COMMUNITY_LIST = 29; // RemoveCommunityList()
  BGP_APPLY_PREFIX_LIST = 30;     // ApplyPrefixList()
  BGP_REMOVE_PREFIX_LIST = 31;    // RemovePrefixList()

  BGP_VALIDATE_ROUTE_MAP = 32;      // ValidateRouteMap()
  BGP_VALIDATE_COMMUNITY_LIST = 33; // ValidateCommunityList()
  BGP_VALIDATE_PREFIX_LIST = 34;    // ValidatePrefixList()

  BGP_GET_NEIGHBOR = 36;   // GetNeighbor() - get specific neighbor details
  BGP_LIST_NEIGHBORS = 37; // ListNeighbors() - list all neighbors for AS
  BGP_CHECK_NEIGHBOR_STATUS =
      38; // IsNeighborConfigured() - check if neighbor is configured
  BGP_GET_NEIGHBOR_STATE = 39; // GetNeighborState() - get neighbor state info

  BGP_GET_HEALTH_STATUS = 40;         // CheckBgpHealth()
  BGP_GET_PROTOCOL_STATUS = 41;       // GetProtocolStatus()
  BGP_GET_NEIGHBOR_STATISTICS = 42;   // GetNeighborStatistics()
  BGP_GET_PERFORMANCE_METRICS = 43;   // GetBgpPerformanceMetrics()
  BGP_VALIDATE_STATE_DATA = 44;       // ValidateStateData()
  BGP_IS_NEIGHBOR_ESTABLISHED = 45;   // IsNeighborEstablished()
  BGP_GET_NEIGHBOR_UPTIME = 46;       // GetNeighborUptime()
  BGP_GET_ROUTES_RECEIVED_COUNT = 47; // GetRoutesReceivedCount()

  BGP_VALIDATE_CONFIG_CONSISTENCY = 54;     // ValidateConfigConsistency()
  BGP_VALIDATE_NEIGHBOR_COMPATIBILITY = 55; // ValidateNeighborCompatibility()
  BGP_VALIDATE_AS_NUMBERS = 56;             // ValidateASNumbers()
  BGP_VALIDATE_IP_ADDRESSES = 57;           // ValidateIPAddresses()
  BGP_CHECK_RESERVED_AS = 58;               // isReservedAS()

  BGP_RESET_BGP_SESSION = 65;      // ResetBgpSession()
  BGP_SOFT_RESET_BGP_SESSION = 66; // SoftResetBgpSession()

  BGP_GET_REDISTRIBUTION_STATUS = 69; // GetRedistributionStatus()

  BGP_GET_POLICY_CONFIG = 70; // GetPolicyConfig()
}

// Simplified BGP Configuration (IPv4 only)
message BgpConfig {
  uint32 autonomous_system = 1;
  string router_id = 2;
  repeated BgpNeighbor neighbors = 3;
  uint32 keepalive_time = 5;
  uint32 hold_time = 6;
  bool redistribute_connected = 7;
  bool redistribute_static = 8;
  repeated BgpRouteMap route_maps = 9;
  repeated BgpCommunityList community_lists = 10;
  repeated BgpPrefixList prefix_lists = 11;
  uint32 maximum_paths = 12;
  string administrative_distance = 13;
  bool deterministic_med = 14;
  bool always_compare_med = 15;
  bool log_neighbor_changes = 16;
}

// Simplified BGP Neighbor Configuration (IPv4 only)
message BgpNeighbor {
  string peer_ip = 1;
  uint32 remote_as = 2;
  string description = 3;
  string password = 4;
  BgpNeighborTimers timers = 5;
  BgpNeighborRouteMaps route_maps = 6;
  BgpNeighborPrefixLists prefix_lists = 7;
  bool next_hop_self = 8;
  bool soft_reconfiguration = 9;
  bool shutdown = 10;
  string update_source = 11;
  bool send_community = 12;
  uint32 maximum_prefix = 13;
  uint32 maximum_prefix_out = 14;
  uint32 allowas_in = 15;
  uint32 weight = 16;
  bool ebgp_multihop = 17;
  uint32 ebgp_multihop_ttl = 18;
  bool disable_connected_check = 19;
}

// BGP Neighbor Timers
message BgpNeighborTimers {
  uint32 keepalive = 1;
  uint32 holdtime = 2;
  uint32 connect_retry = 3;
}

// BGP Neighbor Route Maps
message BgpNeighborRouteMaps {
  repeated string route_map_in = 1;
  repeated string route_map_out = 2;
}

// BGP Neighbor Prefix Lists
message BgpNeighborPrefixLists {
  repeated string prefix_list_in = 1;
  repeated string prefix_list_out = 2;
}

// BGP Route Map Configuration
message BgpRouteMap {
  string name = 1;
  uint32 sequence = 2;
  BgpRouteMapAction action = 3;
  repeated BgpRouteMapMatch match_conditions = 4;
  BgpRouteMapSet set_actions = 5;
  string description = 6;
}

enum BgpRouteMapAction {
  ROUTE_MAP_UNKNOWN = 0;
  ROUTE_MAP_PERMIT = 1;
  ROUTE_MAP_DENY = 2;
}

// BGP Route Map Match Conditions
message BgpRouteMapMatch {
  string match_type = 1;
  string match_value = 2;
}

// BGP Route Map Set Actions
message BgpRouteMapSet {
  uint32 set_local_preference = 1;
  uint32 set_metric = 2;
  string set_community = 3;
  string set_nexthop = 4;
}

// BGP Community List
message BgpCommunityList {
  string name = 1;
  uint32 sequence = 2;
  BgpRouteMapAction action = 3; // permit/deny
  string community_values = 4;  // Space-separated community values
  string type = 5;
}

// BGP Prefix List
message BgpPrefixList {
  string name = 1;
  uint32 sequence = 2;
  BgpRouteMapAction action = 3; // permit/deny
  string prefix = 4;
  uint32 le = 5; // less-equal prefix length
  uint32 ge = 6; // greater-equal prefix length
}

// ============================================================================
// VTYSH JSON Response Messages for Show Commands
// ============================================================================

// Response for "show bgp summary json"
message ShowBgpSummary { map<string, BgpSummaryInstance> instances = 1; }

message BgpSummaryInstance {
  uint32 router_id = 1;
  uint32 as = 2;
  uint64 table_version = 3;
  uint32 rib_entries = 4;
  uint32 rib_memory = 5;
  uint32 peer_count = 6;
  uint32 peer_memory = 7;
  map<string, BgpPeerSummaryInfo> peers = 8;
}

message BgpPeerSummaryInfo {
  uint32 remote_as = 1;
  uint32 local_as = 2;
  string state = 3;
  uint64 uptime = 4;
  uint32 prefix_received = 5;
  uint32 prefix_sent = 6;
  string state_pfx_rcd = 7;
}

// Response for "show bgp ipv4 neighbors json"
message ShowBgpNeighbors { map<string, BgpNeighborInfo> neighbors = 1; }

message BgpNeighborInfo {
  uint32 remote_as = 1;
  uint32 local_as = 2;
  bool local_as_replace_as_dual_as = 3;
  bool nbr_external_link = 4;
  string local_role = 5;
  string remote_role = 6;
  string nbr_desc = 7;
  string hostname = 8;
  uint32 bgp_version = 9;
  string remote_router_id = 10;
  string local_router_id = 11;
  string bgp_state = 12;
  uint64 bgp_timer_last_read = 13;
  uint64 bgp_timer_last_write = 14;
  uint64 bgp_in_update_elapsed_time_msecs = 15;
  uint64 bgp_timer_configured_hold_time_msecs = 16;
  uint64 bgp_timer_configured_keep_alive_interval_msecs = 17;
  uint64 bgp_timer_hold_time_msecs = 18;
  uint64 bgp_timer_keep_alive_interval_msecs = 19;
  uint32 bgp_tcp_mss_configured = 20;
  uint32 bgp_tcp_mss_synced = 21;
  bool extended_optional_parameters_length = 22;
  uint32 bgp_timer_configured_conditional_advertisements_sec = 23;
  BgpGracefulRestartInfo graceful_restart_info = 24;
  BgpMessageStats message_stats = 25;
  BgpPrefixStats prefix_stats = 26;
  uint32 min_btwn_advertisement_runs_timer_msecs = 27;
  BgpAddressFamilyInfo address_family_info = 28;
  uint32 connections_established = 29;
  uint32 connections_dropped = 30;
  uint64 last_reset_timer_msecs = 31;
  string last_reset_due_to = 32;
  uint32 last_reset_code = 33;
  string software_version = 34;
  uint32 external_bgp_nbr_max_hops_away = 35;
  string host_local = 36;
  uint32 port_local = 37;
  string host_foreign = 38;
  uint32 port_foreign = 39;
  string nexthop = 40;
  string nexthop_global = 41;
  string nexthop_local = 42;
  string bgp_connection = 43;
  uint32 connect_retry_timer = 44;
  uint64 next_connect_timer_due_in_msecs = 45;
  string read_thread = 46;
  string write_thread = 47;
}

message BgpGracefulRestartInfo {
  map<string, bool> end_of_rib_send = 1;
  map<string, bool> end_of_rib_recv = 2;
  string local_gr_mode = 3;
  string remote_gr_mode = 4;
  bool r_bit = 5;
  bool n_bit = 6;
  BgpGracefulRestartTimers timers = 7;
}

message BgpGracefulRestartTimers {
  uint32 configured_restart_timer = 1;
  uint32 configured_llgr_stale_time = 2;
  uint32 received_restart_timer = 3;
}

message BgpMessageStats {
  uint32 depth_inq = 1;
  uint32 depth_outq = 2;
  uint32 opens_sent = 3;
  uint32 opens_recv = 4;
  uint32 notifications_sent = 5;
  uint32 notifications_recv = 6;
  uint32 updates_sent = 7;
  uint32 updates_recv = 8;
  uint32 keepalives_sent = 9;
  uint32 keepalives_recv = 10;
  uint32 route_refresh_sent = 11;
  uint32 route_refresh_recv = 12;
  uint32 capability_sent = 13;
  uint32 capability_recv = 14;
  uint32 total_sent = 15;
  uint32 total_recv = 16;
}

message BgpPrefixStats {
  uint32 inbound_filtered = 1;
  uint32 aspath_loop = 2;
  uint32 originator_loop = 3;
  uint32 cluster_loop = 4;
  uint32 invalid_next_hop = 5;
  uint32 withdrawn = 6;
  uint32 attributes_discarded = 7;
}

message BgpAddressFamilyInfo { BgpIpv4UnicastInfo ipv4_unicast = 1; }

message BgpIpv4UnicastInfo {
  string comm_attri_sent_to_nbr = 1;
  string inbound_ebgp_requires_policy = 2;
  string outbound_ebgp_requires_policy = 3;
  uint32 accepted_prefix_counter = 4;
  bool router_always_next_hop = 5;
}

// Response for "show bgp ipv4 unicast json"
message ShowBgpRoutes { map<string, BgpRouteInfo> routes = 1; }

message BgpRouteInfo { repeated BgpPath paths = 1; }

message BgpPath {
  bool valid = 1;
  bool best = 2;
  string nexthop = 3;
  uint32 metric = 4;
  uint32 local_pref = 5;
  uint32 weight = 6;
  string as_path = 7;
  string origin = 8;
  uint64 last_update = 9;
  string peer_id = 10;
}

// ============================================================================
// BGP State and Statistics (Simplified)
// ============================================================================

message BgpState {
  bool enabled = 1;
  uint32 autonomous_system = 2;
  string router_id = 3;
  repeated BgpNeighborState neighbor_states = 4;
}

message BgpNeighborState {
  string peer_ip = 1;
  string state = 2;
  uint64 uptime = 3;
  uint32 prefixes_received = 4;
  uint32 prefixes_sent = 5;
}

message BgpStatistics {
  uint32 total_neighbors = 1;
  uint32 established_neighbors = 2;
  uint32 total_routes = 3;
  uint32 ipv4_routes = 4;
  uint32 ipv6_routes = 5;
  uint64 memory_usage = 6;
  BgpGlobalStatistics global_stats = 7;
  repeated BgpTableStatistics table_stats = 8;
  BgpMessageStatistics message_stats = 9;
  repeated BgpNeighborStatistics neighbor_stats = 10;
}

message BgpGlobalStatistics {
  uint64 updates_sent = 1;
  uint64 updates_received = 2;
  uint64 total_messages_sent = 3;
  uint64 total_messages_received = 4;
  uint64 dampened_routes = 5;
  uint64 history_routes = 6;
  uint64 suppressed_routes = 7;
  uint64 withdraw_messages = 8;
}

message BgpTableStatistics {
  string table_name = 1;
  uint32 total_prefixes = 2;
  uint32 memory_usage = 3;
  uint32 dampened_prefixes = 4;
  uint32 history_prefixes = 5;
  uint32 valid_prefixes = 6;
}

message BgpMessageStatistics {
  uint64 opens_sent = 1;
  uint64 opens_received = 2;
  uint64 notifications_sent = 3;
  uint64 notifications_received = 4;
  uint64 updates_sent = 5;
  uint64 updates_received = 6;
  uint64 keepalives_sent = 7;
  uint64 keepalives_received = 8;
  uint64 route_refresh_sent = 9;
  uint64 route_refresh_received = 10;
  uint64 capability_sent = 11;
  uint64 capability_received = 12;
  uint64 total_sent = 13;
  uint64 total_received = 14;
}

// BGP Neighbor Statistics
message BgpNeighborStatistics {
  string peer_ip = 1;
  uint64 messages_sent = 2;
  uint64 messages_received = 3;
  uint64 updates_sent = 4;
  uint64 updates_received = 5;
  uint64 keepalives_sent = 6;
  uint64 keepalives_received = 7;
  uint64 notifications_sent = 8;
  uint64 notifications_received = 9;
  uint64 route_refreshes_sent = 10;
  uint64 route_refreshes_received = 11;
  uint32 prefixes_received = 12;
  uint32 prefixes_sent = 13;
  string state = 14;
  uint64 uptime = 15;
}

// =================== STATIC ROUTING CONFIGURATION ===================

enum StaticOperationType {
  STATIC_UNKNOWN = 0;
  STATIC_GET_ROUTES = 1;
  STATIC_ADD_ROUTE = 2;
  STATIC_REMOVE_ROUTE = 3;
  STATIC_UPDATE_ROUTE = 4;
  STATIC_GET_CONFIG = 5;
  STATIC_SET_CONFIG = 6;
  STATIC_CLEAR_ALL_ROUTES = 7;
  STATIC_GET_STATISTICS = 8;
  STATIC_SHOW_ROUTES = 9; // show ip route json
}

// Static Route Configuration (IPv4 only)
message StaticConfig {
  repeated StaticRoute routes = 1;
  repeated StaticRouteTable route_tables = 2;
  repeated StaticNexthopGroup nexthop_groups = 3;
  StaticGlobalConfig global_config = 4;
}

// Static Global Configuration (IPv4 only)
message StaticGlobalConfig {
  uint32 default_administrative_distance = 1;
  uint32 default_metric = 2;
  bool ip_forward = 3;
}

// Static Route (IPv4 only)
message StaticRoute {
  string destination = 1;             // Network in CIDR format
  string gateway = 2;                 // Next-hop IP or interface
  string interface = 3;               // Outgoing interface
  uint32 metric = 4;                  // Route metric
  uint32 administrative_distance = 5; // Administrative distance
  uint32 table = 6;                   // Route table ID
  string description = 7;             // Route description
  StaticRouteType route_type = 8;
  StaticRouteFlags flags = 9;
  string source = 10;                 // Source IP for policy routing
  repeated string nexthop_group = 11; // Nexthop group reference
  string vrf = 12;                    // VRF name
  bool onlink = 13;                   // Gateway is directly reachable
}

enum StaticRouteType {
  STATIC_ROUTE_UNKNOWN = 0;
  STATIC_ROUTE_UNICAST = 1;
  STATIC_ROUTE_BLACKHOLE = 2;
  STATIC_ROUTE_UNREACHABLE = 3;
  STATIC_ROUTE_PROHIBIT = 4;
  STATIC_ROUTE_LOCAL = 5;
}

// Static Route Flags
message StaticRouteFlags {
  bool reject = 1;
  bool blackhole = 2;
  bool no_resolve = 3;
  bool onlink = 4;
}

// Static Route Table
message StaticRouteTable {
  uint32 table_id = 1;
  string table_name = 2;
  string description = 3;
  repeated StaticRoute routes = 4;
}

// Static Nexthop Group (ECMP)
message StaticNexthopGroup {
  string name = 1;
  repeated StaticNexthop nexthops = 2;
  StaticNexthopGroupType type = 3;
  string description = 4;
}

enum StaticNexthopGroupType {
  NEXTHOP_GROUP_UNKNOWN = 0;
  NEXTHOP_GROUP_MULTIPATH = 1;
  NEXTHOP_GROUP_RESILIENT = 2;
}

// Static Nexthop
message StaticNexthop {
  string gateway = 1;
  string interface = 2;
  uint32 weight = 3;
  uint32 preference = 4;
  bool backup = 5;
}

// ============================================================================
// VTYSH JSON Response Message for Static Routes
// ============================================================================

// Response for "show ip route json"
message ShowStaticRoutes { map<string, StaticRouteEntry> routes = 1; }

message StaticRouteEntry {
  string prefix = 1;
  repeated StaticRouteNexthop nexthops = 2;
}

message StaticRouteNexthop {
  string nexthop = 1;
  string interface = 2;
  uint32 metric = 3;
  uint32 administrative_distance = 4;
  bool active = 5;
  bool fib = 6;
}

// Static Route Statistics (IPv4 only)
message StaticStatistics {
  uint32 total_routes = 1;
  uint32 ipv4_routes = 2;
  uint32 active_routes = 3;
  uint32 inactive_routes = 4;
  repeated StaticTableStatistics table_stats = 5;
  StaticRouteTypeStatistics route_type_stats = 6;
  StaticNexthopGroupStatistics nexthop_group_stats = 7;
}

// Static Table Statistics
message StaticTableStatistics {
  uint32 table_id = 1;
  string table_name = 2;
  uint32 route_count = 3;
  uint32 active_routes = 4;
  uint32 inactive_routes = 5;
}

// Static Route Type Statistics
message StaticRouteTypeStatistics {
  uint32 unicast_routes = 1;
  uint32 blackhole_routes = 2;
  uint32 unreachable_routes = 3;
  uint32 prohibit_routes = 4;
  uint32 local_routes = 5;
}

// Static Nexthop Group Statistics
message StaticNexthopGroupStatistics {
  uint32 total_groups = 1;
  uint32 multipath_groups = 2;
  uint32 resilient_groups = 3;
  uint32 total_nexthops = 4;
  uint32 active_nexthops = 5;
}

// =================== FRR REQUEST/RESPONSE MESSAGES ===================

// BGP Request
message RequestBgp {
  BgpOperationType operation = 1;
  BgpConfig config = 2;
  BgpNeighbor neighbor = 3;
  string peer_ip = 5;
  string network_prefix = 6;
  BgpRouteMap route_map = 7;
  BgpCommunityList community_list = 8;
  BgpPrefixList prefix_list = 9;
  string community = 10;
  uint32 as_number = 11;

  string transaction_id = 12; // Transaction ID for transaction operations
  BgpTransactionOperation transaction_operation =
      13; // Transaction operation details

  BgpValidationRequest validation_request = 14; // Validation request details
  repeated string ip_addresses = 15;            // IP addresses for validation
  uint32 local_as = 16;                         // Local AS for AS validation
  uint32 remote_as = 17;                        // Remote AS for AS validation

  string soft_reset_direction = 18; // "in", "out", or "both" for soft reset
  string session_type = 19;         // Session type for operations
  bool include_inactive = 20;       // Include inactive neighbors/routes
  string filter_criteria = 21;      // Filter criteria for queries
}

// BGP Response
message ResponseBgp {
  BgpOperationType operation = 1;
  bool success = 2;
  string message = 3;
  BgpConfig config = 4;
  repeated BgpNeighbor neighbors = 5;
  BgpState state = 7;
  BgpStatistics statistics = 8;
  repeated BgpRouteMap route_maps = 9;
  repeated BgpCommunityList community_lists = 10;
  repeated BgpPrefixList prefix_lists = 11;

  // VTYSH JSON responses
  ShowBgpSummary show_summary = 12;
  ShowBgpNeighbors show_neighbors = 13;
  ShowBgpRoutes show_routes = 14;

  // Comprehensive status and performance info
  BgpStatus status = 15;

  BgpNeighbor neighbor = 16; // Single neighbor response
  repeated BgpNeighborStatistics neighbor_statistics =
      17;                                         // Neighbor statistics
  BgpHealthStatus health_status = 18;             // Health status response
  BgpProtocolStatus protocol_status = 19;         // Protocol status response
  BgpPerformanceMetrics performance_metrics = 20; // Performance metrics

  BgpTransactionResponse transaction_response =
      21;                     // Transaction operation response
  string transaction_id = 22; // Transaction ID
  BgpTransactionStatus transaction_status = 23; // Transaction status

  BgpValidationResponse validation_response = 24; // Validation results
  repeated string validation_errors = 25;         // Validation error messages
  repeated string validation_warnings = 26;       // Validation warning messages

  map<string, int64> cache_statistics = 27;  // Cache statistics
  map<string, double> cache_hit_ratios = 28; // Cache hit ratios
  uint64 neighbor_uptime = 29;               // Neighbor uptime in seconds
  uint32 routes_received_count = 30;         // Routes received count
  bool is_neighbor_established = 31;         // Neighbor establishment status

  uint32 network_count = 32;                          // Network count
  BgpRedistributionStatus redistribution_status = 33; // Redistribution status

  BgpPolicyConfig policy_config = 34;
  Routes routes = 35;
}

message Routes {
  ReceivedRoutes received = 1;
  repeated AdvertisedRoutes advertised = 2;
}

// ---- RECEIVED ----

message ReceivedRoutes {
  uint32 total_routes = 1;
  uint32 total_paths = 2;
  string router_id = 3;
  map<string, RouteEntry> routes = 4; // key = "10.10.20.50/32"
}

message RouteEntry { repeated Path paths = 1; }

message Path {
  bool valid = 1;
  bool bestpath = 2;
  string selection_reason = 3;
  string path_from = 4;
  string prefix = 5;
  uint32 prefix_len = 6;
  string network = 7;
  uint32 version = 8;
  uint32 metric = 9;
  uint32 weight = 10;
  string peer_id = 11;
  string path = 12;
  string origin = 13;
  repeated Nexthop nexthops = 14;
}

message Nexthop {
  string ip = 1;
  string hostname = 2;
  string afi = 3;
  bool used = 4;
}

// ---- ADVERTISED ----

message AdvertisedRoutes {
  string neighbor_ip = 1;
  string router_id = 2;
  uint32 bgp_table_version = 3;
  uint32 local_as = 4;
  uint32 default_local_pref = 5;
  uint32 total_prefix_count = 6;
  uint32 filtered_prefix_count = 7;
  map<string, AdvertisedRouteEntry> advertised = 8;
}

message AdvertisedRouteEntry {
  string addr_prefix = 1;
  uint32 prefix_len = 2;
  string network = 3;
  string next_hop = 4;
  uint32 metric = 5;
  uint32 weight = 6;
  string path = 7;
  string origin = 8;
  bool valid = 9;
  bool best = 10;
}

// BGP Policy Configuration Response
message BgpPolicyConfig {
  repeated BgpRouteMap route_maps = 1;
  repeated BgpCommunityList community_lists = 2;
  repeated BgpPrefixList prefix_lists = 3;
  map<string, string> policy_statistics = 4;
}

// Static Routing Request
message RequestStatic {
  StaticOperationType operation = 1;
  StaticConfig config = 2;
  StaticRoute route = 3;
  StaticRouteTable route_table = 4;
  StaticNexthopGroup nexthop_group = 5;
  uint32 table_id = 6;
  string filter_criteria = 7;
}

// Static Routing Response
message ResponseStatic {
  StaticOperationType operation = 1;
  bool success = 2;
  string message = 3;
  StaticConfig config = 4;
  repeated StaticRoute routes = 5;
  repeated StaticRouteTable route_tables = 6;
  repeated StaticNexthopGroup nexthop_groups = 7;
  StaticStatistics statistics = 8;

  // VTYSH JSON response
  ShowStaticRoutes show_routes = 9;
}

// BGP Comprehensive Status Message
message BgpStatus {
  uint32 as_number = 1;
  bool enabled = 2;
  bool daemon_running = 3;
  bool config_valid = 4;
  map<string, int64> cache_statistics = 5;
  map<string, int64> network_metrics = 6;
  BgpPerformanceMetrics performance_metrics = 7;
  BgpHealthStatus health_status = 8;
  uint64 timestamp = 9;
  string status_message = 10;
}

// BGP Performance Metrics
message BgpPerformanceMetrics {
  map<string, double> cache_hit_ratios = 1;
  uint64 estimated_cache_memory_kb = 2;
  uint32 go_routines = 3;
  uint64 memory_alloc_mb = 4;
  uint64 total_alloc_mb = 5;
  uint64 sys_mb = 6;
  uint32 num_gc = 7;
  bool optimization_recommended = 8;
}

// BGP Health Status
message BgpHealthStatus {
  bool healthy = 1;
  bool daemon_running = 2;
  bool config_valid = 3;
  uint32 neighbors_connected = 4;
  uint32 total_neighbors = 5;
  repeated string issues = 6;
  double connection_ratio = 7;
}

// ============================================================================
// ADVANCED BGP MESSAGE TYPES FOR NEW OPERATIONS
// ============================================================================

// BGP Transaction Operation
message BgpTransactionOperation {
  string operation_type = 1; // Type of operation to add to transaction
  BgpConfig config = 2;      // Configuration for the operation
  BgpNeighbor neighbor = 3;  // Neighbor for the operation
  BgpRouteMap route_map = 5; // Route map for the operation
  BgpCommunityList community_list = 6; // Community list for the operation
  BgpPrefixList prefix_list = 7;       // Prefix list for the operation
  string description = 8;              // Description of the operation
}

// BGP Transaction Response
message BgpTransactionResponse {
  string transaction_id = 1;
  bool success = 2;
  string message = 3;
  repeated string operation_results = 4;
  uint32 operations_count = 5;
  uint64 execution_time_ms = 6;
}

// BGP Transaction Status
enum BgpTransactionStatus {
  TRANSACTION_UNKNOWN = 0;
  TRANSACTION_PENDING = 1;
  TRANSACTION_IN_PROGRESS = 2;
  TRANSACTION_COMMITTED = 3;
  TRANSACTION_ROLLED_BACK = 4;
  TRANSACTION_FAILED = 5;
}

// BGP Validation Request
message BgpValidationRequest {
  string validation_type = 1;          // Type of validation to perform
  BgpConfig config = 2;                // Configuration to validate
  BgpNeighbor neighbor = 3;            // Neighbor to validate
  BgpRouteMap route_map = 5;           // Route map to validate
  BgpCommunityList community_list = 6; // Community list to validate
  BgpPrefixList prefix_list = 7;       // Prefix list to validate
  bool strict_validation = 8;          // Whether to perform strict validation
}

// BGP Validation Response
message BgpValidationResponse {
  bool valid = 1;
  string validation_type = 2;
  repeated BgpValidationError errors = 3;
  repeated BgpValidationWarning warnings = 4;
  map<string, string> validation_details = 5;
  uint32 total_checks = 6;
  uint32 passed_checks = 7;
  uint32 failed_checks = 8;
}

// BGP Validation Error
message BgpValidationError {
  string error_code = 1;
  string error_message = 2;
  string field_name = 3;
  string field_value = 4;
  string severity = 5; // "critical", "high", "medium", "low"
}

// BGP Validation Warning
message BgpValidationWarning {
  string warning_code = 1;
  string warning_message = 2;
  string field_name = 3;
  string field_value = 4;
  string recommendation = 5;
}

// BGP Protocol Status
message BgpProtocolStatus {
  bool daemon_running = 1;
  bool configuration_valid = 2;
  string daemon_version = 3;
  uint64 daemon_uptime = 4;
  uint32 memory_usage_kb = 5;
  uint32 cpu_usage_percent = 6;
  repeated string active_features = 7;
  map<string, string> daemon_statistics = 8;
}

// BGP Redistribution Status
message BgpRedistributionStatus {
  bool connected_enabled = 1;
  bool static_enabled = 2;
  bool ospf_enabled = 3;
  bool rip_enabled = 4;
  bool kernel_enabled = 5;
  map<string, BgpRedistributionMetrics> redistribution_metrics = 6;
}

// BGP Redistribution Metrics
message BgpRedistributionMetrics {
  string protocol = 1;
  uint32 routes_redistributed = 2;
  uint32 routes_filtered = 3;
  string route_map = 4;
  bool enabled = 5;
}
