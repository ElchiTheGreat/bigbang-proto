// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.1
// 	protoc        v5.28.2
// source: client/frr.proto

package client

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type FrrProtocolType int32

const (
	FrrProtocolType_FRR_PROTOCOL_UNKNOWN FrrProtocolType = 0
	FrrProtocolType_FRR_PROTOCOL_BGP     FrrProtocolType = 1
	FrrProtocolType_FRR_PROTOCOL_STATIC  FrrProtocolType = 2
)

// Enum value maps for FrrProtocolType.
var (
	FrrProtocolType_name = map[int32]string{
		0: "FRR_PROTOCOL_UNKNOWN",
		1: "FRR_PROTOCOL_BGP",
		2: "FRR_PROTOCOL_STATIC",
	}
	FrrProtocolType_value = map[string]int32{
		"FRR_PROTOCOL_UNKNOWN": 0,
		"FRR_PROTOCOL_BGP":     1,
		"FRR_PROTOCOL_STATIC":  2,
	}
)

func (x FrrProtocolType) Enum() *FrrProtocolType {
	p := new(FrrProtocolType)
	*p = x
	return p
}

func (x FrrProtocolType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FrrProtocolType) Descriptor() protoreflect.EnumDescriptor {
	return file_client_frr_proto_enumTypes[0].Descriptor()
}

func (FrrProtocolType) Type() protoreflect.EnumType {
	return &file_client_frr_proto_enumTypes[0]
}

func (x FrrProtocolType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FrrProtocolType.Descriptor instead.
func (FrrProtocolType) EnumDescriptor() ([]byte, []int) {
	return file_client_frr_proto_rawDescGZIP(), []int{0}
}

type BgpOperationType int32

const (
	BgpOperationType_BGP_UNKNOWN          BgpOperationType = 0
	BgpOperationType_BGP_GET_CONFIG       BgpOperationType = 1
	BgpOperationType_BGP_SET_CONFIG       BgpOperationType = 2
	BgpOperationType_BGP_GET_STATE        BgpOperationType = 3
	BgpOperationType_BGP_ADD_NEIGHBOR     BgpOperationType = 4
	BgpOperationType_BGP_REMOVE_NEIGHBOR  BgpOperationType = 5
	BgpOperationType_BGP_UPDATE_NEIGHBOR  BgpOperationType = 6
	BgpOperationType_BGP_RESET_NEIGHBOR   BgpOperationType = 7
	BgpOperationType_BGP_GET_NEIGHBORS    BgpOperationType = 8
	BgpOperationType_BGP_ADD_NETWORK      BgpOperationType = 9
	BgpOperationType_BGP_REMOVE_NETWORK   BgpOperationType = 10
	BgpOperationType_BGP_GET_ROUTES       BgpOperationType = 11
	BgpOperationType_BGP_GET_STATISTICS   BgpOperationType = 12
	BgpOperationType_BGP_CLEAR_ROUTES     BgpOperationType = 13
	BgpOperationType_BGP_ENABLE           BgpOperationType = 14
	BgpOperationType_BGP_DISABLE          BgpOperationType = 15
	BgpOperationType_BGP_APPLY_ROUTE_MAP  BgpOperationType = 16
	BgpOperationType_BGP_REMOVE_ROUTE_MAP BgpOperationType = 17
	BgpOperationType_BGP_SET_COMMUNITY    BgpOperationType = 18
	BgpOperationType_BGP_CLEAR_COMMUNITY  BgpOperationType = 19
	BgpOperationType_BGP_GET_SUMMARY      BgpOperationType = 20 // show bgp summary json
	BgpOperationType_BGP_CLEAR_SESSION    BgpOperationType = 21
	BgpOperationType_BGP_RESET            BgpOperationType = 22
	BgpOperationType_BGP_SHOW_NEIGHBORS   BgpOperationType = 23 // show bgp ipv4 neighbors json
	BgpOperationType_BGP_SHOW_ROUTES      BgpOperationType = 24 // show bgp ipv4 unicast json
	BgpOperationType_BGP_GET_STATUS       BgpOperationType = 25 // comprehensive status with cache/performance info
	BgpOperationType_BGP_CLEAR_CACHE      BgpOperationType = 26 // clear BGP caches
	BgpOperationType_BGP_OPTIMIZE_CACHE   BgpOperationType = 27 // optimize BGP caches
	// ============================================================================
	// ADVANCED BGP POLICY OPERATIONS (PolicyManager Functions)
	// ============================================================================
	BgpOperationType_BGP_APPLY_COMMUNITY_LIST    BgpOperationType = 28 // ApplyCommunityList()
	BgpOperationType_BGP_REMOVE_COMMUNITY_LIST   BgpOperationType = 29 // RemoveCommunityList()
	BgpOperationType_BGP_APPLY_PREFIX_LIST       BgpOperationType = 30 // ApplyPrefixList()
	BgpOperationType_BGP_REMOVE_PREFIX_LIST      BgpOperationType = 31 // RemovePrefixList()
	BgpOperationType_BGP_VALIDATE_ROUTE_MAP      BgpOperationType = 32 // ValidateRouteMap()
	BgpOperationType_BGP_VALIDATE_COMMUNITY_LIST BgpOperationType = 33 // ValidateCommunityList()
	BgpOperationType_BGP_VALIDATE_PREFIX_LIST    BgpOperationType = 34 // ValidatePrefixList()
	BgpOperationType_BGP_GET_POLICY_CONFIG       BgpOperationType = 35 // Get all route maps, community lists, prefix lists
	// ============================================================================
	// ADVANCED BGP NEIGHBOR OPERATIONS (NeighborManager Functions)
	// ============================================================================
	BgpOperationType_BGP_GET_NEIGHBOR          BgpOperationType = 36 // GetNeighbor() - get specific neighbor details
	BgpOperationType_BGP_LIST_NEIGHBORS        BgpOperationType = 37 // ListNeighbors() - list all neighbors for AS
	BgpOperationType_BGP_CHECK_NEIGHBOR_STATUS BgpOperationType = 38 // IsNeighborConfigured() - check if neighbor is configured
	BgpOperationType_BGP_GET_NEIGHBOR_STATE    BgpOperationType = 39 // GetNeighborState() - get neighbor state info
	// ============================================================================
	// BGP HEALTH & MONITORING OPERATIONS (StateManager Functions)
	// ============================================================================
	BgpOperationType_BGP_GET_HEALTH_STATUS         BgpOperationType = 40 // CheckBgpHealth()
	BgpOperationType_BGP_GET_PROTOCOL_STATUS       BgpOperationType = 41 // GetProtocolStatus()
	BgpOperationType_BGP_GET_NEIGHBOR_STATISTICS   BgpOperationType = 42 // GetNeighborStatistics()
	BgpOperationType_BGP_GET_PERFORMANCE_METRICS   BgpOperationType = 43 // GetBgpPerformanceMetrics()
	BgpOperationType_BGP_VALIDATE_STATE_DATA       BgpOperationType = 44 // ValidateStateData()
	BgpOperationType_BGP_IS_NEIGHBOR_ESTABLISHED   BgpOperationType = 45 // IsNeighborEstablished()
	BgpOperationType_BGP_GET_NEIGHBOR_UPTIME       BgpOperationType = 46 // GetNeighborUptime()
	BgpOperationType_BGP_GET_ROUTES_RECEIVED_COUNT BgpOperationType = 47 // GetRoutesReceivedCount()
	// ============================================================================
	// BGP ADVANCED VALIDATION OPERATIONS (ValidationManager Functions)
	// ============================================================================
	BgpOperationType_BGP_VALIDATE_CONFIG_CONSISTENCY     BgpOperationType = 54 // ValidateConfigConsistency()
	BgpOperationType_BGP_VALIDATE_NEIGHBOR_COMPATIBILITY BgpOperationType = 55 // ValidateNeighborCompatibility()
	BgpOperationType_BGP_VALIDATE_AS_NUMBERS             BgpOperationType = 56 // ValidateASNumbers()
	BgpOperationType_BGP_VALIDATE_IP_ADDRESSES           BgpOperationType = 57 // ValidateIPAddresses()
	BgpOperationType_BGP_CHECK_RESERVED_AS               BgpOperationType = 58 // isReservedAS()
	// ============================================================================
	// BGP STATE MANAGEMENT OPERATIONS (StateManager Functions)
	// ============================================================================
	BgpOperationType_BGP_RESET_BGP_SESSION      BgpOperationType = 65 // ResetBgpSession()
	BgpOperationType_BGP_SOFT_RESET_BGP_SESSION BgpOperationType = 66 // SoftResetBgpSession()
	// ============================================================================
	// BGP NETWORK OPERATIONS (NetworkManager Functions)
	// ============================================================================
	BgpOperationType_BGP_UPDATE_NETWORK            BgpOperationType = 67 // UpdateNetwork()
	BgpOperationType_BGP_GET_NETWORK_COUNT         BgpOperationType = 68 // GetNetworkCount()
	BgpOperationType_BGP_GET_REDISTRIBUTION_STATUS BgpOperationType = 69 // GetRedistributionStatus()
	BgpOperationType_BGP_GET_NETWORK_LIST          BgpOperationType = 70
	BgpOperationType_BGP_GET_NETWORK               BgpOperationType = 71
)

// Enum value maps for BgpOperationType.
var (
	BgpOperationType_name = map[int32]string{
		0:  "BGP_UNKNOWN",
		1:  "BGP_GET_CONFIG",
		2:  "BGP_SET_CONFIG",
		3:  "BGP_GET_STATE",
		4:  "BGP_ADD_NEIGHBOR",
		5:  "BGP_REMOVE_NEIGHBOR",
		6:  "BGP_UPDATE_NEIGHBOR",
		7:  "BGP_RESET_NEIGHBOR",
		8:  "BGP_GET_NEIGHBORS",
		9:  "BGP_ADD_NETWORK",
		10: "BGP_REMOVE_NETWORK",
		11: "BGP_GET_ROUTES",
		12: "BGP_GET_STATISTICS",
		13: "BGP_CLEAR_ROUTES",
		14: "BGP_ENABLE",
		15: "BGP_DISABLE",
		16: "BGP_APPLY_ROUTE_MAP",
		17: "BGP_REMOVE_ROUTE_MAP",
		18: "BGP_SET_COMMUNITY",
		19: "BGP_CLEAR_COMMUNITY",
		20: "BGP_GET_SUMMARY",
		21: "BGP_CLEAR_SESSION",
		22: "BGP_RESET",
		23: "BGP_SHOW_NEIGHBORS",
		24: "BGP_SHOW_ROUTES",
		25: "BGP_GET_STATUS",
		26: "BGP_CLEAR_CACHE",
		27: "BGP_OPTIMIZE_CACHE",
		28: "BGP_APPLY_COMMUNITY_LIST",
		29: "BGP_REMOVE_COMMUNITY_LIST",
		30: "BGP_APPLY_PREFIX_LIST",
		31: "BGP_REMOVE_PREFIX_LIST",
		32: "BGP_VALIDATE_ROUTE_MAP",
		33: "BGP_VALIDATE_COMMUNITY_LIST",
		34: "BGP_VALIDATE_PREFIX_LIST",
		35: "BGP_GET_POLICY_CONFIG",
		36: "BGP_GET_NEIGHBOR",
		37: "BGP_LIST_NEIGHBORS",
		38: "BGP_CHECK_NEIGHBOR_STATUS",
		39: "BGP_GET_NEIGHBOR_STATE",
		40: "BGP_GET_HEALTH_STATUS",
		41: "BGP_GET_PROTOCOL_STATUS",
		42: "BGP_GET_NEIGHBOR_STATISTICS",
		43: "BGP_GET_PERFORMANCE_METRICS",
		44: "BGP_VALIDATE_STATE_DATA",
		45: "BGP_IS_NEIGHBOR_ESTABLISHED",
		46: "BGP_GET_NEIGHBOR_UPTIME",
		47: "BGP_GET_ROUTES_RECEIVED_COUNT",
		54: "BGP_VALIDATE_CONFIG_CONSISTENCY",
		55: "BGP_VALIDATE_NEIGHBOR_COMPATIBILITY",
		56: "BGP_VALIDATE_AS_NUMBERS",
		57: "BGP_VALIDATE_IP_ADDRESSES",
		58: "BGP_CHECK_RESERVED_AS",
		65: "BGP_RESET_BGP_SESSION",
		66: "BGP_SOFT_RESET_BGP_SESSION",
		67: "BGP_UPDATE_NETWORK",
		68: "BGP_GET_NETWORK_COUNT",
		69: "BGP_GET_REDISTRIBUTION_STATUS",
		70: "BGP_GET_NETWORK_LIST",
		71: "BGP_GET_NETWORK",
	}
	BgpOperationType_value = map[string]int32{
		"BGP_UNKNOWN":                         0,
		"BGP_GET_CONFIG":                      1,
		"BGP_SET_CONFIG":                      2,
		"BGP_GET_STATE":                       3,
		"BGP_ADD_NEIGHBOR":                    4,
		"BGP_REMOVE_NEIGHBOR":                 5,
		"BGP_UPDATE_NEIGHBOR":                 6,
		"BGP_RESET_NEIGHBOR":                  7,
		"BGP_GET_NEIGHBORS":                   8,
		"BGP_ADD_NETWORK":                     9,
		"BGP_REMOVE_NETWORK":                  10,
		"BGP_GET_ROUTES":                      11,
		"BGP_GET_STATISTICS":                  12,
		"BGP_CLEAR_ROUTES":                    13,
		"BGP_ENABLE":                          14,
		"BGP_DISABLE":                         15,
		"BGP_APPLY_ROUTE_MAP":                 16,
		"BGP_REMOVE_ROUTE_MAP":                17,
		"BGP_SET_COMMUNITY":                   18,
		"BGP_CLEAR_COMMUNITY":                 19,
		"BGP_GET_SUMMARY":                     20,
		"BGP_CLEAR_SESSION":                   21,
		"BGP_RESET":                           22,
		"BGP_SHOW_NEIGHBORS":                  23,
		"BGP_SHOW_ROUTES":                     24,
		"BGP_GET_STATUS":                      25,
		"BGP_CLEAR_CACHE":                     26,
		"BGP_OPTIMIZE_CACHE":                  27,
		"BGP_APPLY_COMMUNITY_LIST":            28,
		"BGP_REMOVE_COMMUNITY_LIST":           29,
		"BGP_APPLY_PREFIX_LIST":               30,
		"BGP_REMOVE_PREFIX_LIST":              31,
		"BGP_VALIDATE_ROUTE_MAP":              32,
		"BGP_VALIDATE_COMMUNITY_LIST":         33,
		"BGP_VALIDATE_PREFIX_LIST":            34,
		"BGP_GET_POLICY_CONFIG":               35,
		"BGP_GET_NEIGHBOR":                    36,
		"BGP_LIST_NEIGHBORS":                  37,
		"BGP_CHECK_NEIGHBOR_STATUS":           38,
		"BGP_GET_NEIGHBOR_STATE":              39,
		"BGP_GET_HEALTH_STATUS":               40,
		"BGP_GET_PROTOCOL_STATUS":             41,
		"BGP_GET_NEIGHBOR_STATISTICS":         42,
		"BGP_GET_PERFORMANCE_METRICS":         43,
		"BGP_VALIDATE_STATE_DATA":             44,
		"BGP_IS_NEIGHBOR_ESTABLISHED":         45,
		"BGP_GET_NEIGHBOR_UPTIME":             46,
		"BGP_GET_ROUTES_RECEIVED_COUNT":       47,
		"BGP_VALIDATE_CONFIG_CONSISTENCY":     54,
		"BGP_VALIDATE_NEIGHBOR_COMPATIBILITY": 55,
		"BGP_VALIDATE_AS_NUMBERS":             56,
		"BGP_VALIDATE_IP_ADDRESSES":           57,
		"BGP_CHECK_RESERVED_AS":               58,
		"BGP_RESET_BGP_SESSION":               65,
		"BGP_SOFT_RESET_BGP_SESSION":          66,
		"BGP_UPDATE_NETWORK":                  67,
		"BGP_GET_NETWORK_COUNT":               68,
		"BGP_GET_REDISTRIBUTION_STATUS":       69,
		"BGP_GET_NETWORK_LIST":                70,
		"BGP_GET_NETWORK":                     71,
	}
)

func (x BgpOperationType) Enum() *BgpOperationType {
	p := new(BgpOperationType)
	*p = x
	return p
}

func (x BgpOperationType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BgpOperationType) Descriptor() protoreflect.EnumDescriptor {
	return file_client_frr_proto_enumTypes[1].Descriptor()
}

func (BgpOperationType) Type() protoreflect.EnumType {
	return &file_client_frr_proto_enumTypes[1]
}

func (x BgpOperationType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BgpOperationType.Descriptor instead.
func (BgpOperationType) EnumDescriptor() ([]byte, []int) {
	return file_client_frr_proto_rawDescGZIP(), []int{1}
}

type BgpRouteMapAction int32

const (
	BgpRouteMapAction_ROUTE_MAP_UNKNOWN BgpRouteMapAction = 0
	BgpRouteMapAction_ROUTE_MAP_PERMIT  BgpRouteMapAction = 1
	BgpRouteMapAction_ROUTE_MAP_DENY    BgpRouteMapAction = 2
)

// Enum value maps for BgpRouteMapAction.
var (
	BgpRouteMapAction_name = map[int32]string{
		0: "ROUTE_MAP_UNKNOWN",
		1: "ROUTE_MAP_PERMIT",
		2: "ROUTE_MAP_DENY",
	}
	BgpRouteMapAction_value = map[string]int32{
		"ROUTE_MAP_UNKNOWN": 0,
		"ROUTE_MAP_PERMIT":  1,
		"ROUTE_MAP_DENY":    2,
	}
)

func (x BgpRouteMapAction) Enum() *BgpRouteMapAction {
	p := new(BgpRouteMapAction)
	*p = x
	return p
}

func (x BgpRouteMapAction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BgpRouteMapAction) Descriptor() protoreflect.EnumDescriptor {
	return file_client_frr_proto_enumTypes[2].Descriptor()
}

func (BgpRouteMapAction) Type() protoreflect.EnumType {
	return &file_client_frr_proto_enumTypes[2]
}

func (x BgpRouteMapAction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BgpRouteMapAction.Descriptor instead.
func (BgpRouteMapAction) EnumDescriptor() ([]byte, []int) {
	return file_client_frr_proto_rawDescGZIP(), []int{2}
}

type StaticOperationType int32

const (
	StaticOperationType_STATIC_UNKNOWN          StaticOperationType = 0
	StaticOperationType_STATIC_GET_ROUTES       StaticOperationType = 1
	StaticOperationType_STATIC_ADD_ROUTE        StaticOperationType = 2
	StaticOperationType_STATIC_REMOVE_ROUTE     StaticOperationType = 3
	StaticOperationType_STATIC_UPDATE_ROUTE     StaticOperationType = 4
	StaticOperationType_STATIC_GET_CONFIG       StaticOperationType = 5
	StaticOperationType_STATIC_SET_CONFIG       StaticOperationType = 6
	StaticOperationType_STATIC_CLEAR_ALL_ROUTES StaticOperationType = 7
	StaticOperationType_STATIC_GET_STATISTICS   StaticOperationType = 8
	StaticOperationType_STATIC_SHOW_ROUTES      StaticOperationType = 9 // show ip route json
)

// Enum value maps for StaticOperationType.
var (
	StaticOperationType_name = map[int32]string{
		0: "STATIC_UNKNOWN",
		1: "STATIC_GET_ROUTES",
		2: "STATIC_ADD_ROUTE",
		3: "STATIC_REMOVE_ROUTE",
		4: "STATIC_UPDATE_ROUTE",
		5: "STATIC_GET_CONFIG",
		6: "STATIC_SET_CONFIG",
		7: "STATIC_CLEAR_ALL_ROUTES",
		8: "STATIC_GET_STATISTICS",
		9: "STATIC_SHOW_ROUTES",
	}
	StaticOperationType_value = map[string]int32{
		"STATIC_UNKNOWN":          0,
		"STATIC_GET_ROUTES":       1,
		"STATIC_ADD_ROUTE":        2,
		"STATIC_REMOVE_ROUTE":     3,
		"STATIC_UPDATE_ROUTE":     4,
		"STATIC_GET_CONFIG":       5,
		"STATIC_SET_CONFIG":       6,
		"STATIC_CLEAR_ALL_ROUTES": 7,
		"STATIC_GET_STATISTICS":   8,
		"STATIC_SHOW_ROUTES":      9,
	}
)

func (x StaticOperationType) Enum() *StaticOperationType {
	p := new(StaticOperationType)
	*p = x
	return p
}

func (x StaticOperationType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StaticOperationType) Descriptor() protoreflect.EnumDescriptor {
	return file_client_frr_proto_enumTypes[3].Descriptor()
}

func (StaticOperationType) Type() protoreflect.EnumType {
	return &file_client_frr_proto_enumTypes[3]
}

func (x StaticOperationType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StaticOperationType.Descriptor instead.
func (StaticOperationType) EnumDescriptor() ([]byte, []int) {
	return file_client_frr_proto_rawDescGZIP(), []int{3}
}

type StaticRouteType int32

const (
	StaticRouteType_STATIC_ROUTE_UNKNOWN     StaticRouteType = 0
	StaticRouteType_STATIC_ROUTE_UNICAST     StaticRouteType = 1
	StaticRouteType_STATIC_ROUTE_BLACKHOLE   StaticRouteType = 2
	StaticRouteType_STATIC_ROUTE_UNREACHABLE StaticRouteType = 3
	StaticRouteType_STATIC_ROUTE_PROHIBIT    StaticRouteType = 4
	StaticRouteType_STATIC_ROUTE_LOCAL       StaticRouteType = 5
)

// Enum value maps for StaticRouteType.
var (
	StaticRouteType_name = map[int32]string{
		0: "STATIC_ROUTE_UNKNOWN",
		1: "STATIC_ROUTE_UNICAST",
		2: "STATIC_ROUTE_BLACKHOLE",
		3: "STATIC_ROUTE_UNREACHABLE",
		4: "STATIC_ROUTE_PROHIBIT",
		5: "STATIC_ROUTE_LOCAL",
	}
	StaticRouteType_value = map[string]int32{
		"STATIC_ROUTE_UNKNOWN":     0,
		"STATIC_ROUTE_UNICAST":     1,
		"STATIC_ROUTE_BLACKHOLE":   2,
		"STATIC_ROUTE_UNREACHABLE": 3,
		"STATIC_ROUTE_PROHIBIT":    4,
		"STATIC_ROUTE_LOCAL":       5,
	}
)

func (x StaticRouteType) Enum() *StaticRouteType {
	p := new(StaticRouteType)
	*p = x
	return p
}

func (x StaticRouteType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StaticRouteType) Descriptor() protoreflect.EnumDescriptor {
	return file_client_frr_proto_enumTypes[4].Descriptor()
}

func (StaticRouteType) Type() protoreflect.EnumType {
	return &file_client_frr_proto_enumTypes[4]
}

func (x StaticRouteType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StaticRouteType.Descriptor instead.
func (StaticRouteType) EnumDescriptor() ([]byte, []int) {
	return file_client_frr_proto_rawDescGZIP(), []int{4}
}

type StaticNexthopGroupType int32

const (
	StaticNexthopGroupType_NEXTHOP_GROUP_UNKNOWN   StaticNexthopGroupType = 0
	StaticNexthopGroupType_NEXTHOP_GROUP_MULTIPATH StaticNexthopGroupType = 1
	StaticNexthopGroupType_NEXTHOP_GROUP_RESILIENT StaticNexthopGroupType = 2
)

// Enum value maps for StaticNexthopGroupType.
var (
	StaticNexthopGroupType_name = map[int32]string{
		0: "NEXTHOP_GROUP_UNKNOWN",
		1: "NEXTHOP_GROUP_MULTIPATH",
		2: "NEXTHOP_GROUP_RESILIENT",
	}
	StaticNexthopGroupType_value = map[string]int32{
		"NEXTHOP_GROUP_UNKNOWN":   0,
		"NEXTHOP_GROUP_MULTIPATH": 1,
		"NEXTHOP_GROUP_RESILIENT": 2,
	}
)

func (x StaticNexthopGroupType) Enum() *StaticNexthopGroupType {
	p := new(StaticNexthopGroupType)
	*p = x
	return p
}

func (x StaticNexthopGroupType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StaticNexthopGroupType) Descriptor() protoreflect.EnumDescriptor {
	return file_client_frr_proto_enumTypes[5].Descriptor()
}

func (StaticNexthopGroupType) Type() protoreflect.EnumType {
	return &file_client_frr_proto_enumTypes[5]
}

func (x StaticNexthopGroupType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StaticNexthopGroupType.Descriptor instead.
func (StaticNexthopGroupType) EnumDescriptor() ([]byte, []int) {
	return file_client_frr_proto_rawDescGZIP(), []int{5}
}

// BGP Transaction Status
type BgpTransactionStatus int32

const (
	BgpTransactionStatus_TRANSACTION_UNKNOWN     BgpTransactionStatus = 0
	BgpTransactionStatus_TRANSACTION_PENDING     BgpTransactionStatus = 1
	BgpTransactionStatus_TRANSACTION_IN_PROGRESS BgpTransactionStatus = 2
	BgpTransactionStatus_TRANSACTION_COMMITTED   BgpTransactionStatus = 3
	BgpTransactionStatus_TRANSACTION_ROLLED_BACK BgpTransactionStatus = 4
	BgpTransactionStatus_TRANSACTION_FAILED      BgpTransactionStatus = 5
)

// Enum value maps for BgpTransactionStatus.
var (
	BgpTransactionStatus_name = map[int32]string{
		0: "TRANSACTION_UNKNOWN",
		1: "TRANSACTION_PENDING",
		2: "TRANSACTION_IN_PROGRESS",
		3: "TRANSACTION_COMMITTED",
		4: "TRANSACTION_ROLLED_BACK",
		5: "TRANSACTION_FAILED",
	}
	BgpTransactionStatus_value = map[string]int32{
		"TRANSACTION_UNKNOWN":     0,
		"TRANSACTION_PENDING":     1,
		"TRANSACTION_IN_PROGRESS": 2,
		"TRANSACTION_COMMITTED":   3,
		"TRANSACTION_ROLLED_BACK": 4,
		"TRANSACTION_FAILED":      5,
	}
)

func (x BgpTransactionStatus) Enum() *BgpTransactionStatus {
	p := new(BgpTransactionStatus)
	*p = x
	return p
}

func (x BgpTransactionStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BgpTransactionStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_client_frr_proto_enumTypes[6].Descriptor()
}

func (BgpTransactionStatus) Type() protoreflect.EnumType {
	return &file_client_frr_proto_enumTypes[6]
}

func (x BgpTransactionStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BgpTransactionStatus.Descriptor instead.
func (BgpTransactionStatus) EnumDescriptor() ([]byte, []int) {
	return file_client_frr_proto_rawDescGZIP(), []int{6}
}

// Simplified BGP Configuration (IPv4 only)
type BgpConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AutonomousSystem       uint32              `protobuf:"varint,1,opt,name=autonomous_system,json=autonomousSystem,proto3" json:"autonomous_system,omitempty"`
	RouterId               string              `protobuf:"bytes,2,opt,name=router_id,json=routerId,proto3" json:"router_id,omitempty"`
	Neighbors              []*BgpNeighbor      `protobuf:"bytes,3,rep,name=neighbors,proto3" json:"neighbors,omitempty"`
	KeepaliveTime          uint32              `protobuf:"varint,5,opt,name=keepalive_time,json=keepaliveTime,proto3" json:"keepalive_time,omitempty"`
	HoldTime               uint32              `protobuf:"varint,6,opt,name=hold_time,json=holdTime,proto3" json:"hold_time,omitempty"`
	RedistributeConnected  bool                `protobuf:"varint,7,opt,name=redistribute_connected,json=redistributeConnected,proto3" json:"redistribute_connected,omitempty"`
	RedistributeStatic     bool                `protobuf:"varint,8,opt,name=redistribute_static,json=redistributeStatic,proto3" json:"redistribute_static,omitempty"`
	RouteMaps              []*BgpRouteMap      `protobuf:"bytes,9,rep,name=route_maps,json=routeMaps,proto3" json:"route_maps,omitempty"`
	CommunityLists         []*BgpCommunityList `protobuf:"bytes,10,rep,name=community_lists,json=communityLists,proto3" json:"community_lists,omitempty"`
	PrefixLists            []*BgpPrefixList    `protobuf:"bytes,11,rep,name=prefix_lists,json=prefixLists,proto3" json:"prefix_lists,omitempty"`
	MaximumPaths           uint32              `protobuf:"varint,12,opt,name=maximum_paths,json=maximumPaths,proto3" json:"maximum_paths,omitempty"`
	AdministrativeDistance string              `protobuf:"bytes,13,opt,name=administrative_distance,json=administrativeDistance,proto3" json:"administrative_distance,omitempty"`
	DeterministicMed       bool                `protobuf:"varint,14,opt,name=deterministic_med,json=deterministicMed,proto3" json:"deterministic_med,omitempty"`
	AlwaysCompareMed       bool                `protobuf:"varint,15,opt,name=always_compare_med,json=alwaysCompareMed,proto3" json:"always_compare_med,omitempty"`
	LogNeighborChanges     bool                `protobuf:"varint,16,opt,name=log_neighbor_changes,json=logNeighborChanges,proto3" json:"log_neighbor_changes,omitempty"`
}

func (x *BgpConfig) Reset() {
	*x = BgpConfig{}
	mi := &file_client_frr_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BgpConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpConfig) ProtoMessage() {}

func (x *BgpConfig) ProtoReflect() protoreflect.Message {
	mi := &file_client_frr_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpConfig.ProtoReflect.Descriptor instead.
func (*BgpConfig) Descriptor() ([]byte, []int) {
	return file_client_frr_proto_rawDescGZIP(), []int{0}
}

func (x *BgpConfig) GetAutonomousSystem() uint32 {
	if x != nil {
		return x.AutonomousSystem
	}
	return 0
}

func (x *BgpConfig) GetRouterId() string {
	if x != nil {
		return x.RouterId
	}
	return ""
}

func (x *BgpConfig) GetNeighbors() []*BgpNeighbor {
	if x != nil {
		return x.Neighbors
	}
	return nil
}

func (x *BgpConfig) GetKeepaliveTime() uint32 {
	if x != nil {
		return x.KeepaliveTime
	}
	return 0
}

func (x *BgpConfig) GetHoldTime() uint32 {
	if x != nil {
		return x.HoldTime
	}
	return 0
}

func (x *BgpConfig) GetRedistributeConnected() bool {
	if x != nil {
		return x.RedistributeConnected
	}
	return false
}

func (x *BgpConfig) GetRedistributeStatic() bool {
	if x != nil {
		return x.RedistributeStatic
	}
	return false
}

func (x *BgpConfig) GetRouteMaps() []*BgpRouteMap {
	if x != nil {
		return x.RouteMaps
	}
	return nil
}

func (x *BgpConfig) GetCommunityLists() []*BgpCommunityList {
	if x != nil {
		return x.CommunityLists
	}
	return nil
}

func (x *BgpConfig) GetPrefixLists() []*BgpPrefixList {
	if x != nil {
		return x.PrefixLists
	}
	return nil
}

func (x *BgpConfig) GetMaximumPaths() uint32 {
	if x != nil {
		return x.MaximumPaths
	}
	return 0
}

func (x *BgpConfig) GetAdministrativeDistance() string {
	if x != nil {
		return x.AdministrativeDistance
	}
	return ""
}

func (x *BgpConfig) GetDeterministicMed() bool {
	if x != nil {
		return x.DeterministicMed
	}
	return false
}

func (x *BgpConfig) GetAlwaysCompareMed() bool {
	if x != nil {
		return x.AlwaysCompareMed
	}
	return false
}

func (x *BgpConfig) GetLogNeighborChanges() bool {
	if x != nil {
		return x.LogNeighborChanges
	}
	return false
}

// Simplified BGP Neighbor Configuration (IPv4 only)
type BgpNeighbor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PeerIp                     string                  `protobuf:"bytes,1,opt,name=peer_ip,json=peerIp,proto3" json:"peer_ip,omitempty"`
	RemoteAs                   uint32                  `protobuf:"varint,2,opt,name=remote_as,json=remoteAs,proto3" json:"remote_as,omitempty"`
	Description                string                  `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Password                   string                  `protobuf:"bytes,4,opt,name=password,proto3" json:"password,omitempty"`
	Timers                     *BgpNeighborTimers      `protobuf:"bytes,5,opt,name=timers,proto3" json:"timers,omitempty"`
	RouteMaps                  *BgpNeighborRouteMaps   `protobuf:"bytes,6,opt,name=route_maps,json=routeMaps,proto3" json:"route_maps,omitempty"`
	PrefixLists                *BgpNeighborPrefixLists `protobuf:"bytes,7,opt,name=prefix_lists,json=prefixLists,proto3" json:"prefix_lists,omitempty"`
	NextHopSelf                bool                    `protobuf:"varint,8,opt,name=next_hop_self,json=nextHopSelf,proto3" json:"next_hop_self,omitempty"`
	RouteReflectorClient       bool                    `protobuf:"varint,9,opt,name=route_reflector_client,json=routeReflectorClient,proto3" json:"route_reflector_client,omitempty"`
	SendCommunity              bool                    `protobuf:"varint,10,opt,name=send_community,json=sendCommunity,proto3" json:"send_community,omitempty"`
	SoftReconfigurationInbound bool                    `protobuf:"varint,11,opt,name=soft_reconfiguration_inbound,json=softReconfigurationInbound,proto3" json:"soft_reconfiguration_inbound,omitempty"`
	Shutdown                   bool                    `protobuf:"varint,12,opt,name=shutdown,proto3" json:"shutdown,omitempty"`
	UpdateSource               string                  `protobuf:"bytes,13,opt,name=update_source,json=updateSource,proto3" json:"update_source,omitempty"`
	LocalAs                    uint32                  `protobuf:"varint,14,opt,name=local_as,json=localAs,proto3" json:"local_as,omitempty"`
	LocalAsNoPrepend           bool                    `protobuf:"varint,15,opt,name=local_as_no_prepend,json=localAsNoPrepend,proto3" json:"local_as_no_prepend,omitempty"`
	LocalAsReplaceAs           bool                    `protobuf:"varint,16,opt,name=local_as_replace_as,json=localAsReplaceAs,proto3" json:"local_as_replace_as,omitempty"`
	AllowasIn                  uint32                  `protobuf:"varint,17,opt,name=allowas_in,json=allowasIn,proto3" json:"allowas_in,omitempty"`
	Weight                     uint32                  `protobuf:"varint,18,opt,name=weight,proto3" json:"weight,omitempty"`
	EbgpMultihop               bool                    `protobuf:"varint,19,opt,name=ebgp_multihop,json=ebgpMultihop,proto3" json:"ebgp_multihop,omitempty"`
	EbgpMultihopTtl            uint32                  `protobuf:"varint,20,opt,name=ebgp_multihop_ttl,json=ebgpMultihopTtl,proto3" json:"ebgp_multihop_ttl,omitempty"`
	DisableConnectedCheck      bool                    `protobuf:"varint,21,opt,name=disable_connected_check,json=disableConnectedCheck,proto3" json:"disable_connected_check,omitempty"`
}

func (x *BgpNeighbor) Reset() {
	*x = BgpNeighbor{}
	mi := &file_client_frr_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BgpNeighbor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpNeighbor) ProtoMessage() {}

func (x *BgpNeighbor) ProtoReflect() protoreflect.Message {
	mi := &file_client_frr_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpNeighbor.ProtoReflect.Descriptor instead.
func (*BgpNeighbor) Descriptor() ([]byte, []int) {
	return file_client_frr_proto_rawDescGZIP(), []int{1}
}

func (x *BgpNeighbor) GetPeerIp() string {
	if x != nil {
		return x.PeerIp
	}
	return ""
}

func (x *BgpNeighbor) GetRemoteAs() uint32 {
	if x != nil {
		return x.RemoteAs
	}
	return 0
}

func (x *BgpNeighbor) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *BgpNeighbor) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *BgpNeighbor) GetTimers() *BgpNeighborTimers {
	if x != nil {
		return x.Timers
	}
	return nil
}

func (x *BgpNeighbor) GetRouteMaps() *BgpNeighborRouteMaps {
	if x != nil {
		return x.RouteMaps
	}
	return nil
}

func (x *BgpNeighbor) GetPrefixLists() *BgpNeighborPrefixLists {
	if x != nil {
		return x.PrefixLists
	}
	return nil
}

func (x *BgpNeighbor) GetNextHopSelf() bool {
	if x != nil {
		return x.NextHopSelf
	}
	return false
}

func (x *BgpNeighbor) GetRouteReflectorClient() bool {
	if x != nil {
		return x.RouteReflectorClient
	}
	return false
}

func (x *BgpNeighbor) GetSendCommunity() bool {
	if x != nil {
		return x.SendCommunity
	}
	return false
}

func (x *BgpNeighbor) GetSoftReconfigurationInbound() bool {
	if x != nil {
		return x.SoftReconfigurationInbound
	}
	return false
}

func (x *BgpNeighbor) GetShutdown() bool {
	if x != nil {
		return x.Shutdown
	}
	return false
}

func (x *BgpNeighbor) GetUpdateSource() string {
	if x != nil {
		return x.UpdateSource
	}
	return ""
}

func (x *BgpNeighbor) GetLocalAs() uint32 {
	if x != nil {
		return x.LocalAs
	}
	return 0
}

func (x *BgpNeighbor) GetLocalAsNoPrepend() bool {
	if x != nil {
		return x.LocalAsNoPrepend
	}
	return false
}

func (x *BgpNeighbor) GetLocalAsReplaceAs() bool {
	if x != nil {
		return x.LocalAsReplaceAs
	}
	return false
}

func (x *BgpNeighbor) GetAllowasIn() uint32 {
	if x != nil {
		return x.AllowasIn
	}
	return 0
}

func (x *BgpNeighbor) GetWeight() uint32 {
	if x != nil {
		return x.Weight
	}
	return 0
}

func (x *BgpNeighbor) GetEbgpMultihop() bool {
	if x != nil {
		return x.EbgpMultihop
	}
	return false
}

func (x *BgpNeighbor) GetEbgpMultihopTtl() uint32 {
	if x != nil {
		return x.EbgpMultihopTtl
	}
	return 0
}

func (x *BgpNeighbor) GetDisableConnectedCheck() bool {
	if x != nil {
		return x.DisableConnectedCheck
	}
	return false
}

// BGP Neighbor Timers
type BgpNeighborTimers struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Keepalive    uint32 `protobuf:"varint,1,opt,name=keepalive,proto3" json:"keepalive,omitempty"`
	Holdtime     uint32 `protobuf:"varint,2,opt,name=holdtime,proto3" json:"holdtime,omitempty"`
	ConnectRetry uint32 `protobuf:"varint,3,opt,name=connect_retry,json=connectRetry,proto3" json:"connect_retry,omitempty"`
}

func (x *BgpNeighborTimers) Reset() {
	*x = BgpNeighborTimers{}
	mi := &file_client_frr_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BgpNeighborTimers) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpNeighborTimers) ProtoMessage() {}

func (x *BgpNeighborTimers) ProtoReflect() protoreflect.Message {
	mi := &file_client_frr_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpNeighborTimers.ProtoReflect.Descriptor instead.
func (*BgpNeighborTimers) Descriptor() ([]byte, []int) {
	return file_client_frr_proto_rawDescGZIP(), []int{2}
}

func (x *BgpNeighborTimers) GetKeepalive() uint32 {
	if x != nil {
		return x.Keepalive
	}
	return 0
}

func (x *BgpNeighborTimers) GetHoldtime() uint32 {
	if x != nil {
		return x.Holdtime
	}
	return 0
}

func (x *BgpNeighborTimers) GetConnectRetry() uint32 {
	if x != nil {
		return x.ConnectRetry
	}
	return 0
}

// BGP Neighbor Route Maps
type BgpNeighborRouteMaps struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RouteMapIn  string `protobuf:"bytes,1,opt,name=route_map_in,json=routeMapIn,proto3" json:"route_map_in,omitempty"`
	RouteMapOut string `protobuf:"bytes,2,opt,name=route_map_out,json=routeMapOut,proto3" json:"route_map_out,omitempty"`
}

func (x *BgpNeighborRouteMaps) Reset() {
	*x = BgpNeighborRouteMaps{}
	mi := &file_client_frr_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BgpNeighborRouteMaps) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpNeighborRouteMaps) ProtoMessage() {}

func (x *BgpNeighborRouteMaps) ProtoReflect() protoreflect.Message {
	mi := &file_client_frr_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpNeighborRouteMaps.ProtoReflect.Descriptor instead.
func (*BgpNeighborRouteMaps) Descriptor() ([]byte, []int) {
	return file_client_frr_proto_rawDescGZIP(), []int{3}
}

func (x *BgpNeighborRouteMaps) GetRouteMapIn() string {
	if x != nil {
		return x.RouteMapIn
	}
	return ""
}

func (x *BgpNeighborRouteMaps) GetRouteMapOut() string {
	if x != nil {
		return x.RouteMapOut
	}
	return ""
}

// BGP Neighbor Prefix Lists
type BgpNeighborPrefixLists struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PrefixListIn  string `protobuf:"bytes,1,opt,name=prefix_list_in,json=prefixListIn,proto3" json:"prefix_list_in,omitempty"`
	PrefixListOut string `protobuf:"bytes,2,opt,name=prefix_list_out,json=prefixListOut,proto3" json:"prefix_list_out,omitempty"`
}

func (x *BgpNeighborPrefixLists) Reset() {
	*x = BgpNeighborPrefixLists{}
	mi := &file_client_frr_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BgpNeighborPrefixLists) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpNeighborPrefixLists) ProtoMessage() {}

func (x *BgpNeighborPrefixLists) ProtoReflect() protoreflect.Message {
	mi := &file_client_frr_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpNeighborPrefixLists.ProtoReflect.Descriptor instead.
func (*BgpNeighborPrefixLists) Descriptor() ([]byte, []int) {
	return file_client_frr_proto_rawDescGZIP(), []int{4}
}

func (x *BgpNeighborPrefixLists) GetPrefixListIn() string {
	if x != nil {
		return x.PrefixListIn
	}
	return ""
}

func (x *BgpNeighborPrefixLists) GetPrefixListOut() string {
	if x != nil {
		return x.PrefixListOut
	}
	return ""
}

// BGP Route Map Configuration
type BgpRouteMap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name            string              `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Sequence        uint32              `protobuf:"varint,2,opt,name=sequence,proto3" json:"sequence,omitempty"`
	Action          BgpRouteMapAction   `protobuf:"varint,3,opt,name=action,proto3,enum=client.BgpRouteMapAction" json:"action,omitempty"`
	MatchConditions []*BgpRouteMapMatch `protobuf:"bytes,4,rep,name=match_conditions,json=matchConditions,proto3" json:"match_conditions,omitempty"`
	SetActions      []*BgpRouteMapSet   `protobuf:"bytes,5,rep,name=set_actions,json=setActions,proto3" json:"set_actions,omitempty"`
	Description     string              `protobuf:"bytes,6,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *BgpRouteMap) Reset() {
	*x = BgpRouteMap{}
	mi := &file_client_frr_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BgpRouteMap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpRouteMap) ProtoMessage() {}

func (x *BgpRouteMap) ProtoReflect() protoreflect.Message {
	mi := &file_client_frr_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpRouteMap.ProtoReflect.Descriptor instead.
func (*BgpRouteMap) Descriptor() ([]byte, []int) {
	return file_client_frr_proto_rawDescGZIP(), []int{5}
}

func (x *BgpRouteMap) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *BgpRouteMap) GetSequence() uint32 {
	if x != nil {
		return x.Sequence
	}
	return 0
}

func (x *BgpRouteMap) GetAction() BgpRouteMapAction {
	if x != nil {
		return x.Action
	}
	return BgpRouteMapAction_ROUTE_MAP_UNKNOWN
}

func (x *BgpRouteMap) GetMatchConditions() []*BgpRouteMapMatch {
	if x != nil {
		return x.MatchConditions
	}
	return nil
}

func (x *BgpRouteMap) GetSetActions() []*BgpRouteMapSet {
	if x != nil {
		return x.SetActions
	}
	return nil
}

func (x *BgpRouteMap) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

// BGP Route Map Match Conditions
type BgpRouteMapMatch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MatchType  string `protobuf:"bytes,1,opt,name=match_type,json=matchType,proto3" json:"match_type,omitempty"` // "as-path", "community", "prefix-list", etc.
	MatchValue string `protobuf:"bytes,2,opt,name=match_value,json=matchValue,proto3" json:"match_value,omitempty"`
	ExactMatch bool   `protobuf:"varint,3,opt,name=exact_match,json=exactMatch,proto3" json:"exact_match,omitempty"`
}

func (x *BgpRouteMapMatch) Reset() {
	*x = BgpRouteMapMatch{}
	mi := &file_client_frr_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BgpRouteMapMatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpRouteMapMatch) ProtoMessage() {}

func (x *BgpRouteMapMatch) ProtoReflect() protoreflect.Message {
	mi := &file_client_frr_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpRouteMapMatch.ProtoReflect.Descriptor instead.
func (*BgpRouteMapMatch) Descriptor() ([]byte, []int) {
	return file_client_frr_proto_rawDescGZIP(), []int{6}
}

func (x *BgpRouteMapMatch) GetMatchType() string {
	if x != nil {
		return x.MatchType
	}
	return ""
}

func (x *BgpRouteMapMatch) GetMatchValue() string {
	if x != nil {
		return x.MatchValue
	}
	return ""
}

func (x *BgpRouteMapMatch) GetExactMatch() bool {
	if x != nil {
		return x.ExactMatch
	}
	return false
}

// BGP Route Map Set Actions
type BgpRouteMapSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SetType  string `protobuf:"bytes,1,opt,name=set_type,json=setType,proto3" json:"set_type,omitempty"` // "local-preference", "metric", "community", etc.
	SetValue string `protobuf:"bytes,2,opt,name=set_value,json=setValue,proto3" json:"set_value,omitempty"`
	Additive bool   `protobuf:"varint,3,opt,name=additive,proto3" json:"additive,omitempty"` // For community, as-path-prepend
}

func (x *BgpRouteMapSet) Reset() {
	*x = BgpRouteMapSet{}
	mi := &file_client_frr_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BgpRouteMapSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpRouteMapSet) ProtoMessage() {}

func (x *BgpRouteMapSet) ProtoReflect() protoreflect.Message {
	mi := &file_client_frr_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpRouteMapSet.ProtoReflect.Descriptor instead.
func (*BgpRouteMapSet) Descriptor() ([]byte, []int) {
	return file_client_frr_proto_rawDescGZIP(), []int{7}
}

func (x *BgpRouteMapSet) GetSetType() string {
	if x != nil {
		return x.SetType
	}
	return ""
}

func (x *BgpRouteMapSet) GetSetValue() string {
	if x != nil {
		return x.SetValue
	}
	return ""
}

func (x *BgpRouteMapSet) GetAdditive() bool {
	if x != nil {
		return x.Additive
	}
	return false
}

// BGP Community List
type BgpCommunityList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name            string            `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Sequence        uint32            `protobuf:"varint,2,opt,name=sequence,proto3" json:"sequence,omitempty"`
	Action          BgpRouteMapAction `protobuf:"varint,3,opt,name=action,proto3,enum=client.BgpRouteMapAction" json:"action,omitempty"`           // permit/deny
	CommunityValues string            `protobuf:"bytes,4,opt,name=community_values,json=communityValues,proto3" json:"community_values,omitempty"` // Space-separated community values
}

func (x *BgpCommunityList) Reset() {
	*x = BgpCommunityList{}
	mi := &file_client_frr_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BgpCommunityList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpCommunityList) ProtoMessage() {}

func (x *BgpCommunityList) ProtoReflect() protoreflect.Message {
	mi := &file_client_frr_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpCommunityList.ProtoReflect.Descriptor instead.
func (*BgpCommunityList) Descriptor() ([]byte, []int) {
	return file_client_frr_proto_rawDescGZIP(), []int{8}
}

func (x *BgpCommunityList) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *BgpCommunityList) GetSequence() uint32 {
	if x != nil {
		return x.Sequence
	}
	return 0
}

func (x *BgpCommunityList) GetAction() BgpRouteMapAction {
	if x != nil {
		return x.Action
	}
	return BgpRouteMapAction_ROUTE_MAP_UNKNOWN
}

func (x *BgpCommunityList) GetCommunityValues() string {
	if x != nil {
		return x.CommunityValues
	}
	return ""
}

// BGP Prefix List
type BgpPrefixList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name     string            `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Sequence uint32            `protobuf:"varint,2,opt,name=sequence,proto3" json:"sequence,omitempty"`
	Action   BgpRouteMapAction `protobuf:"varint,3,opt,name=action,proto3,enum=client.BgpRouteMapAction" json:"action,omitempty"` // permit/deny
	Prefix   string            `protobuf:"bytes,4,opt,name=prefix,proto3" json:"prefix,omitempty"`
	Le       uint32            `protobuf:"varint,5,opt,name=le,proto3" json:"le,omitempty"` // less-equal prefix length
	Ge       uint32            `protobuf:"varint,6,opt,name=ge,proto3" json:"ge,omitempty"` // greater-equal prefix length
}

func (x *BgpPrefixList) Reset() {
	*x = BgpPrefixList{}
	mi := &file_client_frr_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BgpPrefixList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpPrefixList) ProtoMessage() {}

func (x *BgpPrefixList) ProtoReflect() protoreflect.Message {
	mi := &file_client_frr_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpPrefixList.ProtoReflect.Descriptor instead.
func (*BgpPrefixList) Descriptor() ([]byte, []int) {
	return file_client_frr_proto_rawDescGZIP(), []int{9}
}

func (x *BgpPrefixList) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *BgpPrefixList) GetSequence() uint32 {
	if x != nil {
		return x.Sequence
	}
	return 0
}

func (x *BgpPrefixList) GetAction() BgpRouteMapAction {
	if x != nil {
		return x.Action
	}
	return BgpRouteMapAction_ROUTE_MAP_UNKNOWN
}

func (x *BgpPrefixList) GetPrefix() string {
	if x != nil {
		return x.Prefix
	}
	return ""
}

func (x *BgpPrefixList) GetLe() uint32 {
	if x != nil {
		return x.Le
	}
	return 0
}

func (x *BgpPrefixList) GetGe() uint32 {
	if x != nil {
		return x.Ge
	}
	return 0
}

// Response for "show bgp summary json"
type ShowBgpSummary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Instances map[string]*BgpSummaryInstance `protobuf:"bytes,1,rep,name=instances,proto3" json:"instances,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ShowBgpSummary) Reset() {
	*x = ShowBgpSummary{}
	mi := &file_client_frr_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ShowBgpSummary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShowBgpSummary) ProtoMessage() {}

func (x *ShowBgpSummary) ProtoReflect() protoreflect.Message {
	mi := &file_client_frr_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShowBgpSummary.ProtoReflect.Descriptor instead.
func (*ShowBgpSummary) Descriptor() ([]byte, []int) {
	return file_client_frr_proto_rawDescGZIP(), []int{10}
}

func (x *ShowBgpSummary) GetInstances() map[string]*BgpSummaryInstance {
	if x != nil {
		return x.Instances
	}
	return nil
}

type BgpSummaryInstance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RouterId     uint32                         `protobuf:"varint,1,opt,name=router_id,json=routerId,proto3" json:"router_id,omitempty"`
	As           uint32                         `protobuf:"varint,2,opt,name=as,proto3" json:"as,omitempty"`
	TableVersion uint64                         `protobuf:"varint,3,opt,name=table_version,json=tableVersion,proto3" json:"table_version,omitempty"`
	RibEntries   uint32                         `protobuf:"varint,4,opt,name=rib_entries,json=ribEntries,proto3" json:"rib_entries,omitempty"`
	RibMemory    uint32                         `protobuf:"varint,5,opt,name=rib_memory,json=ribMemory,proto3" json:"rib_memory,omitempty"`
	PeerCount    uint32                         `protobuf:"varint,6,opt,name=peer_count,json=peerCount,proto3" json:"peer_count,omitempty"`
	PeerMemory   uint32                         `protobuf:"varint,7,opt,name=peer_memory,json=peerMemory,proto3" json:"peer_memory,omitempty"`
	Peers        map[string]*BgpPeerSummaryInfo `protobuf:"bytes,8,rep,name=peers,proto3" json:"peers,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *BgpSummaryInstance) Reset() {
	*x = BgpSummaryInstance{}
	mi := &file_client_frr_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BgpSummaryInstance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpSummaryInstance) ProtoMessage() {}

func (x *BgpSummaryInstance) ProtoReflect() protoreflect.Message {
	mi := &file_client_frr_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpSummaryInstance.ProtoReflect.Descriptor instead.
func (*BgpSummaryInstance) Descriptor() ([]byte, []int) {
	return file_client_frr_proto_rawDescGZIP(), []int{11}
}

func (x *BgpSummaryInstance) GetRouterId() uint32 {
	if x != nil {
		return x.RouterId
	}
	return 0
}

func (x *BgpSummaryInstance) GetAs() uint32 {
	if x != nil {
		return x.As
	}
	return 0
}

func (x *BgpSummaryInstance) GetTableVersion() uint64 {
	if x != nil {
		return x.TableVersion
	}
	return 0
}

func (x *BgpSummaryInstance) GetRibEntries() uint32 {
	if x != nil {
		return x.RibEntries
	}
	return 0
}

func (x *BgpSummaryInstance) GetRibMemory() uint32 {
	if x != nil {
		return x.RibMemory
	}
	return 0
}

func (x *BgpSummaryInstance) GetPeerCount() uint32 {
	if x != nil {
		return x.PeerCount
	}
	return 0
}

func (x *BgpSummaryInstance) GetPeerMemory() uint32 {
	if x != nil {
		return x.PeerMemory
	}
	return 0
}

func (x *BgpSummaryInstance) GetPeers() map[string]*BgpPeerSummaryInfo {
	if x != nil {
		return x.Peers
	}
	return nil
}

type BgpPeerSummaryInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RemoteAs       uint32 `protobuf:"varint,1,opt,name=remote_as,json=remoteAs,proto3" json:"remote_as,omitempty"`
	LocalAs        uint32 `protobuf:"varint,2,opt,name=local_as,json=localAs,proto3" json:"local_as,omitempty"`
	State          string `protobuf:"bytes,3,opt,name=state,proto3" json:"state,omitempty"`
	Uptime         uint64 `protobuf:"varint,4,opt,name=uptime,proto3" json:"uptime,omitempty"`
	PrefixReceived uint32 `protobuf:"varint,5,opt,name=prefix_received,json=prefixReceived,proto3" json:"prefix_received,omitempty"`
	PrefixSent     uint32 `protobuf:"varint,6,opt,name=prefix_sent,json=prefixSent,proto3" json:"prefix_sent,omitempty"`
	StatePfxRcd    string `protobuf:"bytes,7,opt,name=state_pfx_rcd,json=statePfxRcd,proto3" json:"state_pfx_rcd,omitempty"`
}

func (x *BgpPeerSummaryInfo) Reset() {
	*x = BgpPeerSummaryInfo{}
	mi := &file_client_frr_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BgpPeerSummaryInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpPeerSummaryInfo) ProtoMessage() {}

func (x *BgpPeerSummaryInfo) ProtoReflect() protoreflect.Message {
	mi := &file_client_frr_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpPeerSummaryInfo.ProtoReflect.Descriptor instead.
func (*BgpPeerSummaryInfo) Descriptor() ([]byte, []int) {
	return file_client_frr_proto_rawDescGZIP(), []int{12}
}

func (x *BgpPeerSummaryInfo) GetRemoteAs() uint32 {
	if x != nil {
		return x.RemoteAs
	}
	return 0
}

func (x *BgpPeerSummaryInfo) GetLocalAs() uint32 {
	if x != nil {
		return x.LocalAs
	}
	return 0
}

func (x *BgpPeerSummaryInfo) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *BgpPeerSummaryInfo) GetUptime() uint64 {
	if x != nil {
		return x.Uptime
	}
	return 0
}

func (x *BgpPeerSummaryInfo) GetPrefixReceived() uint32 {
	if x != nil {
		return x.PrefixReceived
	}
	return 0
}

func (x *BgpPeerSummaryInfo) GetPrefixSent() uint32 {
	if x != nil {
		return x.PrefixSent
	}
	return 0
}

func (x *BgpPeerSummaryInfo) GetStatePfxRcd() string {
	if x != nil {
		return x.StatePfxRcd
	}
	return ""
}

// Response for "show bgp ipv4 neighbors json"
type ShowBgpNeighbors struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Neighbors map[string]*BgpNeighborInfo `protobuf:"bytes,1,rep,name=neighbors,proto3" json:"neighbors,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ShowBgpNeighbors) Reset() {
	*x = ShowBgpNeighbors{}
	mi := &file_client_frr_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ShowBgpNeighbors) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShowBgpNeighbors) ProtoMessage() {}

func (x *ShowBgpNeighbors) ProtoReflect() protoreflect.Message {
	mi := &file_client_frr_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShowBgpNeighbors.ProtoReflect.Descriptor instead.
func (*ShowBgpNeighbors) Descriptor() ([]byte, []int) {
	return file_client_frr_proto_rawDescGZIP(), []int{13}
}

func (x *ShowBgpNeighbors) GetNeighbors() map[string]*BgpNeighborInfo {
	if x != nil {
		return x.Neighbors
	}
	return nil
}

type BgpNeighborInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RemoteAs                                       uint32                  `protobuf:"varint,1,opt,name=remote_as,json=remoteAs,proto3" json:"remote_as,omitempty"`
	LocalAs                                        uint32                  `protobuf:"varint,2,opt,name=local_as,json=localAs,proto3" json:"local_as,omitempty"`
	LocalAsReplaceAsDualAs                         bool                    `protobuf:"varint,3,opt,name=local_as_replace_as_dual_as,json=localAsReplaceAsDualAs,proto3" json:"local_as_replace_as_dual_as,omitempty"`
	NbrExternalLink                                bool                    `protobuf:"varint,4,opt,name=nbr_external_link,json=nbrExternalLink,proto3" json:"nbr_external_link,omitempty"`
	LocalRole                                      string                  `protobuf:"bytes,5,opt,name=local_role,json=localRole,proto3" json:"local_role,omitempty"`
	RemoteRole                                     string                  `protobuf:"bytes,6,opt,name=remote_role,json=remoteRole,proto3" json:"remote_role,omitempty"`
	NbrDesc                                        string                  `protobuf:"bytes,7,opt,name=nbr_desc,json=nbrDesc,proto3" json:"nbr_desc,omitempty"`
	Hostname                                       string                  `protobuf:"bytes,8,opt,name=hostname,proto3" json:"hostname,omitempty"`
	BgpVersion                                     uint32                  `protobuf:"varint,9,opt,name=bgp_version,json=bgpVersion,proto3" json:"bgp_version,omitempty"`
	RemoteRouterId                                 string                  `protobuf:"bytes,10,opt,name=remote_router_id,json=remoteRouterId,proto3" json:"remote_router_id,omitempty"`
	LocalRouterId                                  string                  `protobuf:"bytes,11,opt,name=local_router_id,json=localRouterId,proto3" json:"local_router_id,omitempty"`
	BgpState                                       string                  `protobuf:"bytes,12,opt,name=bgp_state,json=bgpState,proto3" json:"bgp_state,omitempty"`
	BgpTimerLastRead                               uint64                  `protobuf:"varint,13,opt,name=bgp_timer_last_read,json=bgpTimerLastRead,proto3" json:"bgp_timer_last_read,omitempty"`
	BgpTimerLastWrite                              uint64                  `protobuf:"varint,14,opt,name=bgp_timer_last_write,json=bgpTimerLastWrite,proto3" json:"bgp_timer_last_write,omitempty"`
	BgpInUpdateElapsedTimeMsecs                    uint64                  `protobuf:"varint,15,opt,name=bgp_in_update_elapsed_time_msecs,json=bgpInUpdateElapsedTimeMsecs,proto3" json:"bgp_in_update_elapsed_time_msecs,omitempty"`
	BgpTimerConfiguredHoldTimeMsecs                uint64                  `protobuf:"varint,16,opt,name=bgp_timer_configured_hold_time_msecs,json=bgpTimerConfiguredHoldTimeMsecs,proto3" json:"bgp_timer_configured_hold_time_msecs,omitempty"`
	BgpTimerConfiguredKeepAliveIntervalMsecs       uint64                  `protobuf:"varint,17,opt,name=bgp_timer_configured_keep_alive_interval_msecs,json=bgpTimerConfiguredKeepAliveIntervalMsecs,proto3" json:"bgp_timer_configured_keep_alive_interval_msecs,omitempty"`
	BgpTimerHoldTimeMsecs                          uint64                  `protobuf:"varint,18,opt,name=bgp_timer_hold_time_msecs,json=bgpTimerHoldTimeMsecs,proto3" json:"bgp_timer_hold_time_msecs,omitempty"`
	BgpTimerKeepAliveIntervalMsecs                 uint64                  `protobuf:"varint,19,opt,name=bgp_timer_keep_alive_interval_msecs,json=bgpTimerKeepAliveIntervalMsecs,proto3" json:"bgp_timer_keep_alive_interval_msecs,omitempty"`
	BgpTcpMssConfigured                            uint32                  `protobuf:"varint,20,opt,name=bgp_tcp_mss_configured,json=bgpTcpMssConfigured,proto3" json:"bgp_tcp_mss_configured,omitempty"`
	BgpTcpMssSynced                                uint32                  `protobuf:"varint,21,opt,name=bgp_tcp_mss_synced,json=bgpTcpMssSynced,proto3" json:"bgp_tcp_mss_synced,omitempty"`
	ExtendedOptionalParametersLength               bool                    `protobuf:"varint,22,opt,name=extended_optional_parameters_length,json=extendedOptionalParametersLength,proto3" json:"extended_optional_parameters_length,omitempty"`
	BgpTimerConfiguredConditionalAdvertisementsSec uint32                  `protobuf:"varint,23,opt,name=bgp_timer_configured_conditional_advertisements_sec,json=bgpTimerConfiguredConditionalAdvertisementsSec,proto3" json:"bgp_timer_configured_conditional_advertisements_sec,omitempty"`
	GracefulRestartInfo                            *BgpGracefulRestartInfo `protobuf:"bytes,24,opt,name=graceful_restart_info,json=gracefulRestartInfo,proto3" json:"graceful_restart_info,omitempty"`
	MessageStats                                   *BgpMessageStats        `protobuf:"bytes,25,opt,name=message_stats,json=messageStats,proto3" json:"message_stats,omitempty"`
	PrefixStats                                    *BgpPrefixStats         `protobuf:"bytes,26,opt,name=prefix_stats,json=prefixStats,proto3" json:"prefix_stats,omitempty"`
	MinBtwnAdvertisementRunsTimerMsecs             uint32                  `protobuf:"varint,27,opt,name=min_btwn_advertisement_runs_timer_msecs,json=minBtwnAdvertisementRunsTimerMsecs,proto3" json:"min_btwn_advertisement_runs_timer_msecs,omitempty"`
	AddressFamilyInfo                              *BgpAddressFamilyInfo   `protobuf:"bytes,28,opt,name=address_family_info,json=addressFamilyInfo,proto3" json:"address_family_info,omitempty"`
	ConnectionsEstablished                         uint32                  `protobuf:"varint,29,opt,name=connections_established,json=connectionsEstablished,proto3" json:"connections_established,omitempty"`
	ConnectionsDropped                             uint32                  `protobuf:"varint,30,opt,name=connections_dropped,json=connectionsDropped,proto3" json:"connections_dropped,omitempty"`
	LastResetTimerMsecs                            uint64                  `protobuf:"varint,31,opt,name=last_reset_timer_msecs,json=lastResetTimerMsecs,proto3" json:"last_reset_timer_msecs,omitempty"`
	LastResetDueTo                                 string                  `protobuf:"bytes,32,opt,name=last_reset_due_to,json=lastResetDueTo,proto3" json:"last_reset_due_to,omitempty"`
	LastResetCode                                  uint32                  `protobuf:"varint,33,opt,name=last_reset_code,json=lastResetCode,proto3" json:"last_reset_code,omitempty"`
	SoftwareVersion                                string                  `protobuf:"bytes,34,opt,name=software_version,json=softwareVersion,proto3" json:"software_version,omitempty"`
	ExternalBgpNbrMaxHopsAway                      uint32                  `protobuf:"varint,35,opt,name=external_bgp_nbr_max_hops_away,json=externalBgpNbrMaxHopsAway,proto3" json:"external_bgp_nbr_max_hops_away,omitempty"`
	HostLocal                                      string                  `protobuf:"bytes,36,opt,name=host_local,json=hostLocal,proto3" json:"host_local,omitempty"`
	PortLocal                                      uint32                  `protobuf:"varint,37,opt,name=port_local,json=portLocal,proto3" json:"port_local,omitempty"`
	HostForeign                                    string                  `protobuf:"bytes,38,opt,name=host_foreign,json=hostForeign,proto3" json:"host_foreign,omitempty"`
	PortForeign                                    uint32                  `protobuf:"varint,39,opt,name=port_foreign,json=portForeign,proto3" json:"port_foreign,omitempty"`
	Nexthop                                        string                  `protobuf:"bytes,40,opt,name=nexthop,proto3" json:"nexthop,omitempty"`
	NexthopGlobal                                  string                  `protobuf:"bytes,41,opt,name=nexthop_global,json=nexthopGlobal,proto3" json:"nexthop_global,omitempty"`
	NexthopLocal                                   string                  `protobuf:"bytes,42,opt,name=nexthop_local,json=nexthopLocal,proto3" json:"nexthop_local,omitempty"`
	BgpConnection                                  string                  `protobuf:"bytes,43,opt,name=bgp_connection,json=bgpConnection,proto3" json:"bgp_connection,omitempty"`
	ConnectRetryTimer                              uint32                  `protobuf:"varint,44,opt,name=connect_retry_timer,json=connectRetryTimer,proto3" json:"connect_retry_timer,omitempty"`
	NextConnectTimerDueInMsecs                     uint64                  `protobuf:"varint,45,opt,name=next_connect_timer_due_in_msecs,json=nextConnectTimerDueInMsecs,proto3" json:"next_connect_timer_due_in_msecs,omitempty"`
	ReadThread                                     string                  `protobuf:"bytes,46,opt,name=read_thread,json=readThread,proto3" json:"read_thread,omitempty"`
	WriteThread                                    string                  `protobuf:"bytes,47,opt,name=write_thread,json=writeThread,proto3" json:"write_thread,omitempty"`
}

func (x *BgpNeighborInfo) Reset() {
	*x = BgpNeighborInfo{}
	mi := &file_client_frr_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BgpNeighborInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpNeighborInfo) ProtoMessage() {}

func (x *BgpNeighborInfo) ProtoReflect() protoreflect.Message {
	mi := &file_client_frr_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpNeighborInfo.ProtoReflect.Descriptor instead.
func (*BgpNeighborInfo) Descriptor() ([]byte, []int) {
	return file_client_frr_proto_rawDescGZIP(), []int{14}
}

func (x *BgpNeighborInfo) GetRemoteAs() uint32 {
	if x != nil {
		return x.RemoteAs
	}
	return 0
}

func (x *BgpNeighborInfo) GetLocalAs() uint32 {
	if x != nil {
		return x.LocalAs
	}
	return 0
}

func (x *BgpNeighborInfo) GetLocalAsReplaceAsDualAs() bool {
	if x != nil {
		return x.LocalAsReplaceAsDualAs
	}
	return false
}

func (x *BgpNeighborInfo) GetNbrExternalLink() bool {
	if x != nil {
		return x.NbrExternalLink
	}
	return false
}

func (x *BgpNeighborInfo) GetLocalRole() string {
	if x != nil {
		return x.LocalRole
	}
	return ""
}

func (x *BgpNeighborInfo) GetRemoteRole() string {
	if x != nil {
		return x.RemoteRole
	}
	return ""
}

func (x *BgpNeighborInfo) GetNbrDesc() string {
	if x != nil {
		return x.NbrDesc
	}
	return ""
}

func (x *BgpNeighborInfo) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

func (x *BgpNeighborInfo) GetBgpVersion() uint32 {
	if x != nil {
		return x.BgpVersion
	}
	return 0
}

func (x *BgpNeighborInfo) GetRemoteRouterId() string {
	if x != nil {
		return x.RemoteRouterId
	}
	return ""
}

func (x *BgpNeighborInfo) GetLocalRouterId() string {
	if x != nil {
		return x.LocalRouterId
	}
	return ""
}

func (x *BgpNeighborInfo) GetBgpState() string {
	if x != nil {
		return x.BgpState
	}
	return ""
}

func (x *BgpNeighborInfo) GetBgpTimerLastRead() uint64 {
	if x != nil {
		return x.BgpTimerLastRead
	}
	return 0
}

func (x *BgpNeighborInfo) GetBgpTimerLastWrite() uint64 {
	if x != nil {
		return x.BgpTimerLastWrite
	}
	return 0
}

func (x *BgpNeighborInfo) GetBgpInUpdateElapsedTimeMsecs() uint64 {
	if x != nil {
		return x.BgpInUpdateElapsedTimeMsecs
	}
	return 0
}

func (x *BgpNeighborInfo) GetBgpTimerConfiguredHoldTimeMsecs() uint64 {
	if x != nil {
		return x.BgpTimerConfiguredHoldTimeMsecs
	}
	return 0
}

func (x *BgpNeighborInfo) GetBgpTimerConfiguredKeepAliveIntervalMsecs() uint64 {
	if x != nil {
		return x.BgpTimerConfiguredKeepAliveIntervalMsecs
	}
	return 0
}

func (x *BgpNeighborInfo) GetBgpTimerHoldTimeMsecs() uint64 {
	if x != nil {
		return x.BgpTimerHoldTimeMsecs
	}
	return 0
}

func (x *BgpNeighborInfo) GetBgpTimerKeepAliveIntervalMsecs() uint64 {
	if x != nil {
		return x.BgpTimerKeepAliveIntervalMsecs
	}
	return 0
}

func (x *BgpNeighborInfo) GetBgpTcpMssConfigured() uint32 {
	if x != nil {
		return x.BgpTcpMssConfigured
	}
	return 0
}

func (x *BgpNeighborInfo) GetBgpTcpMssSynced() uint32 {
	if x != nil {
		return x.BgpTcpMssSynced
	}
	return 0
}

func (x *BgpNeighborInfo) GetExtendedOptionalParametersLength() bool {
	if x != nil {
		return x.ExtendedOptionalParametersLength
	}
	return false
}

func (x *BgpNeighborInfo) GetBgpTimerConfiguredConditionalAdvertisementsSec() uint32 {
	if x != nil {
		return x.BgpTimerConfiguredConditionalAdvertisementsSec
	}
	return 0
}

func (x *BgpNeighborInfo) GetGracefulRestartInfo() *BgpGracefulRestartInfo {
	if x != nil {
		return x.GracefulRestartInfo
	}
	return nil
}

func (x *BgpNeighborInfo) GetMessageStats() *BgpMessageStats {
	if x != nil {
		return x.MessageStats
	}
	return nil
}

func (x *BgpNeighborInfo) GetPrefixStats() *BgpPrefixStats {
	if x != nil {
		return x.PrefixStats
	}
	return nil
}

func (x *BgpNeighborInfo) GetMinBtwnAdvertisementRunsTimerMsecs() uint32 {
	if x != nil {
		return x.MinBtwnAdvertisementRunsTimerMsecs
	}
	return 0
}

func (x *BgpNeighborInfo) GetAddressFamilyInfo() *BgpAddressFamilyInfo {
	if x != nil {
		return x.AddressFamilyInfo
	}
	return nil
}

func (x *BgpNeighborInfo) GetConnectionsEstablished() uint32 {
	if x != nil {
		return x.ConnectionsEstablished
	}
	return 0
}

func (x *BgpNeighborInfo) GetConnectionsDropped() uint32 {
	if x != nil {
		return x.ConnectionsDropped
	}
	return 0
}

func (x *BgpNeighborInfo) GetLastResetTimerMsecs() uint64 {
	if x != nil {
		return x.LastResetTimerMsecs
	}
	return 0
}

func (x *BgpNeighborInfo) GetLastResetDueTo() string {
	if x != nil {
		return x.LastResetDueTo
	}
	return ""
}

func (x *BgpNeighborInfo) GetLastResetCode() uint32 {
	if x != nil {
		return x.LastResetCode
	}
	return 0
}

func (x *BgpNeighborInfo) GetSoftwareVersion() string {
	if x != nil {
		return x.SoftwareVersion
	}
	return ""
}

func (x *BgpNeighborInfo) GetExternalBgpNbrMaxHopsAway() uint32 {
	if x != nil {
		return x.ExternalBgpNbrMaxHopsAway
	}
	return 0
}

func (x *BgpNeighborInfo) GetHostLocal() string {
	if x != nil {
		return x.HostLocal
	}
	return ""
}

func (x *BgpNeighborInfo) GetPortLocal() uint32 {
	if x != nil {
		return x.PortLocal
	}
	return 0
}

func (x *BgpNeighborInfo) GetHostForeign() string {
	if x != nil {
		return x.HostForeign
	}
	return ""
}

func (x *BgpNeighborInfo) GetPortForeign() uint32 {
	if x != nil {
		return x.PortForeign
	}
	return 0
}

func (x *BgpNeighborInfo) GetNexthop() string {
	if x != nil {
		return x.Nexthop
	}
	return ""
}

func (x *BgpNeighborInfo) GetNexthopGlobal() string {
	if x != nil {
		return x.NexthopGlobal
	}
	return ""
}

func (x *BgpNeighborInfo) GetNexthopLocal() string {
	if x != nil {
		return x.NexthopLocal
	}
	return ""
}

func (x *BgpNeighborInfo) GetBgpConnection() string {
	if x != nil {
		return x.BgpConnection
	}
	return ""
}

func (x *BgpNeighborInfo) GetConnectRetryTimer() uint32 {
	if x != nil {
		return x.ConnectRetryTimer
	}
	return 0
}

func (x *BgpNeighborInfo) GetNextConnectTimerDueInMsecs() uint64 {
	if x != nil {
		return x.NextConnectTimerDueInMsecs
	}
	return 0
}

func (x *BgpNeighborInfo) GetReadThread() string {
	if x != nil {
		return x.ReadThread
	}
	return ""
}

func (x *BgpNeighborInfo) GetWriteThread() string {
	if x != nil {
		return x.WriteThread
	}
	return ""
}

type BgpGracefulRestartInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EndOfRibSend map[string]bool           `protobuf:"bytes,1,rep,name=end_of_rib_send,json=endOfRibSend,proto3" json:"end_of_rib_send,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	EndOfRibRecv map[string]bool           `protobuf:"bytes,2,rep,name=end_of_rib_recv,json=endOfRibRecv,proto3" json:"end_of_rib_recv,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	LocalGrMode  string                    `protobuf:"bytes,3,opt,name=local_gr_mode,json=localGrMode,proto3" json:"local_gr_mode,omitempty"`
	RemoteGrMode string                    `protobuf:"bytes,4,opt,name=remote_gr_mode,json=remoteGrMode,proto3" json:"remote_gr_mode,omitempty"`
	RBit         bool                      `protobuf:"varint,5,opt,name=r_bit,json=rBit,proto3" json:"r_bit,omitempty"`
	NBit         bool                      `protobuf:"varint,6,opt,name=n_bit,json=nBit,proto3" json:"n_bit,omitempty"`
	Timers       *BgpGracefulRestartTimers `protobuf:"bytes,7,opt,name=timers,proto3" json:"timers,omitempty"`
}

func (x *BgpGracefulRestartInfo) Reset() {
	*x = BgpGracefulRestartInfo{}
	mi := &file_client_frr_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BgpGracefulRestartInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpGracefulRestartInfo) ProtoMessage() {}

func (x *BgpGracefulRestartInfo) ProtoReflect() protoreflect.Message {
	mi := &file_client_frr_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpGracefulRestartInfo.ProtoReflect.Descriptor instead.
func (*BgpGracefulRestartInfo) Descriptor() ([]byte, []int) {
	return file_client_frr_proto_rawDescGZIP(), []int{15}
}

func (x *BgpGracefulRestartInfo) GetEndOfRibSend() map[string]bool {
	if x != nil {
		return x.EndOfRibSend
	}
	return nil
}

func (x *BgpGracefulRestartInfo) GetEndOfRibRecv() map[string]bool {
	if x != nil {
		return x.EndOfRibRecv
	}
	return nil
}

func (x *BgpGracefulRestartInfo) GetLocalGrMode() string {
	if x != nil {
		return x.LocalGrMode
	}
	return ""
}

func (x *BgpGracefulRestartInfo) GetRemoteGrMode() string {
	if x != nil {
		return x.RemoteGrMode
	}
	return ""
}

func (x *BgpGracefulRestartInfo) GetRBit() bool {
	if x != nil {
		return x.RBit
	}
	return false
}

func (x *BgpGracefulRestartInfo) GetNBit() bool {
	if x != nil {
		return x.NBit
	}
	return false
}

func (x *BgpGracefulRestartInfo) GetTimers() *BgpGracefulRestartTimers {
	if x != nil {
		return x.Timers
	}
	return nil
}

type BgpGracefulRestartTimers struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConfiguredRestartTimer  uint32 `protobuf:"varint,1,opt,name=configured_restart_timer,json=configuredRestartTimer,proto3" json:"configured_restart_timer,omitempty"`
	ConfiguredLlgrStaleTime uint32 `protobuf:"varint,2,opt,name=configured_llgr_stale_time,json=configuredLlgrStaleTime,proto3" json:"configured_llgr_stale_time,omitempty"`
	ReceivedRestartTimer    uint32 `protobuf:"varint,3,opt,name=received_restart_timer,json=receivedRestartTimer,proto3" json:"received_restart_timer,omitempty"`
}

func (x *BgpGracefulRestartTimers) Reset() {
	*x = BgpGracefulRestartTimers{}
	mi := &file_client_frr_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BgpGracefulRestartTimers) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpGracefulRestartTimers) ProtoMessage() {}

func (x *BgpGracefulRestartTimers) ProtoReflect() protoreflect.Message {
	mi := &file_client_frr_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpGracefulRestartTimers.ProtoReflect.Descriptor instead.
func (*BgpGracefulRestartTimers) Descriptor() ([]byte, []int) {
	return file_client_frr_proto_rawDescGZIP(), []int{16}
}

func (x *BgpGracefulRestartTimers) GetConfiguredRestartTimer() uint32 {
	if x != nil {
		return x.ConfiguredRestartTimer
	}
	return 0
}

func (x *BgpGracefulRestartTimers) GetConfiguredLlgrStaleTime() uint32 {
	if x != nil {
		return x.ConfiguredLlgrStaleTime
	}
	return 0
}

func (x *BgpGracefulRestartTimers) GetReceivedRestartTimer() uint32 {
	if x != nil {
		return x.ReceivedRestartTimer
	}
	return 0
}

type BgpMessageStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DepthInq          uint32 `protobuf:"varint,1,opt,name=depth_inq,json=depthInq,proto3" json:"depth_inq,omitempty"`
	DepthOutq         uint32 `protobuf:"varint,2,opt,name=depth_outq,json=depthOutq,proto3" json:"depth_outq,omitempty"`
	OpensSent         uint32 `protobuf:"varint,3,opt,name=opens_sent,json=opensSent,proto3" json:"opens_sent,omitempty"`
	OpensRecv         uint32 `protobuf:"varint,4,opt,name=opens_recv,json=opensRecv,proto3" json:"opens_recv,omitempty"`
	NotificationsSent uint32 `protobuf:"varint,5,opt,name=notifications_sent,json=notificationsSent,proto3" json:"notifications_sent,omitempty"`
	NotificationsRecv uint32 `protobuf:"varint,6,opt,name=notifications_recv,json=notificationsRecv,proto3" json:"notifications_recv,omitempty"`
	UpdatesSent       uint32 `protobuf:"varint,7,opt,name=updates_sent,json=updatesSent,proto3" json:"updates_sent,omitempty"`
	UpdatesRecv       uint32 `protobuf:"varint,8,opt,name=updates_recv,json=updatesRecv,proto3" json:"updates_recv,omitempty"`
	KeepalivesSent    uint32 `protobuf:"varint,9,opt,name=keepalives_sent,json=keepalivesSent,proto3" json:"keepalives_sent,omitempty"`
	KeepalivesRecv    uint32 `protobuf:"varint,10,opt,name=keepalives_recv,json=keepalivesRecv,proto3" json:"keepalives_recv,omitempty"`
	RouteRefreshSent  uint32 `protobuf:"varint,11,opt,name=route_refresh_sent,json=routeRefreshSent,proto3" json:"route_refresh_sent,omitempty"`
	RouteRefreshRecv  uint32 `protobuf:"varint,12,opt,name=route_refresh_recv,json=routeRefreshRecv,proto3" json:"route_refresh_recv,omitempty"`
	CapabilitySent    uint32 `protobuf:"varint,13,opt,name=capability_sent,json=capabilitySent,proto3" json:"capability_sent,omitempty"`
	CapabilityRecv    uint32 `protobuf:"varint,14,opt,name=capability_recv,json=capabilityRecv,proto3" json:"capability_recv,omitempty"`
	TotalSent         uint32 `protobuf:"varint,15,opt,name=total_sent,json=totalSent,proto3" json:"total_sent,omitempty"`
	TotalRecv         uint32 `protobuf:"varint,16,opt,name=total_recv,json=totalRecv,proto3" json:"total_recv,omitempty"`
}

func (x *BgpMessageStats) Reset() {
	*x = BgpMessageStats{}
	mi := &file_client_frr_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BgpMessageStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpMessageStats) ProtoMessage() {}

func (x *BgpMessageStats) ProtoReflect() protoreflect.Message {
	mi := &file_client_frr_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpMessageStats.ProtoReflect.Descriptor instead.
func (*BgpMessageStats) Descriptor() ([]byte, []int) {
	return file_client_frr_proto_rawDescGZIP(), []int{17}
}

func (x *BgpMessageStats) GetDepthInq() uint32 {
	if x != nil {
		return x.DepthInq
	}
	return 0
}

func (x *BgpMessageStats) GetDepthOutq() uint32 {
	if x != nil {
		return x.DepthOutq
	}
	return 0
}

func (x *BgpMessageStats) GetOpensSent() uint32 {
	if x != nil {
		return x.OpensSent
	}
	return 0
}

func (x *BgpMessageStats) GetOpensRecv() uint32 {
	if x != nil {
		return x.OpensRecv
	}
	return 0
}

func (x *BgpMessageStats) GetNotificationsSent() uint32 {
	if x != nil {
		return x.NotificationsSent
	}
	return 0
}

func (x *BgpMessageStats) GetNotificationsRecv() uint32 {
	if x != nil {
		return x.NotificationsRecv
	}
	return 0
}

func (x *BgpMessageStats) GetUpdatesSent() uint32 {
	if x != nil {
		return x.UpdatesSent
	}
	return 0
}

func (x *BgpMessageStats) GetUpdatesRecv() uint32 {
	if x != nil {
		return x.UpdatesRecv
	}
	return 0
}

func (x *BgpMessageStats) GetKeepalivesSent() uint32 {
	if x != nil {
		return x.KeepalivesSent
	}
	return 0
}

func (x *BgpMessageStats) GetKeepalivesRecv() uint32 {
	if x != nil {
		return x.KeepalivesRecv
	}
	return 0
}

func (x *BgpMessageStats) GetRouteRefreshSent() uint32 {
	if x != nil {
		return x.RouteRefreshSent
	}
	return 0
}

func (x *BgpMessageStats) GetRouteRefreshRecv() uint32 {
	if x != nil {
		return x.RouteRefreshRecv
	}
	return 0
}

func (x *BgpMessageStats) GetCapabilitySent() uint32 {
	if x != nil {
		return x.CapabilitySent
	}
	return 0
}

func (x *BgpMessageStats) GetCapabilityRecv() uint32 {
	if x != nil {
		return x.CapabilityRecv
	}
	return 0
}

func (x *BgpMessageStats) GetTotalSent() uint32 {
	if x != nil {
		return x.TotalSent
	}
	return 0
}

func (x *BgpMessageStats) GetTotalRecv() uint32 {
	if x != nil {
		return x.TotalRecv
	}
	return 0
}

type BgpPrefixStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InboundFiltered     uint32 `protobuf:"varint,1,opt,name=inbound_filtered,json=inboundFiltered,proto3" json:"inbound_filtered,omitempty"`
	AspathLoop          uint32 `protobuf:"varint,2,opt,name=aspath_loop,json=aspathLoop,proto3" json:"aspath_loop,omitempty"`
	OriginatorLoop      uint32 `protobuf:"varint,3,opt,name=originator_loop,json=originatorLoop,proto3" json:"originator_loop,omitempty"`
	ClusterLoop         uint32 `protobuf:"varint,4,opt,name=cluster_loop,json=clusterLoop,proto3" json:"cluster_loop,omitempty"`
	InvalidNextHop      uint32 `protobuf:"varint,5,opt,name=invalid_next_hop,json=invalidNextHop,proto3" json:"invalid_next_hop,omitempty"`
	Withdrawn           uint32 `protobuf:"varint,6,opt,name=withdrawn,proto3" json:"withdrawn,omitempty"`
	AttributesDiscarded uint32 `protobuf:"varint,7,opt,name=attributes_discarded,json=attributesDiscarded,proto3" json:"attributes_discarded,omitempty"`
}

func (x *BgpPrefixStats) Reset() {
	*x = BgpPrefixStats{}
	mi := &file_client_frr_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BgpPrefixStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpPrefixStats) ProtoMessage() {}

func (x *BgpPrefixStats) ProtoReflect() protoreflect.Message {
	mi := &file_client_frr_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpPrefixStats.ProtoReflect.Descriptor instead.
func (*BgpPrefixStats) Descriptor() ([]byte, []int) {
	return file_client_frr_proto_rawDescGZIP(), []int{18}
}

func (x *BgpPrefixStats) GetInboundFiltered() uint32 {
	if x != nil {
		return x.InboundFiltered
	}
	return 0
}

func (x *BgpPrefixStats) GetAspathLoop() uint32 {
	if x != nil {
		return x.AspathLoop
	}
	return 0
}

func (x *BgpPrefixStats) GetOriginatorLoop() uint32 {
	if x != nil {
		return x.OriginatorLoop
	}
	return 0
}

func (x *BgpPrefixStats) GetClusterLoop() uint32 {
	if x != nil {
		return x.ClusterLoop
	}
	return 0
}

func (x *BgpPrefixStats) GetInvalidNextHop() uint32 {
	if x != nil {
		return x.InvalidNextHop
	}
	return 0
}

func (x *BgpPrefixStats) GetWithdrawn() uint32 {
	if x != nil {
		return x.Withdrawn
	}
	return 0
}

func (x *BgpPrefixStats) GetAttributesDiscarded() uint32 {
	if x != nil {
		return x.AttributesDiscarded
	}
	return 0
}

type BgpAddressFamilyInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ipv4Unicast *BgpIpv4UnicastInfo `protobuf:"bytes,1,opt,name=ipv4_unicast,json=ipv4Unicast,proto3" json:"ipv4_unicast,omitempty"`
}

func (x *BgpAddressFamilyInfo) Reset() {
	*x = BgpAddressFamilyInfo{}
	mi := &file_client_frr_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BgpAddressFamilyInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpAddressFamilyInfo) ProtoMessage() {}

func (x *BgpAddressFamilyInfo) ProtoReflect() protoreflect.Message {
	mi := &file_client_frr_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpAddressFamilyInfo.ProtoReflect.Descriptor instead.
func (*BgpAddressFamilyInfo) Descriptor() ([]byte, []int) {
	return file_client_frr_proto_rawDescGZIP(), []int{19}
}

func (x *BgpAddressFamilyInfo) GetIpv4Unicast() *BgpIpv4UnicastInfo {
	if x != nil {
		return x.Ipv4Unicast
	}
	return nil
}

type BgpIpv4UnicastInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommAttriSentToNbr         string `protobuf:"bytes,1,opt,name=comm_attri_sent_to_nbr,json=commAttriSentToNbr,proto3" json:"comm_attri_sent_to_nbr,omitempty"`
	InboundEbgpRequiresPolicy  string `protobuf:"bytes,2,opt,name=inbound_ebgp_requires_policy,json=inboundEbgpRequiresPolicy,proto3" json:"inbound_ebgp_requires_policy,omitempty"`
	OutboundEbgpRequiresPolicy string `protobuf:"bytes,3,opt,name=outbound_ebgp_requires_policy,json=outboundEbgpRequiresPolicy,proto3" json:"outbound_ebgp_requires_policy,omitempty"`
	AcceptedPrefixCounter      uint32 `protobuf:"varint,4,opt,name=accepted_prefix_counter,json=acceptedPrefixCounter,proto3" json:"accepted_prefix_counter,omitempty"`
	RouterAlwaysNextHop        bool   `protobuf:"varint,5,opt,name=router_always_next_hop,json=routerAlwaysNextHop,proto3" json:"router_always_next_hop,omitempty"`
}

func (x *BgpIpv4UnicastInfo) Reset() {
	*x = BgpIpv4UnicastInfo{}
	mi := &file_client_frr_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BgpIpv4UnicastInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpIpv4UnicastInfo) ProtoMessage() {}

func (x *BgpIpv4UnicastInfo) ProtoReflect() protoreflect.Message {
	mi := &file_client_frr_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpIpv4UnicastInfo.ProtoReflect.Descriptor instead.
func (*BgpIpv4UnicastInfo) Descriptor() ([]byte, []int) {
	return file_client_frr_proto_rawDescGZIP(), []int{20}
}

func (x *BgpIpv4UnicastInfo) GetCommAttriSentToNbr() string {
	if x != nil {
		return x.CommAttriSentToNbr
	}
	return ""
}

func (x *BgpIpv4UnicastInfo) GetInboundEbgpRequiresPolicy() string {
	if x != nil {
		return x.InboundEbgpRequiresPolicy
	}
	return ""
}

func (x *BgpIpv4UnicastInfo) GetOutboundEbgpRequiresPolicy() string {
	if x != nil {
		return x.OutboundEbgpRequiresPolicy
	}
	return ""
}

func (x *BgpIpv4UnicastInfo) GetAcceptedPrefixCounter() uint32 {
	if x != nil {
		return x.AcceptedPrefixCounter
	}
	return 0
}

func (x *BgpIpv4UnicastInfo) GetRouterAlwaysNextHop() bool {
	if x != nil {
		return x.RouterAlwaysNextHop
	}
	return false
}

// Response for "show bgp ipv4 unicast json"
type ShowBgpRoutes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Routes map[string]*BgpRouteInfo `protobuf:"bytes,1,rep,name=routes,proto3" json:"routes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ShowBgpRoutes) Reset() {
	*x = ShowBgpRoutes{}
	mi := &file_client_frr_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ShowBgpRoutes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShowBgpRoutes) ProtoMessage() {}

func (x *ShowBgpRoutes) ProtoReflect() protoreflect.Message {
	mi := &file_client_frr_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShowBgpRoutes.ProtoReflect.Descriptor instead.
func (*ShowBgpRoutes) Descriptor() ([]byte, []int) {
	return file_client_frr_proto_rawDescGZIP(), []int{21}
}

func (x *ShowBgpRoutes) GetRoutes() map[string]*BgpRouteInfo {
	if x != nil {
		return x.Routes
	}
	return nil
}

type BgpRouteInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Paths []*BgpPath `protobuf:"bytes,1,rep,name=paths,proto3" json:"paths,omitempty"`
}

func (x *BgpRouteInfo) Reset() {
	*x = BgpRouteInfo{}
	mi := &file_client_frr_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BgpRouteInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpRouteInfo) ProtoMessage() {}

func (x *BgpRouteInfo) ProtoReflect() protoreflect.Message {
	mi := &file_client_frr_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpRouteInfo.ProtoReflect.Descriptor instead.
func (*BgpRouteInfo) Descriptor() ([]byte, []int) {
	return file_client_frr_proto_rawDescGZIP(), []int{22}
}

func (x *BgpRouteInfo) GetPaths() []*BgpPath {
	if x != nil {
		return x.Paths
	}
	return nil
}

type BgpPath struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Valid      bool   `protobuf:"varint,1,opt,name=valid,proto3" json:"valid,omitempty"`
	Best       bool   `protobuf:"varint,2,opt,name=best,proto3" json:"best,omitempty"`
	Nexthop    string `protobuf:"bytes,3,opt,name=nexthop,proto3" json:"nexthop,omitempty"`
	Metric     uint32 `protobuf:"varint,4,opt,name=metric,proto3" json:"metric,omitempty"`
	LocalPref  uint32 `protobuf:"varint,5,opt,name=local_pref,json=localPref,proto3" json:"local_pref,omitempty"`
	Weight     uint32 `protobuf:"varint,6,opt,name=weight,proto3" json:"weight,omitempty"`
	AsPath     string `protobuf:"bytes,7,opt,name=as_path,json=asPath,proto3" json:"as_path,omitempty"`
	Origin     string `protobuf:"bytes,8,opt,name=origin,proto3" json:"origin,omitempty"`
	LastUpdate uint64 `protobuf:"varint,9,opt,name=last_update,json=lastUpdate,proto3" json:"last_update,omitempty"`
	PeerId     string `protobuf:"bytes,10,opt,name=peer_id,json=peerId,proto3" json:"peer_id,omitempty"`
}

func (x *BgpPath) Reset() {
	*x = BgpPath{}
	mi := &file_client_frr_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BgpPath) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpPath) ProtoMessage() {}

func (x *BgpPath) ProtoReflect() protoreflect.Message {
	mi := &file_client_frr_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpPath.ProtoReflect.Descriptor instead.
func (*BgpPath) Descriptor() ([]byte, []int) {
	return file_client_frr_proto_rawDescGZIP(), []int{23}
}

func (x *BgpPath) GetValid() bool {
	if x != nil {
		return x.Valid
	}
	return false
}

func (x *BgpPath) GetBest() bool {
	if x != nil {
		return x.Best
	}
	return false
}

func (x *BgpPath) GetNexthop() string {
	if x != nil {
		return x.Nexthop
	}
	return ""
}

func (x *BgpPath) GetMetric() uint32 {
	if x != nil {
		return x.Metric
	}
	return 0
}

func (x *BgpPath) GetLocalPref() uint32 {
	if x != nil {
		return x.LocalPref
	}
	return 0
}

func (x *BgpPath) GetWeight() uint32 {
	if x != nil {
		return x.Weight
	}
	return 0
}

func (x *BgpPath) GetAsPath() string {
	if x != nil {
		return x.AsPath
	}
	return ""
}

func (x *BgpPath) GetOrigin() string {
	if x != nil {
		return x.Origin
	}
	return ""
}

func (x *BgpPath) GetLastUpdate() uint64 {
	if x != nil {
		return x.LastUpdate
	}
	return 0
}

func (x *BgpPath) GetPeerId() string {
	if x != nil {
		return x.PeerId
	}
	return ""
}

type BgpState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled          bool                `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	AutonomousSystem uint32              `protobuf:"varint,2,opt,name=autonomous_system,json=autonomousSystem,proto3" json:"autonomous_system,omitempty"`
	RouterId         string              `protobuf:"bytes,3,opt,name=router_id,json=routerId,proto3" json:"router_id,omitempty"`
	NeighborStates   []*BgpNeighborState `protobuf:"bytes,4,rep,name=neighbor_states,json=neighborStates,proto3" json:"neighbor_states,omitempty"`
}

func (x *BgpState) Reset() {
	*x = BgpState{}
	mi := &file_client_frr_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BgpState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpState) ProtoMessage() {}

func (x *BgpState) ProtoReflect() protoreflect.Message {
	mi := &file_client_frr_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpState.ProtoReflect.Descriptor instead.
func (*BgpState) Descriptor() ([]byte, []int) {
	return file_client_frr_proto_rawDescGZIP(), []int{24}
}

func (x *BgpState) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *BgpState) GetAutonomousSystem() uint32 {
	if x != nil {
		return x.AutonomousSystem
	}
	return 0
}

func (x *BgpState) GetRouterId() string {
	if x != nil {
		return x.RouterId
	}
	return ""
}

func (x *BgpState) GetNeighborStates() []*BgpNeighborState {
	if x != nil {
		return x.NeighborStates
	}
	return nil
}

type BgpNeighborState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PeerIp           string `protobuf:"bytes,1,opt,name=peer_ip,json=peerIp,proto3" json:"peer_ip,omitempty"`
	State            string `protobuf:"bytes,2,opt,name=state,proto3" json:"state,omitempty"`
	Uptime           uint64 `protobuf:"varint,3,opt,name=uptime,proto3" json:"uptime,omitempty"`
	PrefixesReceived uint32 `protobuf:"varint,4,opt,name=prefixes_received,json=prefixesReceived,proto3" json:"prefixes_received,omitempty"`
	PrefixesSent     uint32 `protobuf:"varint,5,opt,name=prefixes_sent,json=prefixesSent,proto3" json:"prefixes_sent,omitempty"`
}

func (x *BgpNeighborState) Reset() {
	*x = BgpNeighborState{}
	mi := &file_client_frr_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BgpNeighborState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpNeighborState) ProtoMessage() {}

func (x *BgpNeighborState) ProtoReflect() protoreflect.Message {
	mi := &file_client_frr_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpNeighborState.ProtoReflect.Descriptor instead.
func (*BgpNeighborState) Descriptor() ([]byte, []int) {
	return file_client_frr_proto_rawDescGZIP(), []int{25}
}

func (x *BgpNeighborState) GetPeerIp() string {
	if x != nil {
		return x.PeerIp
	}
	return ""
}

func (x *BgpNeighborState) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *BgpNeighborState) GetUptime() uint64 {
	if x != nil {
		return x.Uptime
	}
	return 0
}

func (x *BgpNeighborState) GetPrefixesReceived() uint32 {
	if x != nil {
		return x.PrefixesReceived
	}
	return 0
}

func (x *BgpNeighborState) GetPrefixesSent() uint32 {
	if x != nil {
		return x.PrefixesSent
	}
	return 0
}

type BgpStatistics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TotalNeighbors       uint32                   `protobuf:"varint,1,opt,name=total_neighbors,json=totalNeighbors,proto3" json:"total_neighbors,omitempty"`
	EstablishedNeighbors uint32                   `protobuf:"varint,2,opt,name=established_neighbors,json=establishedNeighbors,proto3" json:"established_neighbors,omitempty"`
	TotalRoutes          uint32                   `protobuf:"varint,3,opt,name=total_routes,json=totalRoutes,proto3" json:"total_routes,omitempty"`
	Ipv4Routes           uint32                   `protobuf:"varint,4,opt,name=ipv4_routes,json=ipv4Routes,proto3" json:"ipv4_routes,omitempty"`
	Ipv6Routes           uint32                   `protobuf:"varint,5,opt,name=ipv6_routes,json=ipv6Routes,proto3" json:"ipv6_routes,omitempty"`
	MemoryUsage          uint64                   `protobuf:"varint,6,opt,name=memory_usage,json=memoryUsage,proto3" json:"memory_usage,omitempty"`
	GlobalStats          *BgpGlobalStatistics     `protobuf:"bytes,7,opt,name=global_stats,json=globalStats,proto3" json:"global_stats,omitempty"`
	TableStats           []*BgpTableStatistics    `protobuf:"bytes,8,rep,name=table_stats,json=tableStats,proto3" json:"table_stats,omitempty"`
	MessageStats         *BgpMessageStatistics    `protobuf:"bytes,9,opt,name=message_stats,json=messageStats,proto3" json:"message_stats,omitempty"`
	NeighborStats        []*BgpNeighborStatistics `protobuf:"bytes,10,rep,name=neighbor_stats,json=neighborStats,proto3" json:"neighbor_stats,omitempty"`
}

func (x *BgpStatistics) Reset() {
	*x = BgpStatistics{}
	mi := &file_client_frr_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BgpStatistics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpStatistics) ProtoMessage() {}

func (x *BgpStatistics) ProtoReflect() protoreflect.Message {
	mi := &file_client_frr_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpStatistics.ProtoReflect.Descriptor instead.
func (*BgpStatistics) Descriptor() ([]byte, []int) {
	return file_client_frr_proto_rawDescGZIP(), []int{26}
}

func (x *BgpStatistics) GetTotalNeighbors() uint32 {
	if x != nil {
		return x.TotalNeighbors
	}
	return 0
}

func (x *BgpStatistics) GetEstablishedNeighbors() uint32 {
	if x != nil {
		return x.EstablishedNeighbors
	}
	return 0
}

func (x *BgpStatistics) GetTotalRoutes() uint32 {
	if x != nil {
		return x.TotalRoutes
	}
	return 0
}

func (x *BgpStatistics) GetIpv4Routes() uint32 {
	if x != nil {
		return x.Ipv4Routes
	}
	return 0
}

func (x *BgpStatistics) GetIpv6Routes() uint32 {
	if x != nil {
		return x.Ipv6Routes
	}
	return 0
}

func (x *BgpStatistics) GetMemoryUsage() uint64 {
	if x != nil {
		return x.MemoryUsage
	}
	return 0
}

func (x *BgpStatistics) GetGlobalStats() *BgpGlobalStatistics {
	if x != nil {
		return x.GlobalStats
	}
	return nil
}

func (x *BgpStatistics) GetTableStats() []*BgpTableStatistics {
	if x != nil {
		return x.TableStats
	}
	return nil
}

func (x *BgpStatistics) GetMessageStats() *BgpMessageStatistics {
	if x != nil {
		return x.MessageStats
	}
	return nil
}

func (x *BgpStatistics) GetNeighborStats() []*BgpNeighborStatistics {
	if x != nil {
		return x.NeighborStats
	}
	return nil
}

type BgpGlobalStatistics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UpdatesSent           uint64 `protobuf:"varint,1,opt,name=updates_sent,json=updatesSent,proto3" json:"updates_sent,omitempty"`
	UpdatesReceived       uint64 `protobuf:"varint,2,opt,name=updates_received,json=updatesReceived,proto3" json:"updates_received,omitempty"`
	TotalMessagesSent     uint64 `protobuf:"varint,3,opt,name=total_messages_sent,json=totalMessagesSent,proto3" json:"total_messages_sent,omitempty"`
	TotalMessagesReceived uint64 `protobuf:"varint,4,opt,name=total_messages_received,json=totalMessagesReceived,proto3" json:"total_messages_received,omitempty"`
	DampenedRoutes        uint64 `protobuf:"varint,5,opt,name=dampened_routes,json=dampenedRoutes,proto3" json:"dampened_routes,omitempty"`
	HistoryRoutes         uint64 `protobuf:"varint,6,opt,name=history_routes,json=historyRoutes,proto3" json:"history_routes,omitempty"`
	SuppressedRoutes      uint64 `protobuf:"varint,7,opt,name=suppressed_routes,json=suppressedRoutes,proto3" json:"suppressed_routes,omitempty"`
	WithdrawMessages      uint64 `protobuf:"varint,8,opt,name=withdraw_messages,json=withdrawMessages,proto3" json:"withdraw_messages,omitempty"`
}

func (x *BgpGlobalStatistics) Reset() {
	*x = BgpGlobalStatistics{}
	mi := &file_client_frr_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BgpGlobalStatistics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpGlobalStatistics) ProtoMessage() {}

func (x *BgpGlobalStatistics) ProtoReflect() protoreflect.Message {
	mi := &file_client_frr_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpGlobalStatistics.ProtoReflect.Descriptor instead.
func (*BgpGlobalStatistics) Descriptor() ([]byte, []int) {
	return file_client_frr_proto_rawDescGZIP(), []int{27}
}

func (x *BgpGlobalStatistics) GetUpdatesSent() uint64 {
	if x != nil {
		return x.UpdatesSent
	}
	return 0
}

func (x *BgpGlobalStatistics) GetUpdatesReceived() uint64 {
	if x != nil {
		return x.UpdatesReceived
	}
	return 0
}

func (x *BgpGlobalStatistics) GetTotalMessagesSent() uint64 {
	if x != nil {
		return x.TotalMessagesSent
	}
	return 0
}

func (x *BgpGlobalStatistics) GetTotalMessagesReceived() uint64 {
	if x != nil {
		return x.TotalMessagesReceived
	}
	return 0
}

func (x *BgpGlobalStatistics) GetDampenedRoutes() uint64 {
	if x != nil {
		return x.DampenedRoutes
	}
	return 0
}

func (x *BgpGlobalStatistics) GetHistoryRoutes() uint64 {
	if x != nil {
		return x.HistoryRoutes
	}
	return 0
}

func (x *BgpGlobalStatistics) GetSuppressedRoutes() uint64 {
	if x != nil {
		return x.SuppressedRoutes
	}
	return 0
}

func (x *BgpGlobalStatistics) GetWithdrawMessages() uint64 {
	if x != nil {
		return x.WithdrawMessages
	}
	return 0
}

type BgpTableStatistics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TableName        string `protobuf:"bytes,1,opt,name=table_name,json=tableName,proto3" json:"table_name,omitempty"`
	TotalPrefixes    uint32 `protobuf:"varint,2,opt,name=total_prefixes,json=totalPrefixes,proto3" json:"total_prefixes,omitempty"`
	MemoryUsage      uint32 `protobuf:"varint,3,opt,name=memory_usage,json=memoryUsage,proto3" json:"memory_usage,omitempty"`
	DampenedPrefixes uint32 `protobuf:"varint,4,opt,name=dampened_prefixes,json=dampenedPrefixes,proto3" json:"dampened_prefixes,omitempty"`
	HistoryPrefixes  uint32 `protobuf:"varint,5,opt,name=history_prefixes,json=historyPrefixes,proto3" json:"history_prefixes,omitempty"`
	ValidPrefixes    uint32 `protobuf:"varint,6,opt,name=valid_prefixes,json=validPrefixes,proto3" json:"valid_prefixes,omitempty"`
}

func (x *BgpTableStatistics) Reset() {
	*x = BgpTableStatistics{}
	mi := &file_client_frr_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BgpTableStatistics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpTableStatistics) ProtoMessage() {}

func (x *BgpTableStatistics) ProtoReflect() protoreflect.Message {
	mi := &file_client_frr_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpTableStatistics.ProtoReflect.Descriptor instead.
func (*BgpTableStatistics) Descriptor() ([]byte, []int) {
	return file_client_frr_proto_rawDescGZIP(), []int{28}
}

func (x *BgpTableStatistics) GetTableName() string {
	if x != nil {
		return x.TableName
	}
	return ""
}

func (x *BgpTableStatistics) GetTotalPrefixes() uint32 {
	if x != nil {
		return x.TotalPrefixes
	}
	return 0
}

func (x *BgpTableStatistics) GetMemoryUsage() uint32 {
	if x != nil {
		return x.MemoryUsage
	}
	return 0
}

func (x *BgpTableStatistics) GetDampenedPrefixes() uint32 {
	if x != nil {
		return x.DampenedPrefixes
	}
	return 0
}

func (x *BgpTableStatistics) GetHistoryPrefixes() uint32 {
	if x != nil {
		return x.HistoryPrefixes
	}
	return 0
}

func (x *BgpTableStatistics) GetValidPrefixes() uint32 {
	if x != nil {
		return x.ValidPrefixes
	}
	return 0
}

type BgpMessageStatistics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OpensSent             uint64 `protobuf:"varint,1,opt,name=opens_sent,json=opensSent,proto3" json:"opens_sent,omitempty"`
	OpensReceived         uint64 `protobuf:"varint,2,opt,name=opens_received,json=opensReceived,proto3" json:"opens_received,omitempty"`
	NotificationsSent     uint64 `protobuf:"varint,3,opt,name=notifications_sent,json=notificationsSent,proto3" json:"notifications_sent,omitempty"`
	NotificationsReceived uint64 `protobuf:"varint,4,opt,name=notifications_received,json=notificationsReceived,proto3" json:"notifications_received,omitempty"`
	UpdatesSent           uint64 `protobuf:"varint,5,opt,name=updates_sent,json=updatesSent,proto3" json:"updates_sent,omitempty"`
	UpdatesReceived       uint64 `protobuf:"varint,6,opt,name=updates_received,json=updatesReceived,proto3" json:"updates_received,omitempty"`
	KeepalivesSent        uint64 `protobuf:"varint,7,opt,name=keepalives_sent,json=keepalivesSent,proto3" json:"keepalives_sent,omitempty"`
	KeepalivesReceived    uint64 `protobuf:"varint,8,opt,name=keepalives_received,json=keepalivesReceived,proto3" json:"keepalives_received,omitempty"`
	RouteRefreshSent      uint64 `protobuf:"varint,9,opt,name=route_refresh_sent,json=routeRefreshSent,proto3" json:"route_refresh_sent,omitempty"`
	RouteRefreshReceived  uint64 `protobuf:"varint,10,opt,name=route_refresh_received,json=routeRefreshReceived,proto3" json:"route_refresh_received,omitempty"`
	CapabilitySent        uint64 `protobuf:"varint,11,opt,name=capability_sent,json=capabilitySent,proto3" json:"capability_sent,omitempty"`
	CapabilityReceived    uint64 `protobuf:"varint,12,opt,name=capability_received,json=capabilityReceived,proto3" json:"capability_received,omitempty"`
	TotalSent             uint64 `protobuf:"varint,13,opt,name=total_sent,json=totalSent,proto3" json:"total_sent,omitempty"`
	TotalReceived         uint64 `protobuf:"varint,14,opt,name=total_received,json=totalReceived,proto3" json:"total_received,omitempty"`
}

func (x *BgpMessageStatistics) Reset() {
	*x = BgpMessageStatistics{}
	mi := &file_client_frr_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BgpMessageStatistics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpMessageStatistics) ProtoMessage() {}

func (x *BgpMessageStatistics) ProtoReflect() protoreflect.Message {
	mi := &file_client_frr_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpMessageStatistics.ProtoReflect.Descriptor instead.
func (*BgpMessageStatistics) Descriptor() ([]byte, []int) {
	return file_client_frr_proto_rawDescGZIP(), []int{29}
}

func (x *BgpMessageStatistics) GetOpensSent() uint64 {
	if x != nil {
		return x.OpensSent
	}
	return 0
}

func (x *BgpMessageStatistics) GetOpensReceived() uint64 {
	if x != nil {
		return x.OpensReceived
	}
	return 0
}

func (x *BgpMessageStatistics) GetNotificationsSent() uint64 {
	if x != nil {
		return x.NotificationsSent
	}
	return 0
}

func (x *BgpMessageStatistics) GetNotificationsReceived() uint64 {
	if x != nil {
		return x.NotificationsReceived
	}
	return 0
}

func (x *BgpMessageStatistics) GetUpdatesSent() uint64 {
	if x != nil {
		return x.UpdatesSent
	}
	return 0
}

func (x *BgpMessageStatistics) GetUpdatesReceived() uint64 {
	if x != nil {
		return x.UpdatesReceived
	}
	return 0
}

func (x *BgpMessageStatistics) GetKeepalivesSent() uint64 {
	if x != nil {
		return x.KeepalivesSent
	}
	return 0
}

func (x *BgpMessageStatistics) GetKeepalivesReceived() uint64 {
	if x != nil {
		return x.KeepalivesReceived
	}
	return 0
}

func (x *BgpMessageStatistics) GetRouteRefreshSent() uint64 {
	if x != nil {
		return x.RouteRefreshSent
	}
	return 0
}

func (x *BgpMessageStatistics) GetRouteRefreshReceived() uint64 {
	if x != nil {
		return x.RouteRefreshReceived
	}
	return 0
}

func (x *BgpMessageStatistics) GetCapabilitySent() uint64 {
	if x != nil {
		return x.CapabilitySent
	}
	return 0
}

func (x *BgpMessageStatistics) GetCapabilityReceived() uint64 {
	if x != nil {
		return x.CapabilityReceived
	}
	return 0
}

func (x *BgpMessageStatistics) GetTotalSent() uint64 {
	if x != nil {
		return x.TotalSent
	}
	return 0
}

func (x *BgpMessageStatistics) GetTotalReceived() uint64 {
	if x != nil {
		return x.TotalReceived
	}
	return 0
}

// BGP Neighbor Statistics
type BgpNeighborStatistics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PeerIp                 string `protobuf:"bytes,1,opt,name=peer_ip,json=peerIp,proto3" json:"peer_ip,omitempty"`
	MessagesSent           uint64 `protobuf:"varint,2,opt,name=messages_sent,json=messagesSent,proto3" json:"messages_sent,omitempty"`
	MessagesReceived       uint64 `protobuf:"varint,3,opt,name=messages_received,json=messagesReceived,proto3" json:"messages_received,omitempty"`
	UpdatesSent            uint64 `protobuf:"varint,4,opt,name=updates_sent,json=updatesSent,proto3" json:"updates_sent,omitempty"`
	UpdatesReceived        uint64 `protobuf:"varint,5,opt,name=updates_received,json=updatesReceived,proto3" json:"updates_received,omitempty"`
	KeepalivesSent         uint64 `protobuf:"varint,6,opt,name=keepalives_sent,json=keepalivesSent,proto3" json:"keepalives_sent,omitempty"`
	KeepalivesReceived     uint64 `protobuf:"varint,7,opt,name=keepalives_received,json=keepalivesReceived,proto3" json:"keepalives_received,omitempty"`
	NotificationsSent      uint64 `protobuf:"varint,8,opt,name=notifications_sent,json=notificationsSent,proto3" json:"notifications_sent,omitempty"`
	NotificationsReceived  uint64 `protobuf:"varint,9,opt,name=notifications_received,json=notificationsReceived,proto3" json:"notifications_received,omitempty"`
	RouteRefreshesSent     uint64 `protobuf:"varint,10,opt,name=route_refreshes_sent,json=routeRefreshesSent,proto3" json:"route_refreshes_sent,omitempty"`
	RouteRefreshesReceived uint64 `protobuf:"varint,11,opt,name=route_refreshes_received,json=routeRefreshesReceived,proto3" json:"route_refreshes_received,omitempty"`
	PrefixesReceived       uint32 `protobuf:"varint,12,opt,name=prefixes_received,json=prefixesReceived,proto3" json:"prefixes_received,omitempty"`
	PrefixesSent           uint32 `protobuf:"varint,13,opt,name=prefixes_sent,json=prefixesSent,proto3" json:"prefixes_sent,omitempty"`
	State                  string `protobuf:"bytes,14,opt,name=state,proto3" json:"state,omitempty"`
	Uptime                 uint64 `protobuf:"varint,15,opt,name=uptime,proto3" json:"uptime,omitempty"`
}

func (x *BgpNeighborStatistics) Reset() {
	*x = BgpNeighborStatistics{}
	mi := &file_client_frr_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BgpNeighborStatistics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpNeighborStatistics) ProtoMessage() {}

func (x *BgpNeighborStatistics) ProtoReflect() protoreflect.Message {
	mi := &file_client_frr_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpNeighborStatistics.ProtoReflect.Descriptor instead.
func (*BgpNeighborStatistics) Descriptor() ([]byte, []int) {
	return file_client_frr_proto_rawDescGZIP(), []int{30}
}

func (x *BgpNeighborStatistics) GetPeerIp() string {
	if x != nil {
		return x.PeerIp
	}
	return ""
}

func (x *BgpNeighborStatistics) GetMessagesSent() uint64 {
	if x != nil {
		return x.MessagesSent
	}
	return 0
}

func (x *BgpNeighborStatistics) GetMessagesReceived() uint64 {
	if x != nil {
		return x.MessagesReceived
	}
	return 0
}

func (x *BgpNeighborStatistics) GetUpdatesSent() uint64 {
	if x != nil {
		return x.UpdatesSent
	}
	return 0
}

func (x *BgpNeighborStatistics) GetUpdatesReceived() uint64 {
	if x != nil {
		return x.UpdatesReceived
	}
	return 0
}

func (x *BgpNeighborStatistics) GetKeepalivesSent() uint64 {
	if x != nil {
		return x.KeepalivesSent
	}
	return 0
}

func (x *BgpNeighborStatistics) GetKeepalivesReceived() uint64 {
	if x != nil {
		return x.KeepalivesReceived
	}
	return 0
}

func (x *BgpNeighborStatistics) GetNotificationsSent() uint64 {
	if x != nil {
		return x.NotificationsSent
	}
	return 0
}

func (x *BgpNeighborStatistics) GetNotificationsReceived() uint64 {
	if x != nil {
		return x.NotificationsReceived
	}
	return 0
}

func (x *BgpNeighborStatistics) GetRouteRefreshesSent() uint64 {
	if x != nil {
		return x.RouteRefreshesSent
	}
	return 0
}

func (x *BgpNeighborStatistics) GetRouteRefreshesReceived() uint64 {
	if x != nil {
		return x.RouteRefreshesReceived
	}
	return 0
}

func (x *BgpNeighborStatistics) GetPrefixesReceived() uint32 {
	if x != nil {
		return x.PrefixesReceived
	}
	return 0
}

func (x *BgpNeighborStatistics) GetPrefixesSent() uint32 {
	if x != nil {
		return x.PrefixesSent
	}
	return 0
}

func (x *BgpNeighborStatistics) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *BgpNeighborStatistics) GetUptime() uint64 {
	if x != nil {
		return x.Uptime
	}
	return 0
}

// Static Route Configuration (IPv4 only)
type StaticConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Routes        []*StaticRoute        `protobuf:"bytes,1,rep,name=routes,proto3" json:"routes,omitempty"`
	RouteTables   []*StaticRouteTable   `protobuf:"bytes,2,rep,name=route_tables,json=routeTables,proto3" json:"route_tables,omitempty"`
	NexthopGroups []*StaticNexthopGroup `protobuf:"bytes,3,rep,name=nexthop_groups,json=nexthopGroups,proto3" json:"nexthop_groups,omitempty"`
	GlobalConfig  *StaticGlobalConfig   `protobuf:"bytes,4,opt,name=global_config,json=globalConfig,proto3" json:"global_config,omitempty"`
}

func (x *StaticConfig) Reset() {
	*x = StaticConfig{}
	mi := &file_client_frr_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StaticConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StaticConfig) ProtoMessage() {}

func (x *StaticConfig) ProtoReflect() protoreflect.Message {
	mi := &file_client_frr_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StaticConfig.ProtoReflect.Descriptor instead.
func (*StaticConfig) Descriptor() ([]byte, []int) {
	return file_client_frr_proto_rawDescGZIP(), []int{31}
}

func (x *StaticConfig) GetRoutes() []*StaticRoute {
	if x != nil {
		return x.Routes
	}
	return nil
}

func (x *StaticConfig) GetRouteTables() []*StaticRouteTable {
	if x != nil {
		return x.RouteTables
	}
	return nil
}

func (x *StaticConfig) GetNexthopGroups() []*StaticNexthopGroup {
	if x != nil {
		return x.NexthopGroups
	}
	return nil
}

func (x *StaticConfig) GetGlobalConfig() *StaticGlobalConfig {
	if x != nil {
		return x.GlobalConfig
	}
	return nil
}

// Static Global Configuration (IPv4 only)
type StaticGlobalConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DefaultAdministrativeDistance uint32 `protobuf:"varint,1,opt,name=default_administrative_distance,json=defaultAdministrativeDistance,proto3" json:"default_administrative_distance,omitempty"`
	DefaultMetric                 uint32 `protobuf:"varint,2,opt,name=default_metric,json=defaultMetric,proto3" json:"default_metric,omitempty"`
	IpForward                     bool   `protobuf:"varint,3,opt,name=ip_forward,json=ipForward,proto3" json:"ip_forward,omitempty"`
}

func (x *StaticGlobalConfig) Reset() {
	*x = StaticGlobalConfig{}
	mi := &file_client_frr_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StaticGlobalConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StaticGlobalConfig) ProtoMessage() {}

func (x *StaticGlobalConfig) ProtoReflect() protoreflect.Message {
	mi := &file_client_frr_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StaticGlobalConfig.ProtoReflect.Descriptor instead.
func (*StaticGlobalConfig) Descriptor() ([]byte, []int) {
	return file_client_frr_proto_rawDescGZIP(), []int{32}
}

func (x *StaticGlobalConfig) GetDefaultAdministrativeDistance() uint32 {
	if x != nil {
		return x.DefaultAdministrativeDistance
	}
	return 0
}

func (x *StaticGlobalConfig) GetDefaultMetric() uint32 {
	if x != nil {
		return x.DefaultMetric
	}
	return 0
}

func (x *StaticGlobalConfig) GetIpForward() bool {
	if x != nil {
		return x.IpForward
	}
	return false
}

// Static Route (IPv4 only)
type StaticRoute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Destination            string            `protobuf:"bytes,1,opt,name=destination,proto3" json:"destination,omitempty"`                                                      // Network in CIDR format
	Gateway                string            `protobuf:"bytes,2,opt,name=gateway,proto3" json:"gateway,omitempty"`                                                              // Next-hop IP or interface
	Interface              string            `protobuf:"bytes,3,opt,name=interface,proto3" json:"interface,omitempty"`                                                          // Outgoing interface
	Metric                 uint32            `protobuf:"varint,4,opt,name=metric,proto3" json:"metric,omitempty"`                                                               // Route metric
	AdministrativeDistance uint32            `protobuf:"varint,5,opt,name=administrative_distance,json=administrativeDistance,proto3" json:"administrative_distance,omitempty"` // Administrative distance
	Table                  uint32            `protobuf:"varint,6,opt,name=table,proto3" json:"table,omitempty"`                                                                 // Route table ID
	Description            string            `protobuf:"bytes,7,opt,name=description,proto3" json:"description,omitempty"`                                                      // Route description
	RouteType              StaticRouteType   `protobuf:"varint,8,opt,name=route_type,json=routeType,proto3,enum=client.StaticRouteType" json:"route_type,omitempty"`
	Flags                  *StaticRouteFlags `protobuf:"bytes,9,opt,name=flags,proto3" json:"flags,omitempty"`
	Source                 string            `protobuf:"bytes,10,opt,name=source,proto3" json:"source,omitempty"`                                 // Source IP for policy routing
	NexthopGroup           []string          `protobuf:"bytes,11,rep,name=nexthop_group,json=nexthopGroup,proto3" json:"nexthop_group,omitempty"` // Nexthop group reference
	Vrf                    string            `protobuf:"bytes,12,opt,name=vrf,proto3" json:"vrf,omitempty"`                                       // VRF name
	Onlink                 bool              `protobuf:"varint,13,opt,name=onlink,proto3" json:"onlink,omitempty"`                                // Gateway is directly reachable
}

func (x *StaticRoute) Reset() {
	*x = StaticRoute{}
	mi := &file_client_frr_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StaticRoute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StaticRoute) ProtoMessage() {}

func (x *StaticRoute) ProtoReflect() protoreflect.Message {
	mi := &file_client_frr_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StaticRoute.ProtoReflect.Descriptor instead.
func (*StaticRoute) Descriptor() ([]byte, []int) {
	return file_client_frr_proto_rawDescGZIP(), []int{33}
}

func (x *StaticRoute) GetDestination() string {
	if x != nil {
		return x.Destination
	}
	return ""
}

func (x *StaticRoute) GetGateway() string {
	if x != nil {
		return x.Gateway
	}
	return ""
}

func (x *StaticRoute) GetInterface() string {
	if x != nil {
		return x.Interface
	}
	return ""
}

func (x *StaticRoute) GetMetric() uint32 {
	if x != nil {
		return x.Metric
	}
	return 0
}

func (x *StaticRoute) GetAdministrativeDistance() uint32 {
	if x != nil {
		return x.AdministrativeDistance
	}
	return 0
}

func (x *StaticRoute) GetTable() uint32 {
	if x != nil {
		return x.Table
	}
	return 0
}

func (x *StaticRoute) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *StaticRoute) GetRouteType() StaticRouteType {
	if x != nil {
		return x.RouteType
	}
	return StaticRouteType_STATIC_ROUTE_UNKNOWN
}

func (x *StaticRoute) GetFlags() *StaticRouteFlags {
	if x != nil {
		return x.Flags
	}
	return nil
}

func (x *StaticRoute) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *StaticRoute) GetNexthopGroup() []string {
	if x != nil {
		return x.NexthopGroup
	}
	return nil
}

func (x *StaticRoute) GetVrf() string {
	if x != nil {
		return x.Vrf
	}
	return ""
}

func (x *StaticRoute) GetOnlink() bool {
	if x != nil {
		return x.Onlink
	}
	return false
}

// Static Route Flags
type StaticRouteFlags struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Reject    bool `protobuf:"varint,1,opt,name=reject,proto3" json:"reject,omitempty"`
	Blackhole bool `protobuf:"varint,2,opt,name=blackhole,proto3" json:"blackhole,omitempty"`
	NoResolve bool `protobuf:"varint,3,opt,name=no_resolve,json=noResolve,proto3" json:"no_resolve,omitempty"`
	Onlink    bool `protobuf:"varint,4,opt,name=onlink,proto3" json:"onlink,omitempty"`
}

func (x *StaticRouteFlags) Reset() {
	*x = StaticRouteFlags{}
	mi := &file_client_frr_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StaticRouteFlags) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StaticRouteFlags) ProtoMessage() {}

func (x *StaticRouteFlags) ProtoReflect() protoreflect.Message {
	mi := &file_client_frr_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StaticRouteFlags.ProtoReflect.Descriptor instead.
func (*StaticRouteFlags) Descriptor() ([]byte, []int) {
	return file_client_frr_proto_rawDescGZIP(), []int{34}
}

func (x *StaticRouteFlags) GetReject() bool {
	if x != nil {
		return x.Reject
	}
	return false
}

func (x *StaticRouteFlags) GetBlackhole() bool {
	if x != nil {
		return x.Blackhole
	}
	return false
}

func (x *StaticRouteFlags) GetNoResolve() bool {
	if x != nil {
		return x.NoResolve
	}
	return false
}

func (x *StaticRouteFlags) GetOnlink() bool {
	if x != nil {
		return x.Onlink
	}
	return false
}

// Static Route Table
type StaticRouteTable struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TableId     uint32         `protobuf:"varint,1,opt,name=table_id,json=tableId,proto3" json:"table_id,omitempty"`
	TableName   string         `protobuf:"bytes,2,opt,name=table_name,json=tableName,proto3" json:"table_name,omitempty"`
	Description string         `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Routes      []*StaticRoute `protobuf:"bytes,4,rep,name=routes,proto3" json:"routes,omitempty"`
}

func (x *StaticRouteTable) Reset() {
	*x = StaticRouteTable{}
	mi := &file_client_frr_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StaticRouteTable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StaticRouteTable) ProtoMessage() {}

func (x *StaticRouteTable) ProtoReflect() protoreflect.Message {
	mi := &file_client_frr_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StaticRouteTable.ProtoReflect.Descriptor instead.
func (*StaticRouteTable) Descriptor() ([]byte, []int) {
	return file_client_frr_proto_rawDescGZIP(), []int{35}
}

func (x *StaticRouteTable) GetTableId() uint32 {
	if x != nil {
		return x.TableId
	}
	return 0
}

func (x *StaticRouteTable) GetTableName() string {
	if x != nil {
		return x.TableName
	}
	return ""
}

func (x *StaticRouteTable) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *StaticRouteTable) GetRoutes() []*StaticRoute {
	if x != nil {
		return x.Routes
	}
	return nil
}

// Static Nexthop Group (ECMP)
type StaticNexthopGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Nexthops    []*StaticNexthop       `protobuf:"bytes,2,rep,name=nexthops,proto3" json:"nexthops,omitempty"`
	Type        StaticNexthopGroupType `protobuf:"varint,3,opt,name=type,proto3,enum=client.StaticNexthopGroupType" json:"type,omitempty"`
	Description string                 `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *StaticNexthopGroup) Reset() {
	*x = StaticNexthopGroup{}
	mi := &file_client_frr_proto_msgTypes[36]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StaticNexthopGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StaticNexthopGroup) ProtoMessage() {}

func (x *StaticNexthopGroup) ProtoReflect() protoreflect.Message {
	mi := &file_client_frr_proto_msgTypes[36]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StaticNexthopGroup.ProtoReflect.Descriptor instead.
func (*StaticNexthopGroup) Descriptor() ([]byte, []int) {
	return file_client_frr_proto_rawDescGZIP(), []int{36}
}

func (x *StaticNexthopGroup) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *StaticNexthopGroup) GetNexthops() []*StaticNexthop {
	if x != nil {
		return x.Nexthops
	}
	return nil
}

func (x *StaticNexthopGroup) GetType() StaticNexthopGroupType {
	if x != nil {
		return x.Type
	}
	return StaticNexthopGroupType_NEXTHOP_GROUP_UNKNOWN
}

func (x *StaticNexthopGroup) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

// Static Nexthop
type StaticNexthop struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Gateway    string `protobuf:"bytes,1,opt,name=gateway,proto3" json:"gateway,omitempty"`
	Interface  string `protobuf:"bytes,2,opt,name=interface,proto3" json:"interface,omitempty"`
	Weight     uint32 `protobuf:"varint,3,opt,name=weight,proto3" json:"weight,omitempty"`
	Preference uint32 `protobuf:"varint,4,opt,name=preference,proto3" json:"preference,omitempty"`
	Backup     bool   `protobuf:"varint,5,opt,name=backup,proto3" json:"backup,omitempty"`
}

func (x *StaticNexthop) Reset() {
	*x = StaticNexthop{}
	mi := &file_client_frr_proto_msgTypes[37]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StaticNexthop) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StaticNexthop) ProtoMessage() {}

func (x *StaticNexthop) ProtoReflect() protoreflect.Message {
	mi := &file_client_frr_proto_msgTypes[37]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StaticNexthop.ProtoReflect.Descriptor instead.
func (*StaticNexthop) Descriptor() ([]byte, []int) {
	return file_client_frr_proto_rawDescGZIP(), []int{37}
}

func (x *StaticNexthop) GetGateway() string {
	if x != nil {
		return x.Gateway
	}
	return ""
}

func (x *StaticNexthop) GetInterface() string {
	if x != nil {
		return x.Interface
	}
	return ""
}

func (x *StaticNexthop) GetWeight() uint32 {
	if x != nil {
		return x.Weight
	}
	return 0
}

func (x *StaticNexthop) GetPreference() uint32 {
	if x != nil {
		return x.Preference
	}
	return 0
}

func (x *StaticNexthop) GetBackup() bool {
	if x != nil {
		return x.Backup
	}
	return false
}

// Response for "show ip route json"
type ShowStaticRoutes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Routes map[string]*StaticRouteEntry `protobuf:"bytes,1,rep,name=routes,proto3" json:"routes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ShowStaticRoutes) Reset() {
	*x = ShowStaticRoutes{}
	mi := &file_client_frr_proto_msgTypes[38]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ShowStaticRoutes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShowStaticRoutes) ProtoMessage() {}

func (x *ShowStaticRoutes) ProtoReflect() protoreflect.Message {
	mi := &file_client_frr_proto_msgTypes[38]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShowStaticRoutes.ProtoReflect.Descriptor instead.
func (*ShowStaticRoutes) Descriptor() ([]byte, []int) {
	return file_client_frr_proto_rawDescGZIP(), []int{38}
}

func (x *ShowStaticRoutes) GetRoutes() map[string]*StaticRouteEntry {
	if x != nil {
		return x.Routes
	}
	return nil
}

type StaticRouteEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Prefix   string                `protobuf:"bytes,1,opt,name=prefix,proto3" json:"prefix,omitempty"`
	Nexthops []*StaticRouteNexthop `protobuf:"bytes,2,rep,name=nexthops,proto3" json:"nexthops,omitempty"`
}

func (x *StaticRouteEntry) Reset() {
	*x = StaticRouteEntry{}
	mi := &file_client_frr_proto_msgTypes[39]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StaticRouteEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StaticRouteEntry) ProtoMessage() {}

func (x *StaticRouteEntry) ProtoReflect() protoreflect.Message {
	mi := &file_client_frr_proto_msgTypes[39]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StaticRouteEntry.ProtoReflect.Descriptor instead.
func (*StaticRouteEntry) Descriptor() ([]byte, []int) {
	return file_client_frr_proto_rawDescGZIP(), []int{39}
}

func (x *StaticRouteEntry) GetPrefix() string {
	if x != nil {
		return x.Prefix
	}
	return ""
}

func (x *StaticRouteEntry) GetNexthops() []*StaticRouteNexthop {
	if x != nil {
		return x.Nexthops
	}
	return nil
}

type StaticRouteNexthop struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Nexthop                string `protobuf:"bytes,1,opt,name=nexthop,proto3" json:"nexthop,omitempty"`
	Interface              string `protobuf:"bytes,2,opt,name=interface,proto3" json:"interface,omitempty"`
	Metric                 uint32 `protobuf:"varint,3,opt,name=metric,proto3" json:"metric,omitempty"`
	AdministrativeDistance uint32 `protobuf:"varint,4,opt,name=administrative_distance,json=administrativeDistance,proto3" json:"administrative_distance,omitempty"`
	Active                 bool   `protobuf:"varint,5,opt,name=active,proto3" json:"active,omitempty"`
	Fib                    bool   `protobuf:"varint,6,opt,name=fib,proto3" json:"fib,omitempty"`
}

func (x *StaticRouteNexthop) Reset() {
	*x = StaticRouteNexthop{}
	mi := &file_client_frr_proto_msgTypes[40]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StaticRouteNexthop) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StaticRouteNexthop) ProtoMessage() {}

func (x *StaticRouteNexthop) ProtoReflect() protoreflect.Message {
	mi := &file_client_frr_proto_msgTypes[40]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StaticRouteNexthop.ProtoReflect.Descriptor instead.
func (*StaticRouteNexthop) Descriptor() ([]byte, []int) {
	return file_client_frr_proto_rawDescGZIP(), []int{40}
}

func (x *StaticRouteNexthop) GetNexthop() string {
	if x != nil {
		return x.Nexthop
	}
	return ""
}

func (x *StaticRouteNexthop) GetInterface() string {
	if x != nil {
		return x.Interface
	}
	return ""
}

func (x *StaticRouteNexthop) GetMetric() uint32 {
	if x != nil {
		return x.Metric
	}
	return 0
}

func (x *StaticRouteNexthop) GetAdministrativeDistance() uint32 {
	if x != nil {
		return x.AdministrativeDistance
	}
	return 0
}

func (x *StaticRouteNexthop) GetActive() bool {
	if x != nil {
		return x.Active
	}
	return false
}

func (x *StaticRouteNexthop) GetFib() bool {
	if x != nil {
		return x.Fib
	}
	return false
}

// Static Route Statistics (IPv4 only)
type StaticStatistics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TotalRoutes       uint32                        `protobuf:"varint,1,opt,name=total_routes,json=totalRoutes,proto3" json:"total_routes,omitempty"`
	Ipv4Routes        uint32                        `protobuf:"varint,2,opt,name=ipv4_routes,json=ipv4Routes,proto3" json:"ipv4_routes,omitempty"`
	ActiveRoutes      uint32                        `protobuf:"varint,3,opt,name=active_routes,json=activeRoutes,proto3" json:"active_routes,omitempty"`
	InactiveRoutes    uint32                        `protobuf:"varint,4,opt,name=inactive_routes,json=inactiveRoutes,proto3" json:"inactive_routes,omitempty"`
	TableStats        []*StaticTableStatistics      `protobuf:"bytes,5,rep,name=table_stats,json=tableStats,proto3" json:"table_stats,omitempty"`
	RouteTypeStats    *StaticRouteTypeStatistics    `protobuf:"bytes,6,opt,name=route_type_stats,json=routeTypeStats,proto3" json:"route_type_stats,omitempty"`
	NexthopGroupStats *StaticNexthopGroupStatistics `protobuf:"bytes,7,opt,name=nexthop_group_stats,json=nexthopGroupStats,proto3" json:"nexthop_group_stats,omitempty"`
}

func (x *StaticStatistics) Reset() {
	*x = StaticStatistics{}
	mi := &file_client_frr_proto_msgTypes[41]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StaticStatistics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StaticStatistics) ProtoMessage() {}

func (x *StaticStatistics) ProtoReflect() protoreflect.Message {
	mi := &file_client_frr_proto_msgTypes[41]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StaticStatistics.ProtoReflect.Descriptor instead.
func (*StaticStatistics) Descriptor() ([]byte, []int) {
	return file_client_frr_proto_rawDescGZIP(), []int{41}
}

func (x *StaticStatistics) GetTotalRoutes() uint32 {
	if x != nil {
		return x.TotalRoutes
	}
	return 0
}

func (x *StaticStatistics) GetIpv4Routes() uint32 {
	if x != nil {
		return x.Ipv4Routes
	}
	return 0
}

func (x *StaticStatistics) GetActiveRoutes() uint32 {
	if x != nil {
		return x.ActiveRoutes
	}
	return 0
}

func (x *StaticStatistics) GetInactiveRoutes() uint32 {
	if x != nil {
		return x.InactiveRoutes
	}
	return 0
}

func (x *StaticStatistics) GetTableStats() []*StaticTableStatistics {
	if x != nil {
		return x.TableStats
	}
	return nil
}

func (x *StaticStatistics) GetRouteTypeStats() *StaticRouteTypeStatistics {
	if x != nil {
		return x.RouteTypeStats
	}
	return nil
}

func (x *StaticStatistics) GetNexthopGroupStats() *StaticNexthopGroupStatistics {
	if x != nil {
		return x.NexthopGroupStats
	}
	return nil
}

// Static Table Statistics
type StaticTableStatistics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TableId        uint32 `protobuf:"varint,1,opt,name=table_id,json=tableId,proto3" json:"table_id,omitempty"`
	TableName      string `protobuf:"bytes,2,opt,name=table_name,json=tableName,proto3" json:"table_name,omitempty"`
	RouteCount     uint32 `protobuf:"varint,3,opt,name=route_count,json=routeCount,proto3" json:"route_count,omitempty"`
	ActiveRoutes   uint32 `protobuf:"varint,4,opt,name=active_routes,json=activeRoutes,proto3" json:"active_routes,omitempty"`
	InactiveRoutes uint32 `protobuf:"varint,5,opt,name=inactive_routes,json=inactiveRoutes,proto3" json:"inactive_routes,omitempty"`
}

func (x *StaticTableStatistics) Reset() {
	*x = StaticTableStatistics{}
	mi := &file_client_frr_proto_msgTypes[42]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StaticTableStatistics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StaticTableStatistics) ProtoMessage() {}

func (x *StaticTableStatistics) ProtoReflect() protoreflect.Message {
	mi := &file_client_frr_proto_msgTypes[42]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StaticTableStatistics.ProtoReflect.Descriptor instead.
func (*StaticTableStatistics) Descriptor() ([]byte, []int) {
	return file_client_frr_proto_rawDescGZIP(), []int{42}
}

func (x *StaticTableStatistics) GetTableId() uint32 {
	if x != nil {
		return x.TableId
	}
	return 0
}

func (x *StaticTableStatistics) GetTableName() string {
	if x != nil {
		return x.TableName
	}
	return ""
}

func (x *StaticTableStatistics) GetRouteCount() uint32 {
	if x != nil {
		return x.RouteCount
	}
	return 0
}

func (x *StaticTableStatistics) GetActiveRoutes() uint32 {
	if x != nil {
		return x.ActiveRoutes
	}
	return 0
}

func (x *StaticTableStatistics) GetInactiveRoutes() uint32 {
	if x != nil {
		return x.InactiveRoutes
	}
	return 0
}

// Static Route Type Statistics
type StaticRouteTypeStatistics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UnicastRoutes     uint32 `protobuf:"varint,1,opt,name=unicast_routes,json=unicastRoutes,proto3" json:"unicast_routes,omitempty"`
	BlackholeRoutes   uint32 `protobuf:"varint,2,opt,name=blackhole_routes,json=blackholeRoutes,proto3" json:"blackhole_routes,omitempty"`
	UnreachableRoutes uint32 `protobuf:"varint,3,opt,name=unreachable_routes,json=unreachableRoutes,proto3" json:"unreachable_routes,omitempty"`
	ProhibitRoutes    uint32 `protobuf:"varint,4,opt,name=prohibit_routes,json=prohibitRoutes,proto3" json:"prohibit_routes,omitempty"`
	LocalRoutes       uint32 `protobuf:"varint,5,opt,name=local_routes,json=localRoutes,proto3" json:"local_routes,omitempty"`
}

func (x *StaticRouteTypeStatistics) Reset() {
	*x = StaticRouteTypeStatistics{}
	mi := &file_client_frr_proto_msgTypes[43]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StaticRouteTypeStatistics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StaticRouteTypeStatistics) ProtoMessage() {}

func (x *StaticRouteTypeStatistics) ProtoReflect() protoreflect.Message {
	mi := &file_client_frr_proto_msgTypes[43]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StaticRouteTypeStatistics.ProtoReflect.Descriptor instead.
func (*StaticRouteTypeStatistics) Descriptor() ([]byte, []int) {
	return file_client_frr_proto_rawDescGZIP(), []int{43}
}

func (x *StaticRouteTypeStatistics) GetUnicastRoutes() uint32 {
	if x != nil {
		return x.UnicastRoutes
	}
	return 0
}

func (x *StaticRouteTypeStatistics) GetBlackholeRoutes() uint32 {
	if x != nil {
		return x.BlackholeRoutes
	}
	return 0
}

func (x *StaticRouteTypeStatistics) GetUnreachableRoutes() uint32 {
	if x != nil {
		return x.UnreachableRoutes
	}
	return 0
}

func (x *StaticRouteTypeStatistics) GetProhibitRoutes() uint32 {
	if x != nil {
		return x.ProhibitRoutes
	}
	return 0
}

func (x *StaticRouteTypeStatistics) GetLocalRoutes() uint32 {
	if x != nil {
		return x.LocalRoutes
	}
	return 0
}

// Static Nexthop Group Statistics
type StaticNexthopGroupStatistics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TotalGroups     uint32 `protobuf:"varint,1,opt,name=total_groups,json=totalGroups,proto3" json:"total_groups,omitempty"`
	MultipathGroups uint32 `protobuf:"varint,2,opt,name=multipath_groups,json=multipathGroups,proto3" json:"multipath_groups,omitempty"`
	ResilientGroups uint32 `protobuf:"varint,3,opt,name=resilient_groups,json=resilientGroups,proto3" json:"resilient_groups,omitempty"`
	TotalNexthops   uint32 `protobuf:"varint,4,opt,name=total_nexthops,json=totalNexthops,proto3" json:"total_nexthops,omitempty"`
	ActiveNexthops  uint32 `protobuf:"varint,5,opt,name=active_nexthops,json=activeNexthops,proto3" json:"active_nexthops,omitempty"`
}

func (x *StaticNexthopGroupStatistics) Reset() {
	*x = StaticNexthopGroupStatistics{}
	mi := &file_client_frr_proto_msgTypes[44]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StaticNexthopGroupStatistics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StaticNexthopGroupStatistics) ProtoMessage() {}

func (x *StaticNexthopGroupStatistics) ProtoReflect() protoreflect.Message {
	mi := &file_client_frr_proto_msgTypes[44]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StaticNexthopGroupStatistics.ProtoReflect.Descriptor instead.
func (*StaticNexthopGroupStatistics) Descriptor() ([]byte, []int) {
	return file_client_frr_proto_rawDescGZIP(), []int{44}
}

func (x *StaticNexthopGroupStatistics) GetTotalGroups() uint32 {
	if x != nil {
		return x.TotalGroups
	}
	return 0
}

func (x *StaticNexthopGroupStatistics) GetMultipathGroups() uint32 {
	if x != nil {
		return x.MultipathGroups
	}
	return 0
}

func (x *StaticNexthopGroupStatistics) GetResilientGroups() uint32 {
	if x != nil {
		return x.ResilientGroups
	}
	return 0
}

func (x *StaticNexthopGroupStatistics) GetTotalNexthops() uint32 {
	if x != nil {
		return x.TotalNexthops
	}
	return 0
}

func (x *StaticNexthopGroupStatistics) GetActiveNexthops() uint32 {
	if x != nil {
		return x.ActiveNexthops
	}
	return 0
}

// BGP Request
type RequestBgp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Operation     BgpOperationType  `protobuf:"varint,1,opt,name=operation,proto3,enum=client.BgpOperationType" json:"operation,omitempty"`
	Config        *BgpConfig        `protobuf:"bytes,2,opt,name=config,proto3" json:"config,omitempty"`
	Neighbor      *BgpNeighbor      `protobuf:"bytes,3,opt,name=neighbor,proto3" json:"neighbor,omitempty"`
	PeerIp        string            `protobuf:"bytes,5,opt,name=peer_ip,json=peerIp,proto3" json:"peer_ip,omitempty"`
	NetworkPrefix string            `protobuf:"bytes,6,opt,name=network_prefix,json=networkPrefix,proto3" json:"network_prefix,omitempty"`
	RouteMap      *BgpRouteMap      `protobuf:"bytes,7,opt,name=route_map,json=routeMap,proto3" json:"route_map,omitempty"`
	CommunityList *BgpCommunityList `protobuf:"bytes,8,opt,name=community_list,json=communityList,proto3" json:"community_list,omitempty"`
	PrefixList    *BgpPrefixList    `protobuf:"bytes,9,opt,name=prefix_list,json=prefixList,proto3" json:"prefix_list,omitempty"`
	Community     string            `protobuf:"bytes,10,opt,name=community,proto3" json:"community,omitempty"`
	AsNumber      uint32            `protobuf:"varint,11,opt,name=as_number,json=asNumber,proto3" json:"as_number,omitempty"` // AS number for status and cache operations
	// ============================================================================
	// TRANSACTION SUPPORT FIELDS
	// ============================================================================
	TransactionId        string                   `protobuf:"bytes,12,opt,name=transaction_id,json=transactionId,proto3" json:"transaction_id,omitempty"`                      // Transaction ID for transaction operations
	TransactionOperation *BgpTransactionOperation `protobuf:"bytes,13,opt,name=transaction_operation,json=transactionOperation,proto3" json:"transaction_operation,omitempty"` // Transaction operation details
	// ============================================================================
	// VALIDATION SUPPORT FIELDS
	// ============================================================================
	ValidationRequest *BgpValidationRequest `protobuf:"bytes,14,opt,name=validation_request,json=validationRequest,proto3" json:"validation_request,omitempty"` // Validation request details
	IpAddresses       []string              `protobuf:"bytes,15,rep,name=ip_addresses,json=ipAddresses,proto3" json:"ip_addresses,omitempty"`                   // IP addresses for validation
	LocalAs           uint32                `protobuf:"varint,16,opt,name=local_as,json=localAs,proto3" json:"local_as,omitempty"`                              // Local AS for AS validation
	RemoteAs          uint32                `protobuf:"varint,17,opt,name=remote_as,json=remoteAs,proto3" json:"remote_as,omitempty"`                           // Remote AS for AS validation
	// ============================================================================
	// ADVANCED QUERY FIELDS
	// ============================================================================
	SoftResetDirection string `protobuf:"bytes,18,opt,name=soft_reset_direction,json=softResetDirection,proto3" json:"soft_reset_direction,omitempty"` // "in", "out", or "both" for soft reset
	SessionType        string `protobuf:"bytes,19,opt,name=session_type,json=sessionType,proto3" json:"session_type,omitempty"`                        // Session type for operations
	IncludeInactive    bool   `protobuf:"varint,20,opt,name=include_inactive,json=includeInactive,proto3" json:"include_inactive,omitempty"`           // Include inactive neighbors/routes
	FilterCriteria     string `protobuf:"bytes,21,opt,name=filter_criteria,json=filterCriteria,proto3" json:"filter_criteria,omitempty"`               // Filter criteria for queries
}

func (x *RequestBgp) Reset() {
	*x = RequestBgp{}
	mi := &file_client_frr_proto_msgTypes[45]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RequestBgp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestBgp) ProtoMessage() {}

func (x *RequestBgp) ProtoReflect() protoreflect.Message {
	mi := &file_client_frr_proto_msgTypes[45]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestBgp.ProtoReflect.Descriptor instead.
func (*RequestBgp) Descriptor() ([]byte, []int) {
	return file_client_frr_proto_rawDescGZIP(), []int{45}
}

func (x *RequestBgp) GetOperation() BgpOperationType {
	if x != nil {
		return x.Operation
	}
	return BgpOperationType_BGP_UNKNOWN
}

func (x *RequestBgp) GetConfig() *BgpConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *RequestBgp) GetNeighbor() *BgpNeighbor {
	if x != nil {
		return x.Neighbor
	}
	return nil
}

func (x *RequestBgp) GetPeerIp() string {
	if x != nil {
		return x.PeerIp
	}
	return ""
}

func (x *RequestBgp) GetNetworkPrefix() string {
	if x != nil {
		return x.NetworkPrefix
	}
	return ""
}

func (x *RequestBgp) GetRouteMap() *BgpRouteMap {
	if x != nil {
		return x.RouteMap
	}
	return nil
}

func (x *RequestBgp) GetCommunityList() *BgpCommunityList {
	if x != nil {
		return x.CommunityList
	}
	return nil
}

func (x *RequestBgp) GetPrefixList() *BgpPrefixList {
	if x != nil {
		return x.PrefixList
	}
	return nil
}

func (x *RequestBgp) GetCommunity() string {
	if x != nil {
		return x.Community
	}
	return ""
}

func (x *RequestBgp) GetAsNumber() uint32 {
	if x != nil {
		return x.AsNumber
	}
	return 0
}

func (x *RequestBgp) GetTransactionId() string {
	if x != nil {
		return x.TransactionId
	}
	return ""
}

func (x *RequestBgp) GetTransactionOperation() *BgpTransactionOperation {
	if x != nil {
		return x.TransactionOperation
	}
	return nil
}

func (x *RequestBgp) GetValidationRequest() *BgpValidationRequest {
	if x != nil {
		return x.ValidationRequest
	}
	return nil
}

func (x *RequestBgp) GetIpAddresses() []string {
	if x != nil {
		return x.IpAddresses
	}
	return nil
}

func (x *RequestBgp) GetLocalAs() uint32 {
	if x != nil {
		return x.LocalAs
	}
	return 0
}

func (x *RequestBgp) GetRemoteAs() uint32 {
	if x != nil {
		return x.RemoteAs
	}
	return 0
}

func (x *RequestBgp) GetSoftResetDirection() string {
	if x != nil {
		return x.SoftResetDirection
	}
	return ""
}

func (x *RequestBgp) GetSessionType() string {
	if x != nil {
		return x.SessionType
	}
	return ""
}

func (x *RequestBgp) GetIncludeInactive() bool {
	if x != nil {
		return x.IncludeInactive
	}
	return false
}

func (x *RequestBgp) GetFilterCriteria() string {
	if x != nil {
		return x.FilterCriteria
	}
	return ""
}

// BGP Response
type ResponseBgp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Operation      BgpOperationType    `protobuf:"varint,1,opt,name=operation,proto3,enum=client.BgpOperationType" json:"operation,omitempty"`
	Success        bool                `protobuf:"varint,2,opt,name=success,proto3" json:"success,omitempty"`
	Message        string              `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	Config         *BgpConfig          `protobuf:"bytes,4,opt,name=config,proto3" json:"config,omitempty"`
	Neighbors      []*BgpNeighbor      `protobuf:"bytes,5,rep,name=neighbors,proto3" json:"neighbors,omitempty"`
	State          *BgpState           `protobuf:"bytes,7,opt,name=state,proto3" json:"state,omitempty"`
	Statistics     *BgpStatistics      `protobuf:"bytes,8,opt,name=statistics,proto3" json:"statistics,omitempty"`
	RouteMaps      []*BgpRouteMap      `protobuf:"bytes,9,rep,name=route_maps,json=routeMaps,proto3" json:"route_maps,omitempty"`
	CommunityLists []*BgpCommunityList `protobuf:"bytes,10,rep,name=community_lists,json=communityLists,proto3" json:"community_lists,omitempty"`
	PrefixLists    []*BgpPrefixList    `protobuf:"bytes,11,rep,name=prefix_lists,json=prefixLists,proto3" json:"prefix_lists,omitempty"`
	// VTYSH JSON responses
	ShowSummary   *ShowBgpSummary   `protobuf:"bytes,12,opt,name=show_summary,json=showSummary,proto3" json:"show_summary,omitempty"`
	ShowNeighbors *ShowBgpNeighbors `protobuf:"bytes,13,opt,name=show_neighbors,json=showNeighbors,proto3" json:"show_neighbors,omitempty"`
	ShowRoutes    *ShowBgpRoutes    `protobuf:"bytes,14,opt,name=show_routes,json=showRoutes,proto3" json:"show_routes,omitempty"`
	// Comprehensive status and performance info
	Status *BgpStatus `protobuf:"bytes,15,opt,name=status,proto3" json:"status,omitempty"`
	// ============================================================================
	// ADVANCED BGP RESPONSE FIELDS
	// ============================================================================
	Neighbor           *BgpNeighbor             `protobuf:"bytes,16,opt,name=neighbor,proto3" json:"neighbor,omitempty"`                                               // Single neighbor response
	NeighborStatistics []*BgpNeighborStatistics `protobuf:"bytes,17,rep,name=neighbor_statistics,json=neighborStatistics,proto3" json:"neighbor_statistics,omitempty"` // Neighbor statistics
	HealthStatus       *BgpHealthStatus         `protobuf:"bytes,18,opt,name=health_status,json=healthStatus,proto3" json:"health_status,omitempty"`                   // Health status response
	ProtocolStatus     *BgpProtocolStatus       `protobuf:"bytes,19,opt,name=protocol_status,json=protocolStatus,proto3" json:"protocol_status,omitempty"`             // Protocol status response
	PerformanceMetrics *BgpPerformanceMetrics   `protobuf:"bytes,20,opt,name=performance_metrics,json=performanceMetrics,proto3" json:"performance_metrics,omitempty"` // Performance metrics
	// ============================================================================
	// TRANSACTION RESPONSE FIELDS
	// ============================================================================
	TransactionResponse *BgpTransactionResponse `protobuf:"bytes,21,opt,name=transaction_response,json=transactionResponse,proto3" json:"transaction_response,omitempty"`                             // Transaction operation response
	TransactionId       string                  `protobuf:"bytes,22,opt,name=transaction_id,json=transactionId,proto3" json:"transaction_id,omitempty"`                                               // Transaction ID
	TransactionStatus   BgpTransactionStatus    `protobuf:"varint,23,opt,name=transaction_status,json=transactionStatus,proto3,enum=client.BgpTransactionStatus" json:"transaction_status,omitempty"` // Transaction status
	// ============================================================================
	// VALIDATION RESPONSE FIELDS
	// ============================================================================
	ValidationResponse *BgpValidationResponse `protobuf:"bytes,24,opt,name=validation_response,json=validationResponse,proto3" json:"validation_response,omitempty"` // Validation results
	ValidationErrors   []string               `protobuf:"bytes,25,rep,name=validation_errors,json=validationErrors,proto3" json:"validation_errors,omitempty"`       // Validation error messages
	ValidationWarnings []string               `protobuf:"bytes,26,rep,name=validation_warnings,json=validationWarnings,proto3" json:"validation_warnings,omitempty"` // Validation warning messages
	// ============================================================================
	// CACHE & PERFORMANCE RESPONSE FIELDS
	// ============================================================================
	CacheStatistics       map[string]int64   `protobuf:"bytes,27,rep,name=cache_statistics,json=cacheStatistics,proto3" json:"cache_statistics,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"` // Cache statistics
	CacheHitRatios        map[string]float64 `protobuf:"bytes,28,rep,name=cache_hit_ratios,json=cacheHitRatios,proto3" json:"cache_hit_ratios,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"fixed64,2,opt,name=value,proto3"` // Cache hit ratios
	NeighborUptime        uint64             `protobuf:"varint,29,opt,name=neighbor_uptime,json=neighborUptime,proto3" json:"neighbor_uptime,omitempty"`                                                                                            // Neighbor uptime in seconds
	RoutesReceivedCount   uint32             `protobuf:"varint,30,opt,name=routes_received_count,json=routesReceivedCount,proto3" json:"routes_received_count,omitempty"`                                                                           // Routes received count
	IsNeighborEstablished bool               `protobuf:"varint,31,opt,name=is_neighbor_established,json=isNeighborEstablished,proto3" json:"is_neighbor_established,omitempty"`                                                                     // Neighbor establishment status
	// ============================================================================
	// NETWORK METRICS RESPONSE FIELDS
	// ============================================================================
	NetworkCount         uint32                   `protobuf:"varint,32,opt,name=network_count,json=networkCount,proto3" json:"network_count,omitempty"`                        // Network count
	RedistributionStatus *BgpRedistributionStatus `protobuf:"bytes,33,opt,name=redistribution_status,json=redistributionStatus,proto3" json:"redistribution_status,omitempty"` // Redistribution status
}

func (x *ResponseBgp) Reset() {
	*x = ResponseBgp{}
	mi := &file_client_frr_proto_msgTypes[46]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResponseBgp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseBgp) ProtoMessage() {}

func (x *ResponseBgp) ProtoReflect() protoreflect.Message {
	mi := &file_client_frr_proto_msgTypes[46]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseBgp.ProtoReflect.Descriptor instead.
func (*ResponseBgp) Descriptor() ([]byte, []int) {
	return file_client_frr_proto_rawDescGZIP(), []int{46}
}

func (x *ResponseBgp) GetOperation() BgpOperationType {
	if x != nil {
		return x.Operation
	}
	return BgpOperationType_BGP_UNKNOWN
}

func (x *ResponseBgp) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *ResponseBgp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ResponseBgp) GetConfig() *BgpConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *ResponseBgp) GetNeighbors() []*BgpNeighbor {
	if x != nil {
		return x.Neighbors
	}
	return nil
}

func (x *ResponseBgp) GetState() *BgpState {
	if x != nil {
		return x.State
	}
	return nil
}

func (x *ResponseBgp) GetStatistics() *BgpStatistics {
	if x != nil {
		return x.Statistics
	}
	return nil
}

func (x *ResponseBgp) GetRouteMaps() []*BgpRouteMap {
	if x != nil {
		return x.RouteMaps
	}
	return nil
}

func (x *ResponseBgp) GetCommunityLists() []*BgpCommunityList {
	if x != nil {
		return x.CommunityLists
	}
	return nil
}

func (x *ResponseBgp) GetPrefixLists() []*BgpPrefixList {
	if x != nil {
		return x.PrefixLists
	}
	return nil
}

func (x *ResponseBgp) GetShowSummary() *ShowBgpSummary {
	if x != nil {
		return x.ShowSummary
	}
	return nil
}

func (x *ResponseBgp) GetShowNeighbors() *ShowBgpNeighbors {
	if x != nil {
		return x.ShowNeighbors
	}
	return nil
}

func (x *ResponseBgp) GetShowRoutes() *ShowBgpRoutes {
	if x != nil {
		return x.ShowRoutes
	}
	return nil
}

func (x *ResponseBgp) GetStatus() *BgpStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *ResponseBgp) GetNeighbor() *BgpNeighbor {
	if x != nil {
		return x.Neighbor
	}
	return nil
}

func (x *ResponseBgp) GetNeighborStatistics() []*BgpNeighborStatistics {
	if x != nil {
		return x.NeighborStatistics
	}
	return nil
}

func (x *ResponseBgp) GetHealthStatus() *BgpHealthStatus {
	if x != nil {
		return x.HealthStatus
	}
	return nil
}

func (x *ResponseBgp) GetProtocolStatus() *BgpProtocolStatus {
	if x != nil {
		return x.ProtocolStatus
	}
	return nil
}

func (x *ResponseBgp) GetPerformanceMetrics() *BgpPerformanceMetrics {
	if x != nil {
		return x.PerformanceMetrics
	}
	return nil
}

func (x *ResponseBgp) GetTransactionResponse() *BgpTransactionResponse {
	if x != nil {
		return x.TransactionResponse
	}
	return nil
}

func (x *ResponseBgp) GetTransactionId() string {
	if x != nil {
		return x.TransactionId
	}
	return ""
}

func (x *ResponseBgp) GetTransactionStatus() BgpTransactionStatus {
	if x != nil {
		return x.TransactionStatus
	}
	return BgpTransactionStatus_TRANSACTION_UNKNOWN
}

func (x *ResponseBgp) GetValidationResponse() *BgpValidationResponse {
	if x != nil {
		return x.ValidationResponse
	}
	return nil
}

func (x *ResponseBgp) GetValidationErrors() []string {
	if x != nil {
		return x.ValidationErrors
	}
	return nil
}

func (x *ResponseBgp) GetValidationWarnings() []string {
	if x != nil {
		return x.ValidationWarnings
	}
	return nil
}

func (x *ResponseBgp) GetCacheStatistics() map[string]int64 {
	if x != nil {
		return x.CacheStatistics
	}
	return nil
}

func (x *ResponseBgp) GetCacheHitRatios() map[string]float64 {
	if x != nil {
		return x.CacheHitRatios
	}
	return nil
}

func (x *ResponseBgp) GetNeighborUptime() uint64 {
	if x != nil {
		return x.NeighborUptime
	}
	return 0
}

func (x *ResponseBgp) GetRoutesReceivedCount() uint32 {
	if x != nil {
		return x.RoutesReceivedCount
	}
	return 0
}

func (x *ResponseBgp) GetIsNeighborEstablished() bool {
	if x != nil {
		return x.IsNeighborEstablished
	}
	return false
}

func (x *ResponseBgp) GetNetworkCount() uint32 {
	if x != nil {
		return x.NetworkCount
	}
	return 0
}

func (x *ResponseBgp) GetRedistributionStatus() *BgpRedistributionStatus {
	if x != nil {
		return x.RedistributionStatus
	}
	return nil
}

// Static Routing Request
type RequestStatic struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Operation      StaticOperationType `protobuf:"varint,1,opt,name=operation,proto3,enum=client.StaticOperationType" json:"operation,omitempty"`
	Config         *StaticConfig       `protobuf:"bytes,2,opt,name=config,proto3" json:"config,omitempty"`
	Route          *StaticRoute        `protobuf:"bytes,3,opt,name=route,proto3" json:"route,omitempty"`
	RouteTable     *StaticRouteTable   `protobuf:"bytes,4,opt,name=route_table,json=routeTable,proto3" json:"route_table,omitempty"`
	NexthopGroup   *StaticNexthopGroup `protobuf:"bytes,5,opt,name=nexthop_group,json=nexthopGroup,proto3" json:"nexthop_group,omitempty"`
	TableId        uint32              `protobuf:"varint,6,opt,name=table_id,json=tableId,proto3" json:"table_id,omitempty"`
	FilterCriteria string              `protobuf:"bytes,7,opt,name=filter_criteria,json=filterCriteria,proto3" json:"filter_criteria,omitempty"`
}

func (x *RequestStatic) Reset() {
	*x = RequestStatic{}
	mi := &file_client_frr_proto_msgTypes[47]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RequestStatic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestStatic) ProtoMessage() {}

func (x *RequestStatic) ProtoReflect() protoreflect.Message {
	mi := &file_client_frr_proto_msgTypes[47]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestStatic.ProtoReflect.Descriptor instead.
func (*RequestStatic) Descriptor() ([]byte, []int) {
	return file_client_frr_proto_rawDescGZIP(), []int{47}
}

func (x *RequestStatic) GetOperation() StaticOperationType {
	if x != nil {
		return x.Operation
	}
	return StaticOperationType_STATIC_UNKNOWN
}

func (x *RequestStatic) GetConfig() *StaticConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *RequestStatic) GetRoute() *StaticRoute {
	if x != nil {
		return x.Route
	}
	return nil
}

func (x *RequestStatic) GetRouteTable() *StaticRouteTable {
	if x != nil {
		return x.RouteTable
	}
	return nil
}

func (x *RequestStatic) GetNexthopGroup() *StaticNexthopGroup {
	if x != nil {
		return x.NexthopGroup
	}
	return nil
}

func (x *RequestStatic) GetTableId() uint32 {
	if x != nil {
		return x.TableId
	}
	return 0
}

func (x *RequestStatic) GetFilterCriteria() string {
	if x != nil {
		return x.FilterCriteria
	}
	return ""
}

// Static Routing Response
type ResponseStatic struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Operation     StaticOperationType   `protobuf:"varint,1,opt,name=operation,proto3,enum=client.StaticOperationType" json:"operation,omitempty"`
	Success       bool                  `protobuf:"varint,2,opt,name=success,proto3" json:"success,omitempty"`
	Message       string                `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	Config        *StaticConfig         `protobuf:"bytes,4,opt,name=config,proto3" json:"config,omitempty"`
	Routes        []*StaticRoute        `protobuf:"bytes,5,rep,name=routes,proto3" json:"routes,omitempty"`
	RouteTables   []*StaticRouteTable   `protobuf:"bytes,6,rep,name=route_tables,json=routeTables,proto3" json:"route_tables,omitempty"`
	NexthopGroups []*StaticNexthopGroup `protobuf:"bytes,7,rep,name=nexthop_groups,json=nexthopGroups,proto3" json:"nexthop_groups,omitempty"`
	Statistics    *StaticStatistics     `protobuf:"bytes,8,opt,name=statistics,proto3" json:"statistics,omitempty"`
	// VTYSH JSON response
	ShowRoutes *ShowStaticRoutes `protobuf:"bytes,9,opt,name=show_routes,json=showRoutes,proto3" json:"show_routes,omitempty"`
}

func (x *ResponseStatic) Reset() {
	*x = ResponseStatic{}
	mi := &file_client_frr_proto_msgTypes[48]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResponseStatic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseStatic) ProtoMessage() {}

func (x *ResponseStatic) ProtoReflect() protoreflect.Message {
	mi := &file_client_frr_proto_msgTypes[48]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseStatic.ProtoReflect.Descriptor instead.
func (*ResponseStatic) Descriptor() ([]byte, []int) {
	return file_client_frr_proto_rawDescGZIP(), []int{48}
}

func (x *ResponseStatic) GetOperation() StaticOperationType {
	if x != nil {
		return x.Operation
	}
	return StaticOperationType_STATIC_UNKNOWN
}

func (x *ResponseStatic) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *ResponseStatic) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ResponseStatic) GetConfig() *StaticConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *ResponseStatic) GetRoutes() []*StaticRoute {
	if x != nil {
		return x.Routes
	}
	return nil
}

func (x *ResponseStatic) GetRouteTables() []*StaticRouteTable {
	if x != nil {
		return x.RouteTables
	}
	return nil
}

func (x *ResponseStatic) GetNexthopGroups() []*StaticNexthopGroup {
	if x != nil {
		return x.NexthopGroups
	}
	return nil
}

func (x *ResponseStatic) GetStatistics() *StaticStatistics {
	if x != nil {
		return x.Statistics
	}
	return nil
}

func (x *ResponseStatic) GetShowRoutes() *ShowStaticRoutes {
	if x != nil {
		return x.ShowRoutes
	}
	return nil
}

// BGP Comprehensive Status Message
type BgpStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AsNumber           uint32                 `protobuf:"varint,1,opt,name=as_number,json=asNumber,proto3" json:"as_number,omitempty"`
	Enabled            bool                   `protobuf:"varint,2,opt,name=enabled,proto3" json:"enabled,omitempty"`
	DaemonRunning      bool                   `protobuf:"varint,3,opt,name=daemon_running,json=daemonRunning,proto3" json:"daemon_running,omitempty"`
	ConfigValid        bool                   `protobuf:"varint,4,opt,name=config_valid,json=configValid,proto3" json:"config_valid,omitempty"`
	CacheStatistics    map[string]int64       `protobuf:"bytes,5,rep,name=cache_statistics,json=cacheStatistics,proto3" json:"cache_statistics,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	NetworkMetrics     map[string]int64       `protobuf:"bytes,6,rep,name=network_metrics,json=networkMetrics,proto3" json:"network_metrics,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	PerformanceMetrics *BgpPerformanceMetrics `protobuf:"bytes,7,opt,name=performance_metrics,json=performanceMetrics,proto3" json:"performance_metrics,omitempty"`
	HealthStatus       *BgpHealthStatus       `protobuf:"bytes,8,opt,name=health_status,json=healthStatus,proto3" json:"health_status,omitempty"`
	Timestamp          uint64                 `protobuf:"varint,9,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	StatusMessage      string                 `protobuf:"bytes,10,opt,name=status_message,json=statusMessage,proto3" json:"status_message,omitempty"`
}

func (x *BgpStatus) Reset() {
	*x = BgpStatus{}
	mi := &file_client_frr_proto_msgTypes[49]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BgpStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpStatus) ProtoMessage() {}

func (x *BgpStatus) ProtoReflect() protoreflect.Message {
	mi := &file_client_frr_proto_msgTypes[49]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpStatus.ProtoReflect.Descriptor instead.
func (*BgpStatus) Descriptor() ([]byte, []int) {
	return file_client_frr_proto_rawDescGZIP(), []int{49}
}

func (x *BgpStatus) GetAsNumber() uint32 {
	if x != nil {
		return x.AsNumber
	}
	return 0
}

func (x *BgpStatus) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *BgpStatus) GetDaemonRunning() bool {
	if x != nil {
		return x.DaemonRunning
	}
	return false
}

func (x *BgpStatus) GetConfigValid() bool {
	if x != nil {
		return x.ConfigValid
	}
	return false
}

func (x *BgpStatus) GetCacheStatistics() map[string]int64 {
	if x != nil {
		return x.CacheStatistics
	}
	return nil
}

func (x *BgpStatus) GetNetworkMetrics() map[string]int64 {
	if x != nil {
		return x.NetworkMetrics
	}
	return nil
}

func (x *BgpStatus) GetPerformanceMetrics() *BgpPerformanceMetrics {
	if x != nil {
		return x.PerformanceMetrics
	}
	return nil
}

func (x *BgpStatus) GetHealthStatus() *BgpHealthStatus {
	if x != nil {
		return x.HealthStatus
	}
	return nil
}

func (x *BgpStatus) GetTimestamp() uint64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *BgpStatus) GetStatusMessage() string {
	if x != nil {
		return x.StatusMessage
	}
	return ""
}

// BGP Performance Metrics
type BgpPerformanceMetrics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CacheHitRatios          map[string]float64 `protobuf:"bytes,1,rep,name=cache_hit_ratios,json=cacheHitRatios,proto3" json:"cache_hit_ratios,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"fixed64,2,opt,name=value,proto3"`
	EstimatedCacheMemoryKb  uint64             `protobuf:"varint,2,opt,name=estimated_cache_memory_kb,json=estimatedCacheMemoryKb,proto3" json:"estimated_cache_memory_kb,omitempty"`
	GoRoutines              uint32             `protobuf:"varint,3,opt,name=go_routines,json=goRoutines,proto3" json:"go_routines,omitempty"`
	MemoryAllocMb           uint64             `protobuf:"varint,4,opt,name=memory_alloc_mb,json=memoryAllocMb,proto3" json:"memory_alloc_mb,omitempty"`
	TotalAllocMb            uint64             `protobuf:"varint,5,opt,name=total_alloc_mb,json=totalAllocMb,proto3" json:"total_alloc_mb,omitempty"`
	SysMb                   uint64             `protobuf:"varint,6,opt,name=sys_mb,json=sysMb,proto3" json:"sys_mb,omitempty"`
	NumGc                   uint32             `protobuf:"varint,7,opt,name=num_gc,json=numGc,proto3" json:"num_gc,omitempty"`
	OptimizationRecommended bool               `protobuf:"varint,8,opt,name=optimization_recommended,json=optimizationRecommended,proto3" json:"optimization_recommended,omitempty"`
}

func (x *BgpPerformanceMetrics) Reset() {
	*x = BgpPerformanceMetrics{}
	mi := &file_client_frr_proto_msgTypes[50]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BgpPerformanceMetrics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpPerformanceMetrics) ProtoMessage() {}

func (x *BgpPerformanceMetrics) ProtoReflect() protoreflect.Message {
	mi := &file_client_frr_proto_msgTypes[50]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpPerformanceMetrics.ProtoReflect.Descriptor instead.
func (*BgpPerformanceMetrics) Descriptor() ([]byte, []int) {
	return file_client_frr_proto_rawDescGZIP(), []int{50}
}

func (x *BgpPerformanceMetrics) GetCacheHitRatios() map[string]float64 {
	if x != nil {
		return x.CacheHitRatios
	}
	return nil
}

func (x *BgpPerformanceMetrics) GetEstimatedCacheMemoryKb() uint64 {
	if x != nil {
		return x.EstimatedCacheMemoryKb
	}
	return 0
}

func (x *BgpPerformanceMetrics) GetGoRoutines() uint32 {
	if x != nil {
		return x.GoRoutines
	}
	return 0
}

func (x *BgpPerformanceMetrics) GetMemoryAllocMb() uint64 {
	if x != nil {
		return x.MemoryAllocMb
	}
	return 0
}

func (x *BgpPerformanceMetrics) GetTotalAllocMb() uint64 {
	if x != nil {
		return x.TotalAllocMb
	}
	return 0
}

func (x *BgpPerformanceMetrics) GetSysMb() uint64 {
	if x != nil {
		return x.SysMb
	}
	return 0
}

func (x *BgpPerformanceMetrics) GetNumGc() uint32 {
	if x != nil {
		return x.NumGc
	}
	return 0
}

func (x *BgpPerformanceMetrics) GetOptimizationRecommended() bool {
	if x != nil {
		return x.OptimizationRecommended
	}
	return false
}

// BGP Health Status
type BgpHealthStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Healthy            bool     `protobuf:"varint,1,opt,name=healthy,proto3" json:"healthy,omitempty"`
	DaemonRunning      bool     `protobuf:"varint,2,opt,name=daemon_running,json=daemonRunning,proto3" json:"daemon_running,omitempty"`
	ConfigValid        bool     `protobuf:"varint,3,opt,name=config_valid,json=configValid,proto3" json:"config_valid,omitempty"`
	NeighborsConnected uint32   `protobuf:"varint,4,opt,name=neighbors_connected,json=neighborsConnected,proto3" json:"neighbors_connected,omitempty"`
	TotalNeighbors     uint32   `protobuf:"varint,5,opt,name=total_neighbors,json=totalNeighbors,proto3" json:"total_neighbors,omitempty"`
	Issues             []string `protobuf:"bytes,6,rep,name=issues,proto3" json:"issues,omitempty"`
	ConnectionRatio    float64  `protobuf:"fixed64,7,opt,name=connection_ratio,json=connectionRatio,proto3" json:"connection_ratio,omitempty"`
}

func (x *BgpHealthStatus) Reset() {
	*x = BgpHealthStatus{}
	mi := &file_client_frr_proto_msgTypes[51]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BgpHealthStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpHealthStatus) ProtoMessage() {}

func (x *BgpHealthStatus) ProtoReflect() protoreflect.Message {
	mi := &file_client_frr_proto_msgTypes[51]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpHealthStatus.ProtoReflect.Descriptor instead.
func (*BgpHealthStatus) Descriptor() ([]byte, []int) {
	return file_client_frr_proto_rawDescGZIP(), []int{51}
}

func (x *BgpHealthStatus) GetHealthy() bool {
	if x != nil {
		return x.Healthy
	}
	return false
}

func (x *BgpHealthStatus) GetDaemonRunning() bool {
	if x != nil {
		return x.DaemonRunning
	}
	return false
}

func (x *BgpHealthStatus) GetConfigValid() bool {
	if x != nil {
		return x.ConfigValid
	}
	return false
}

func (x *BgpHealthStatus) GetNeighborsConnected() uint32 {
	if x != nil {
		return x.NeighborsConnected
	}
	return 0
}

func (x *BgpHealthStatus) GetTotalNeighbors() uint32 {
	if x != nil {
		return x.TotalNeighbors
	}
	return 0
}

func (x *BgpHealthStatus) GetIssues() []string {
	if x != nil {
		return x.Issues
	}
	return nil
}

func (x *BgpHealthStatus) GetConnectionRatio() float64 {
	if x != nil {
		return x.ConnectionRatio
	}
	return 0
}

// BGP Cache Management
type BgpCacheInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CacheValid    bool   `protobuf:"varint,1,opt,name=cache_valid,json=cacheValid,proto3" json:"cache_valid,omitempty"`
	CacheSize     uint32 `protobuf:"varint,2,opt,name=cache_size,json=cacheSize,proto3" json:"cache_size,omitempty"`
	CacheHits     uint32 `protobuf:"varint,3,opt,name=cache_hits,json=cacheHits,proto3" json:"cache_hits,omitempty"`
	TotalRequests uint32 `protobuf:"varint,4,opt,name=total_requests,json=totalRequests,proto3" json:"total_requests,omitempty"`
	LastUpdated   uint64 `protobuf:"varint,5,opt,name=last_updated,json=lastUpdated,proto3" json:"last_updated,omitempty"`
	TtlSeconds    uint32 `protobuf:"varint,6,opt,name=ttl_seconds,json=ttlSeconds,proto3" json:"ttl_seconds,omitempty"`
}

func (x *BgpCacheInfo) Reset() {
	*x = BgpCacheInfo{}
	mi := &file_client_frr_proto_msgTypes[52]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BgpCacheInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpCacheInfo) ProtoMessage() {}

func (x *BgpCacheInfo) ProtoReflect() protoreflect.Message {
	mi := &file_client_frr_proto_msgTypes[52]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpCacheInfo.ProtoReflect.Descriptor instead.
func (*BgpCacheInfo) Descriptor() ([]byte, []int) {
	return file_client_frr_proto_rawDescGZIP(), []int{52}
}

func (x *BgpCacheInfo) GetCacheValid() bool {
	if x != nil {
		return x.CacheValid
	}
	return false
}

func (x *BgpCacheInfo) GetCacheSize() uint32 {
	if x != nil {
		return x.CacheSize
	}
	return 0
}

func (x *BgpCacheInfo) GetCacheHits() uint32 {
	if x != nil {
		return x.CacheHits
	}
	return 0
}

func (x *BgpCacheInfo) GetTotalRequests() uint32 {
	if x != nil {
		return x.TotalRequests
	}
	return 0
}

func (x *BgpCacheInfo) GetLastUpdated() uint64 {
	if x != nil {
		return x.LastUpdated
	}
	return 0
}

func (x *BgpCacheInfo) GetTtlSeconds() uint32 {
	if x != nil {
		return x.TtlSeconds
	}
	return 0
}

// BGP Summary (Enhanced)
type BgpSummary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LocalAs          uint32            `protobuf:"varint,1,opt,name=local_as,json=localAs,proto3" json:"local_as,omitempty"`
	RouterId         string            `protobuf:"bytes,2,opt,name=router_id,json=routerId,proto3" json:"router_id,omitempty"`
	TotalPeers       uint32            `protobuf:"varint,3,opt,name=total_peers,json=totalPeers,proto3" json:"total_peers,omitempty"`
	EstablishedPeers uint32            `protobuf:"varint,4,opt,name=established_peers,json=establishedPeers,proto3" json:"established_peers,omitempty"`
	TotalPrefixes    uint32            `protobuf:"varint,5,opt,name=total_prefixes,json=totalPrefixes,proto3" json:"total_prefixes,omitempty"`
	TableVersion     uint64            `protobuf:"varint,6,opt,name=table_version,json=tableVersion,proto3" json:"table_version,omitempty"`
	PeerSummary      []*BgpPeerSummary `protobuf:"bytes,7,rep,name=peer_summary,json=peerSummary,proto3" json:"peer_summary,omitempty"`
}

func (x *BgpSummary) Reset() {
	*x = BgpSummary{}
	mi := &file_client_frr_proto_msgTypes[53]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BgpSummary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpSummary) ProtoMessage() {}

func (x *BgpSummary) ProtoReflect() protoreflect.Message {
	mi := &file_client_frr_proto_msgTypes[53]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpSummary.ProtoReflect.Descriptor instead.
func (*BgpSummary) Descriptor() ([]byte, []int) {
	return file_client_frr_proto_rawDescGZIP(), []int{53}
}

func (x *BgpSummary) GetLocalAs() uint32 {
	if x != nil {
		return x.LocalAs
	}
	return 0
}

func (x *BgpSummary) GetRouterId() string {
	if x != nil {
		return x.RouterId
	}
	return ""
}

func (x *BgpSummary) GetTotalPeers() uint32 {
	if x != nil {
		return x.TotalPeers
	}
	return 0
}

func (x *BgpSummary) GetEstablishedPeers() uint32 {
	if x != nil {
		return x.EstablishedPeers
	}
	return 0
}

func (x *BgpSummary) GetTotalPrefixes() uint32 {
	if x != nil {
		return x.TotalPrefixes
	}
	return 0
}

func (x *BgpSummary) GetTableVersion() uint64 {
	if x != nil {
		return x.TableVersion
	}
	return 0
}

func (x *BgpSummary) GetPeerSummary() []*BgpPeerSummary {
	if x != nil {
		return x.PeerSummary
	}
	return nil
}

// BGP Peer Summary
type BgpPeerSummary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PeerIp           string `protobuf:"bytes,1,opt,name=peer_ip,json=peerIp,proto3" json:"peer_ip,omitempty"`
	RemoteAs         uint32 `protobuf:"varint,2,opt,name=remote_as,json=remoteAs,proto3" json:"remote_as,omitempty"`
	State            string `protobuf:"bytes,3,opt,name=state,proto3" json:"state,omitempty"`
	Uptime           uint64 `protobuf:"varint,4,opt,name=uptime,proto3" json:"uptime,omitempty"`
	PrefixesReceived uint32 `protobuf:"varint,5,opt,name=prefixes_received,json=prefixesReceived,proto3" json:"prefixes_received,omitempty"`
	PrefixesSent     uint32 `protobuf:"varint,6,opt,name=prefixes_sent,json=prefixesSent,proto3" json:"prefixes_sent,omitempty"`
	StatePfxRcd      string `protobuf:"bytes,7,opt,name=state_pfx_rcd,json=statePfxRcd,proto3" json:"state_pfx_rcd,omitempty"`
}

func (x *BgpPeerSummary) Reset() {
	*x = BgpPeerSummary{}
	mi := &file_client_frr_proto_msgTypes[54]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BgpPeerSummary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpPeerSummary) ProtoMessage() {}

func (x *BgpPeerSummary) ProtoReflect() protoreflect.Message {
	mi := &file_client_frr_proto_msgTypes[54]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpPeerSummary.ProtoReflect.Descriptor instead.
func (*BgpPeerSummary) Descriptor() ([]byte, []int) {
	return file_client_frr_proto_rawDescGZIP(), []int{54}
}

func (x *BgpPeerSummary) GetPeerIp() string {
	if x != nil {
		return x.PeerIp
	}
	return ""
}

func (x *BgpPeerSummary) GetRemoteAs() uint32 {
	if x != nil {
		return x.RemoteAs
	}
	return 0
}

func (x *BgpPeerSummary) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *BgpPeerSummary) GetUptime() uint64 {
	if x != nil {
		return x.Uptime
	}
	return 0
}

func (x *BgpPeerSummary) GetPrefixesReceived() uint32 {
	if x != nil {
		return x.PrefixesReceived
	}
	return 0
}

func (x *BgpPeerSummary) GetPrefixesSent() uint32 {
	if x != nil {
		return x.PrefixesSent
	}
	return 0
}

func (x *BgpPeerSummary) GetStatePfxRcd() string {
	if x != nil {
		return x.StatePfxRcd
	}
	return ""
}

// BGP Transaction Operation
type BgpTransactionOperation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OperationType string            `protobuf:"bytes,1,opt,name=operation_type,json=operationType,proto3" json:"operation_type,omitempty"` // Type of operation to add to transaction
	Config        *BgpConfig        `protobuf:"bytes,2,opt,name=config,proto3" json:"config,omitempty"`                                    // Configuration for the operation
	Neighbor      *BgpNeighbor      `protobuf:"bytes,3,opt,name=neighbor,proto3" json:"neighbor,omitempty"`                                // Neighbor for the operation
	RouteMap      *BgpRouteMap      `protobuf:"bytes,5,opt,name=route_map,json=routeMap,proto3" json:"route_map,omitempty"`                // Route map for the operation
	CommunityList *BgpCommunityList `protobuf:"bytes,6,opt,name=community_list,json=communityList,proto3" json:"community_list,omitempty"` // Community list for the operation
	PrefixList    *BgpPrefixList    `protobuf:"bytes,7,opt,name=prefix_list,json=prefixList,proto3" json:"prefix_list,omitempty"`          // Prefix list for the operation
	Description   string            `protobuf:"bytes,8,opt,name=description,proto3" json:"description,omitempty"`                          // Description of the operation
}

func (x *BgpTransactionOperation) Reset() {
	*x = BgpTransactionOperation{}
	mi := &file_client_frr_proto_msgTypes[55]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BgpTransactionOperation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpTransactionOperation) ProtoMessage() {}

func (x *BgpTransactionOperation) ProtoReflect() protoreflect.Message {
	mi := &file_client_frr_proto_msgTypes[55]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpTransactionOperation.ProtoReflect.Descriptor instead.
func (*BgpTransactionOperation) Descriptor() ([]byte, []int) {
	return file_client_frr_proto_rawDescGZIP(), []int{55}
}

func (x *BgpTransactionOperation) GetOperationType() string {
	if x != nil {
		return x.OperationType
	}
	return ""
}

func (x *BgpTransactionOperation) GetConfig() *BgpConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *BgpTransactionOperation) GetNeighbor() *BgpNeighbor {
	if x != nil {
		return x.Neighbor
	}
	return nil
}

func (x *BgpTransactionOperation) GetRouteMap() *BgpRouteMap {
	if x != nil {
		return x.RouteMap
	}
	return nil
}

func (x *BgpTransactionOperation) GetCommunityList() *BgpCommunityList {
	if x != nil {
		return x.CommunityList
	}
	return nil
}

func (x *BgpTransactionOperation) GetPrefixList() *BgpPrefixList {
	if x != nil {
		return x.PrefixList
	}
	return nil
}

func (x *BgpTransactionOperation) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

// BGP Transaction Response
type BgpTransactionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransactionId    string   `protobuf:"bytes,1,opt,name=transaction_id,json=transactionId,proto3" json:"transaction_id,omitempty"`
	Success          bool     `protobuf:"varint,2,opt,name=success,proto3" json:"success,omitempty"`
	Message          string   `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	OperationResults []string `protobuf:"bytes,4,rep,name=operation_results,json=operationResults,proto3" json:"operation_results,omitempty"`
	OperationsCount  uint32   `protobuf:"varint,5,opt,name=operations_count,json=operationsCount,proto3" json:"operations_count,omitempty"`
	ExecutionTimeMs  uint64   `protobuf:"varint,6,opt,name=execution_time_ms,json=executionTimeMs,proto3" json:"execution_time_ms,omitempty"`
}

func (x *BgpTransactionResponse) Reset() {
	*x = BgpTransactionResponse{}
	mi := &file_client_frr_proto_msgTypes[56]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BgpTransactionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpTransactionResponse) ProtoMessage() {}

func (x *BgpTransactionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_client_frr_proto_msgTypes[56]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpTransactionResponse.ProtoReflect.Descriptor instead.
func (*BgpTransactionResponse) Descriptor() ([]byte, []int) {
	return file_client_frr_proto_rawDescGZIP(), []int{56}
}

func (x *BgpTransactionResponse) GetTransactionId() string {
	if x != nil {
		return x.TransactionId
	}
	return ""
}

func (x *BgpTransactionResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *BgpTransactionResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *BgpTransactionResponse) GetOperationResults() []string {
	if x != nil {
		return x.OperationResults
	}
	return nil
}

func (x *BgpTransactionResponse) GetOperationsCount() uint32 {
	if x != nil {
		return x.OperationsCount
	}
	return 0
}

func (x *BgpTransactionResponse) GetExecutionTimeMs() uint64 {
	if x != nil {
		return x.ExecutionTimeMs
	}
	return 0
}

// BGP Validation Request
type BgpValidationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ValidationType   string            `protobuf:"bytes,1,opt,name=validation_type,json=validationType,proto3" json:"validation_type,omitempty"`        // Type of validation to perform
	Config           *BgpConfig        `protobuf:"bytes,2,opt,name=config,proto3" json:"config,omitempty"`                                              // Configuration to validate
	Neighbor         *BgpNeighbor      `protobuf:"bytes,3,opt,name=neighbor,proto3" json:"neighbor,omitempty"`                                          // Neighbor to validate
	RouteMap         *BgpRouteMap      `protobuf:"bytes,5,opt,name=route_map,json=routeMap,proto3" json:"route_map,omitempty"`                          // Route map to validate
	CommunityList    *BgpCommunityList `protobuf:"bytes,6,opt,name=community_list,json=communityList,proto3" json:"community_list,omitempty"`           // Community list to validate
	PrefixList       *BgpPrefixList    `protobuf:"bytes,7,opt,name=prefix_list,json=prefixList,proto3" json:"prefix_list,omitempty"`                    // Prefix list to validate
	StrictValidation bool              `protobuf:"varint,8,opt,name=strict_validation,json=strictValidation,proto3" json:"strict_validation,omitempty"` // Whether to perform strict validation
}

func (x *BgpValidationRequest) Reset() {
	*x = BgpValidationRequest{}
	mi := &file_client_frr_proto_msgTypes[57]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BgpValidationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpValidationRequest) ProtoMessage() {}

func (x *BgpValidationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_client_frr_proto_msgTypes[57]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpValidationRequest.ProtoReflect.Descriptor instead.
func (*BgpValidationRequest) Descriptor() ([]byte, []int) {
	return file_client_frr_proto_rawDescGZIP(), []int{57}
}

func (x *BgpValidationRequest) GetValidationType() string {
	if x != nil {
		return x.ValidationType
	}
	return ""
}

func (x *BgpValidationRequest) GetConfig() *BgpConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *BgpValidationRequest) GetNeighbor() *BgpNeighbor {
	if x != nil {
		return x.Neighbor
	}
	return nil
}

func (x *BgpValidationRequest) GetRouteMap() *BgpRouteMap {
	if x != nil {
		return x.RouteMap
	}
	return nil
}

func (x *BgpValidationRequest) GetCommunityList() *BgpCommunityList {
	if x != nil {
		return x.CommunityList
	}
	return nil
}

func (x *BgpValidationRequest) GetPrefixList() *BgpPrefixList {
	if x != nil {
		return x.PrefixList
	}
	return nil
}

func (x *BgpValidationRequest) GetStrictValidation() bool {
	if x != nil {
		return x.StrictValidation
	}
	return false
}

// BGP Validation Response
type BgpValidationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Valid             bool                    `protobuf:"varint,1,opt,name=valid,proto3" json:"valid,omitempty"`
	ValidationType    string                  `protobuf:"bytes,2,opt,name=validation_type,json=validationType,proto3" json:"validation_type,omitempty"`
	Errors            []*BgpValidationError   `protobuf:"bytes,3,rep,name=errors,proto3" json:"errors,omitempty"`
	Warnings          []*BgpValidationWarning `protobuf:"bytes,4,rep,name=warnings,proto3" json:"warnings,omitempty"`
	ValidationDetails map[string]string       `protobuf:"bytes,5,rep,name=validation_details,json=validationDetails,proto3" json:"validation_details,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	TotalChecks       uint32                  `protobuf:"varint,6,opt,name=total_checks,json=totalChecks,proto3" json:"total_checks,omitempty"`
	PassedChecks      uint32                  `protobuf:"varint,7,opt,name=passed_checks,json=passedChecks,proto3" json:"passed_checks,omitempty"`
	FailedChecks      uint32                  `protobuf:"varint,8,opt,name=failed_checks,json=failedChecks,proto3" json:"failed_checks,omitempty"`
}

func (x *BgpValidationResponse) Reset() {
	*x = BgpValidationResponse{}
	mi := &file_client_frr_proto_msgTypes[58]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BgpValidationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpValidationResponse) ProtoMessage() {}

func (x *BgpValidationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_client_frr_proto_msgTypes[58]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpValidationResponse.ProtoReflect.Descriptor instead.
func (*BgpValidationResponse) Descriptor() ([]byte, []int) {
	return file_client_frr_proto_rawDescGZIP(), []int{58}
}

func (x *BgpValidationResponse) GetValid() bool {
	if x != nil {
		return x.Valid
	}
	return false
}

func (x *BgpValidationResponse) GetValidationType() string {
	if x != nil {
		return x.ValidationType
	}
	return ""
}

func (x *BgpValidationResponse) GetErrors() []*BgpValidationError {
	if x != nil {
		return x.Errors
	}
	return nil
}

func (x *BgpValidationResponse) GetWarnings() []*BgpValidationWarning {
	if x != nil {
		return x.Warnings
	}
	return nil
}

func (x *BgpValidationResponse) GetValidationDetails() map[string]string {
	if x != nil {
		return x.ValidationDetails
	}
	return nil
}

func (x *BgpValidationResponse) GetTotalChecks() uint32 {
	if x != nil {
		return x.TotalChecks
	}
	return 0
}

func (x *BgpValidationResponse) GetPassedChecks() uint32 {
	if x != nil {
		return x.PassedChecks
	}
	return 0
}

func (x *BgpValidationResponse) GetFailedChecks() uint32 {
	if x != nil {
		return x.FailedChecks
	}
	return 0
}

// BGP Validation Error
type BgpValidationError struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ErrorCode    string `protobuf:"bytes,1,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"`
	ErrorMessage string `protobuf:"bytes,2,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
	FieldName    string `protobuf:"bytes,3,opt,name=field_name,json=fieldName,proto3" json:"field_name,omitempty"`
	FieldValue   string `protobuf:"bytes,4,opt,name=field_value,json=fieldValue,proto3" json:"field_value,omitempty"`
	Severity     string `protobuf:"bytes,5,opt,name=severity,proto3" json:"severity,omitempty"` // "critical", "high", "medium", "low"
}

func (x *BgpValidationError) Reset() {
	*x = BgpValidationError{}
	mi := &file_client_frr_proto_msgTypes[59]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BgpValidationError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpValidationError) ProtoMessage() {}

func (x *BgpValidationError) ProtoReflect() protoreflect.Message {
	mi := &file_client_frr_proto_msgTypes[59]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpValidationError.ProtoReflect.Descriptor instead.
func (*BgpValidationError) Descriptor() ([]byte, []int) {
	return file_client_frr_proto_rawDescGZIP(), []int{59}
}

func (x *BgpValidationError) GetErrorCode() string {
	if x != nil {
		return x.ErrorCode
	}
	return ""
}

func (x *BgpValidationError) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

func (x *BgpValidationError) GetFieldName() string {
	if x != nil {
		return x.FieldName
	}
	return ""
}

func (x *BgpValidationError) GetFieldValue() string {
	if x != nil {
		return x.FieldValue
	}
	return ""
}

func (x *BgpValidationError) GetSeverity() string {
	if x != nil {
		return x.Severity
	}
	return ""
}

// BGP Validation Warning
type BgpValidationWarning struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WarningCode    string `protobuf:"bytes,1,opt,name=warning_code,json=warningCode,proto3" json:"warning_code,omitempty"`
	WarningMessage string `protobuf:"bytes,2,opt,name=warning_message,json=warningMessage,proto3" json:"warning_message,omitempty"`
	FieldName      string `protobuf:"bytes,3,opt,name=field_name,json=fieldName,proto3" json:"field_name,omitempty"`
	FieldValue     string `protobuf:"bytes,4,opt,name=field_value,json=fieldValue,proto3" json:"field_value,omitempty"`
	Recommendation string `protobuf:"bytes,5,opt,name=recommendation,proto3" json:"recommendation,omitempty"`
}

func (x *BgpValidationWarning) Reset() {
	*x = BgpValidationWarning{}
	mi := &file_client_frr_proto_msgTypes[60]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BgpValidationWarning) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpValidationWarning) ProtoMessage() {}

func (x *BgpValidationWarning) ProtoReflect() protoreflect.Message {
	mi := &file_client_frr_proto_msgTypes[60]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpValidationWarning.ProtoReflect.Descriptor instead.
func (*BgpValidationWarning) Descriptor() ([]byte, []int) {
	return file_client_frr_proto_rawDescGZIP(), []int{60}
}

func (x *BgpValidationWarning) GetWarningCode() string {
	if x != nil {
		return x.WarningCode
	}
	return ""
}

func (x *BgpValidationWarning) GetWarningMessage() string {
	if x != nil {
		return x.WarningMessage
	}
	return ""
}

func (x *BgpValidationWarning) GetFieldName() string {
	if x != nil {
		return x.FieldName
	}
	return ""
}

func (x *BgpValidationWarning) GetFieldValue() string {
	if x != nil {
		return x.FieldValue
	}
	return ""
}

func (x *BgpValidationWarning) GetRecommendation() string {
	if x != nil {
		return x.Recommendation
	}
	return ""
}

// BGP Protocol Status
type BgpProtocolStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DaemonRunning      bool              `protobuf:"varint,1,opt,name=daemon_running,json=daemonRunning,proto3" json:"daemon_running,omitempty"`
	ConfigurationValid bool              `protobuf:"varint,2,opt,name=configuration_valid,json=configurationValid,proto3" json:"configuration_valid,omitempty"`
	DaemonVersion      string            `protobuf:"bytes,3,opt,name=daemon_version,json=daemonVersion,proto3" json:"daemon_version,omitempty"`
	DaemonUptime       uint64            `protobuf:"varint,4,opt,name=daemon_uptime,json=daemonUptime,proto3" json:"daemon_uptime,omitempty"`
	MemoryUsageKb      uint32            `protobuf:"varint,5,opt,name=memory_usage_kb,json=memoryUsageKb,proto3" json:"memory_usage_kb,omitempty"`
	CpuUsagePercent    uint32            `protobuf:"varint,6,opt,name=cpu_usage_percent,json=cpuUsagePercent,proto3" json:"cpu_usage_percent,omitempty"`
	ActiveFeatures     []string          `protobuf:"bytes,7,rep,name=active_features,json=activeFeatures,proto3" json:"active_features,omitempty"`
	DaemonStatistics   map[string]string `protobuf:"bytes,8,rep,name=daemon_statistics,json=daemonStatistics,proto3" json:"daemon_statistics,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *BgpProtocolStatus) Reset() {
	*x = BgpProtocolStatus{}
	mi := &file_client_frr_proto_msgTypes[61]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BgpProtocolStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpProtocolStatus) ProtoMessage() {}

func (x *BgpProtocolStatus) ProtoReflect() protoreflect.Message {
	mi := &file_client_frr_proto_msgTypes[61]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpProtocolStatus.ProtoReflect.Descriptor instead.
func (*BgpProtocolStatus) Descriptor() ([]byte, []int) {
	return file_client_frr_proto_rawDescGZIP(), []int{61}
}

func (x *BgpProtocolStatus) GetDaemonRunning() bool {
	if x != nil {
		return x.DaemonRunning
	}
	return false
}

func (x *BgpProtocolStatus) GetConfigurationValid() bool {
	if x != nil {
		return x.ConfigurationValid
	}
	return false
}

func (x *BgpProtocolStatus) GetDaemonVersion() string {
	if x != nil {
		return x.DaemonVersion
	}
	return ""
}

func (x *BgpProtocolStatus) GetDaemonUptime() uint64 {
	if x != nil {
		return x.DaemonUptime
	}
	return 0
}

func (x *BgpProtocolStatus) GetMemoryUsageKb() uint32 {
	if x != nil {
		return x.MemoryUsageKb
	}
	return 0
}

func (x *BgpProtocolStatus) GetCpuUsagePercent() uint32 {
	if x != nil {
		return x.CpuUsagePercent
	}
	return 0
}

func (x *BgpProtocolStatus) GetActiveFeatures() []string {
	if x != nil {
		return x.ActiveFeatures
	}
	return nil
}

func (x *BgpProtocolStatus) GetDaemonStatistics() map[string]string {
	if x != nil {
		return x.DaemonStatistics
	}
	return nil
}

// BGP Redistribution Status
type BgpRedistributionStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConnectedEnabled      bool                                 `protobuf:"varint,1,opt,name=connected_enabled,json=connectedEnabled,proto3" json:"connected_enabled,omitempty"`
	StaticEnabled         bool                                 `protobuf:"varint,2,opt,name=static_enabled,json=staticEnabled,proto3" json:"static_enabled,omitempty"`
	OspfEnabled           bool                                 `protobuf:"varint,3,opt,name=ospf_enabled,json=ospfEnabled,proto3" json:"ospf_enabled,omitempty"`
	RipEnabled            bool                                 `protobuf:"varint,4,opt,name=rip_enabled,json=ripEnabled,proto3" json:"rip_enabled,omitempty"`
	KernelEnabled         bool                                 `protobuf:"varint,5,opt,name=kernel_enabled,json=kernelEnabled,proto3" json:"kernel_enabled,omitempty"`
	RedistributionMetrics map[string]*BgpRedistributionMetrics `protobuf:"bytes,6,rep,name=redistribution_metrics,json=redistributionMetrics,proto3" json:"redistribution_metrics,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *BgpRedistributionStatus) Reset() {
	*x = BgpRedistributionStatus{}
	mi := &file_client_frr_proto_msgTypes[62]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BgpRedistributionStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpRedistributionStatus) ProtoMessage() {}

func (x *BgpRedistributionStatus) ProtoReflect() protoreflect.Message {
	mi := &file_client_frr_proto_msgTypes[62]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpRedistributionStatus.ProtoReflect.Descriptor instead.
func (*BgpRedistributionStatus) Descriptor() ([]byte, []int) {
	return file_client_frr_proto_rawDescGZIP(), []int{62}
}

func (x *BgpRedistributionStatus) GetConnectedEnabled() bool {
	if x != nil {
		return x.ConnectedEnabled
	}
	return false
}

func (x *BgpRedistributionStatus) GetStaticEnabled() bool {
	if x != nil {
		return x.StaticEnabled
	}
	return false
}

func (x *BgpRedistributionStatus) GetOspfEnabled() bool {
	if x != nil {
		return x.OspfEnabled
	}
	return false
}

func (x *BgpRedistributionStatus) GetRipEnabled() bool {
	if x != nil {
		return x.RipEnabled
	}
	return false
}

func (x *BgpRedistributionStatus) GetKernelEnabled() bool {
	if x != nil {
		return x.KernelEnabled
	}
	return false
}

func (x *BgpRedistributionStatus) GetRedistributionMetrics() map[string]*BgpRedistributionMetrics {
	if x != nil {
		return x.RedistributionMetrics
	}
	return nil
}

// BGP Redistribution Metrics
type BgpRedistributionMetrics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Protocol            string `protobuf:"bytes,1,opt,name=protocol,proto3" json:"protocol,omitempty"`
	RoutesRedistributed uint32 `protobuf:"varint,2,opt,name=routes_redistributed,json=routesRedistributed,proto3" json:"routes_redistributed,omitempty"`
	RoutesFiltered      uint32 `protobuf:"varint,3,opt,name=routes_filtered,json=routesFiltered,proto3" json:"routes_filtered,omitempty"`
	RouteMap            string `protobuf:"bytes,4,opt,name=route_map,json=routeMap,proto3" json:"route_map,omitempty"`
	Enabled             bool   `protobuf:"varint,5,opt,name=enabled,proto3" json:"enabled,omitempty"`
}

func (x *BgpRedistributionMetrics) Reset() {
	*x = BgpRedistributionMetrics{}
	mi := &file_client_frr_proto_msgTypes[63]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BgpRedistributionMetrics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpRedistributionMetrics) ProtoMessage() {}

func (x *BgpRedistributionMetrics) ProtoReflect() protoreflect.Message {
	mi := &file_client_frr_proto_msgTypes[63]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpRedistributionMetrics.ProtoReflect.Descriptor instead.
func (*BgpRedistributionMetrics) Descriptor() ([]byte, []int) {
	return file_client_frr_proto_rawDescGZIP(), []int{63}
}

func (x *BgpRedistributionMetrics) GetProtocol() string {
	if x != nil {
		return x.Protocol
	}
	return ""
}

func (x *BgpRedistributionMetrics) GetRoutesRedistributed() uint32 {
	if x != nil {
		return x.RoutesRedistributed
	}
	return 0
}

func (x *BgpRedistributionMetrics) GetRoutesFiltered() uint32 {
	if x != nil {
		return x.RoutesFiltered
	}
	return 0
}

func (x *BgpRedistributionMetrics) GetRouteMap() string {
	if x != nil {
		return x.RouteMap
	}
	return ""
}

func (x *BgpRedistributionMetrics) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

// BGP Network Update Request
type BgpNetworkUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CurrentNetwork string `protobuf:"bytes,1,opt,name=current_network,json=currentNetwork,proto3" json:"current_network,omitempty"` // Current network CIDR
	ForceUpdate    bool   `protobuf:"varint,3,opt,name=force_update,json=forceUpdate,proto3" json:"force_update,omitempty"`         // Force update even if same
}

func (x *BgpNetworkUpdate) Reset() {
	*x = BgpNetworkUpdate{}
	mi := &file_client_frr_proto_msgTypes[64]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BgpNetworkUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpNetworkUpdate) ProtoMessage() {}

func (x *BgpNetworkUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_client_frr_proto_msgTypes[64]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpNetworkUpdate.ProtoReflect.Descriptor instead.
func (*BgpNetworkUpdate) Descriptor() ([]byte, []int) {
	return file_client_frr_proto_rawDescGZIP(), []int{64}
}

func (x *BgpNetworkUpdate) GetCurrentNetwork() string {
	if x != nil {
		return x.CurrentNetwork
	}
	return ""
}

func (x *BgpNetworkUpdate) GetForceUpdate() bool {
	if x != nil {
		return x.ForceUpdate
	}
	return false
}

// BGP Configuration Consistency Check
type BgpConfigConsistency struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RouterIdConsistent bool     `protobuf:"varint,1,opt,name=router_id_consistent,json=routerIdConsistent,proto3" json:"router_id_consistent,omitempty"`
	AsNumberConsistent bool     `protobuf:"varint,2,opt,name=as_number_consistent,json=asNumberConsistent,proto3" json:"as_number_consistent,omitempty"`
	TimersConsistent   bool     `protobuf:"varint,3,opt,name=timers_consistent,json=timersConsistent,proto3" json:"timers_consistent,omitempty"`
	NeighborsReachable bool     `protobuf:"varint,4,opt,name=neighbors_reachable,json=neighborsReachable,proto3" json:"neighbors_reachable,omitempty"`
	NetworksValid      bool     `protobuf:"varint,5,opt,name=networks_valid,json=networksValid,proto3" json:"networks_valid,omitempty"`
	ConsistencyIssues  []string `protobuf:"bytes,6,rep,name=consistency_issues,json=consistencyIssues,proto3" json:"consistency_issues,omitempty"`
	Recommendations    []string `protobuf:"bytes,7,rep,name=recommendations,proto3" json:"recommendations,omitempty"`
}

func (x *BgpConfigConsistency) Reset() {
	*x = BgpConfigConsistency{}
	mi := &file_client_frr_proto_msgTypes[65]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BgpConfigConsistency) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpConfigConsistency) ProtoMessage() {}

func (x *BgpConfigConsistency) ProtoReflect() protoreflect.Message {
	mi := &file_client_frr_proto_msgTypes[65]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpConfigConsistency.ProtoReflect.Descriptor instead.
func (*BgpConfigConsistency) Descriptor() ([]byte, []int) {
	return file_client_frr_proto_rawDescGZIP(), []int{65}
}

func (x *BgpConfigConsistency) GetRouterIdConsistent() bool {
	if x != nil {
		return x.RouterIdConsistent
	}
	return false
}

func (x *BgpConfigConsistency) GetAsNumberConsistent() bool {
	if x != nil {
		return x.AsNumberConsistent
	}
	return false
}

func (x *BgpConfigConsistency) GetTimersConsistent() bool {
	if x != nil {
		return x.TimersConsistent
	}
	return false
}

func (x *BgpConfigConsistency) GetNeighborsReachable() bool {
	if x != nil {
		return x.NeighborsReachable
	}
	return false
}

func (x *BgpConfigConsistency) GetNetworksValid() bool {
	if x != nil {
		return x.NetworksValid
	}
	return false
}

func (x *BgpConfigConsistency) GetConsistencyIssues() []string {
	if x != nil {
		return x.ConsistencyIssues
	}
	return nil
}

func (x *BgpConfigConsistency) GetRecommendations() []string {
	if x != nil {
		return x.Recommendations
	}
	return nil
}

// BGP Neighbor Compatibility Check
type BgpNeighborCompatibility struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PeerIp                  string   `protobuf:"bytes,1,opt,name=peer_ip,json=peerIp,proto3" json:"peer_ip,omitempty"`
	AsCompatible            bool     `protobuf:"varint,2,opt,name=as_compatible,json=asCompatible,proto3" json:"as_compatible,omitempty"`
	AddressFamilyCompatible bool     `protobuf:"varint,3,opt,name=address_family_compatible,json=addressFamilyCompatible,proto3" json:"address_family_compatible,omitempty"`
	CapabilitiesCompatible  bool     `protobuf:"varint,4,opt,name=capabilities_compatible,json=capabilitiesCompatible,proto3" json:"capabilities_compatible,omitempty"`
	TimersCompatible        bool     `protobuf:"varint,5,opt,name=timers_compatible,json=timersCompatible,proto3" json:"timers_compatible,omitempty"`
	CompatibilityIssues     []string `protobuf:"bytes,6,rep,name=compatibility_issues,json=compatibilityIssues,proto3" json:"compatibility_issues,omitempty"`
	CompatibilityWarnings   []string `protobuf:"bytes,7,rep,name=compatibility_warnings,json=compatibilityWarnings,proto3" json:"compatibility_warnings,omitempty"`
}

func (x *BgpNeighborCompatibility) Reset() {
	*x = BgpNeighborCompatibility{}
	mi := &file_client_frr_proto_msgTypes[66]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BgpNeighborCompatibility) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpNeighborCompatibility) ProtoMessage() {}

func (x *BgpNeighborCompatibility) ProtoReflect() protoreflect.Message {
	mi := &file_client_frr_proto_msgTypes[66]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpNeighborCompatibility.ProtoReflect.Descriptor instead.
func (*BgpNeighborCompatibility) Descriptor() ([]byte, []int) {
	return file_client_frr_proto_rawDescGZIP(), []int{66}
}

func (x *BgpNeighborCompatibility) GetPeerIp() string {
	if x != nil {
		return x.PeerIp
	}
	return ""
}

func (x *BgpNeighborCompatibility) GetAsCompatible() bool {
	if x != nil {
		return x.AsCompatible
	}
	return false
}

func (x *BgpNeighborCompatibility) GetAddressFamilyCompatible() bool {
	if x != nil {
		return x.AddressFamilyCompatible
	}
	return false
}

func (x *BgpNeighborCompatibility) GetCapabilitiesCompatible() bool {
	if x != nil {
		return x.CapabilitiesCompatible
	}
	return false
}

func (x *BgpNeighborCompatibility) GetTimersCompatible() bool {
	if x != nil {
		return x.TimersCompatible
	}
	return false
}

func (x *BgpNeighborCompatibility) GetCompatibilityIssues() []string {
	if x != nil {
		return x.CompatibilityIssues
	}
	return nil
}

func (x *BgpNeighborCompatibility) GetCompatibilityWarnings() []string {
	if x != nil {
		return x.CompatibilityWarnings
	}
	return nil
}

// BGP AS Numbers Validation
type BgpASNumbersValidation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LocalAs            uint32   `protobuf:"varint,1,opt,name=local_as,json=localAs,proto3" json:"local_as,omitempty"`
	RemoteAs           uint32   `protobuf:"varint,2,opt,name=remote_as,json=remoteAs,proto3" json:"remote_as,omitempty"`
	LocalAsValid       bool     `protobuf:"varint,3,opt,name=local_as_valid,json=localAsValid,proto3" json:"local_as_valid,omitempty"`
	RemoteAsValid      bool     `protobuf:"varint,4,opt,name=remote_as_valid,json=remoteAsValid,proto3" json:"remote_as_valid,omitempty"`
	LocalAsReserved    bool     `protobuf:"varint,5,opt,name=local_as_reserved,json=localAsReserved,proto3" json:"local_as_reserved,omitempty"`
	RemoteAsReserved   bool     `protobuf:"varint,6,opt,name=remote_as_reserved,json=remoteAsReserved,proto3" json:"remote_as_reserved,omitempty"`
	AsPathValid        bool     `protobuf:"varint,7,opt,name=as_path_valid,json=asPathValid,proto3" json:"as_path_valid,omitempty"`
	ValidationMessages []string `protobuf:"bytes,8,rep,name=validation_messages,json=validationMessages,proto3" json:"validation_messages,omitempty"`
}

func (x *BgpASNumbersValidation) Reset() {
	*x = BgpASNumbersValidation{}
	mi := &file_client_frr_proto_msgTypes[67]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BgpASNumbersValidation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpASNumbersValidation) ProtoMessage() {}

func (x *BgpASNumbersValidation) ProtoReflect() protoreflect.Message {
	mi := &file_client_frr_proto_msgTypes[67]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpASNumbersValidation.ProtoReflect.Descriptor instead.
func (*BgpASNumbersValidation) Descriptor() ([]byte, []int) {
	return file_client_frr_proto_rawDescGZIP(), []int{67}
}

func (x *BgpASNumbersValidation) GetLocalAs() uint32 {
	if x != nil {
		return x.LocalAs
	}
	return 0
}

func (x *BgpASNumbersValidation) GetRemoteAs() uint32 {
	if x != nil {
		return x.RemoteAs
	}
	return 0
}

func (x *BgpASNumbersValidation) GetLocalAsValid() bool {
	if x != nil {
		return x.LocalAsValid
	}
	return false
}

func (x *BgpASNumbersValidation) GetRemoteAsValid() bool {
	if x != nil {
		return x.RemoteAsValid
	}
	return false
}

func (x *BgpASNumbersValidation) GetLocalAsReserved() bool {
	if x != nil {
		return x.LocalAsReserved
	}
	return false
}

func (x *BgpASNumbersValidation) GetRemoteAsReserved() bool {
	if x != nil {
		return x.RemoteAsReserved
	}
	return false
}

func (x *BgpASNumbersValidation) GetAsPathValid() bool {
	if x != nil {
		return x.AsPathValid
	}
	return false
}

func (x *BgpASNumbersValidation) GetValidationMessages() []string {
	if x != nil {
		return x.ValidationMessages
	}
	return nil
}

// BGP Policy Configuration Response
type BgpPolicyConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RouteMaps           []*BgpRouteMap      `protobuf:"bytes,1,rep,name=route_maps,json=routeMaps,proto3" json:"route_maps,omitempty"`
	CommunityLists      []*BgpCommunityList `protobuf:"bytes,2,rep,name=community_lists,json=communityLists,proto3" json:"community_lists,omitempty"`
	PrefixLists         []*BgpPrefixList    `protobuf:"bytes,3,rep,name=prefix_lists,json=prefixLists,proto3" json:"prefix_lists,omitempty"`
	TotalRouteMaps      uint32              `protobuf:"varint,4,opt,name=total_route_maps,json=totalRouteMaps,proto3" json:"total_route_maps,omitempty"`
	TotalCommunityLists uint32              `protobuf:"varint,5,opt,name=total_community_lists,json=totalCommunityLists,proto3" json:"total_community_lists,omitempty"`
	TotalPrefixLists    uint32              `protobuf:"varint,6,opt,name=total_prefix_lists,json=totalPrefixLists,proto3" json:"total_prefix_lists,omitempty"`
	PolicyStatistics    map[string]string   `protobuf:"bytes,7,rep,name=policy_statistics,json=policyStatistics,proto3" json:"policy_statistics,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *BgpPolicyConfig) Reset() {
	*x = BgpPolicyConfig{}
	mi := &file_client_frr_proto_msgTypes[68]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BgpPolicyConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpPolicyConfig) ProtoMessage() {}

func (x *BgpPolicyConfig) ProtoReflect() protoreflect.Message {
	mi := &file_client_frr_proto_msgTypes[68]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpPolicyConfig.ProtoReflect.Descriptor instead.
func (*BgpPolicyConfig) Descriptor() ([]byte, []int) {
	return file_client_frr_proto_rawDescGZIP(), []int{68}
}

func (x *BgpPolicyConfig) GetRouteMaps() []*BgpRouteMap {
	if x != nil {
		return x.RouteMaps
	}
	return nil
}

func (x *BgpPolicyConfig) GetCommunityLists() []*BgpCommunityList {
	if x != nil {
		return x.CommunityLists
	}
	return nil
}

func (x *BgpPolicyConfig) GetPrefixLists() []*BgpPrefixList {
	if x != nil {
		return x.PrefixLists
	}
	return nil
}

func (x *BgpPolicyConfig) GetTotalRouteMaps() uint32 {
	if x != nil {
		return x.TotalRouteMaps
	}
	return 0
}

func (x *BgpPolicyConfig) GetTotalCommunityLists() uint32 {
	if x != nil {
		return x.TotalCommunityLists
	}
	return 0
}

func (x *BgpPolicyConfig) GetTotalPrefixLists() uint32 {
	if x != nil {
		return x.TotalPrefixLists
	}
	return 0
}

func (x *BgpPolicyConfig) GetPolicyStatistics() map[string]string {
	if x != nil {
		return x.PolicyStatistics
	}
	return nil
}

var File_client_frr_proto protoreflect.FileDescriptor

var file_client_frr_proto_rawDesc = []byte{
	0x0a, 0x10, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2f, 0x66, 0x72, 0x72, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x06, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x22, 0xd0, 0x05, 0x0a, 0x09, 0x42,
	0x67, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x2b, 0x0a, 0x11, 0x61, 0x75, 0x74, 0x6f,
	0x6e, 0x6f, 0x6d, 0x6f, 0x75, 0x73, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x10, 0x61, 0x75, 0x74, 0x6f, 0x6e, 0x6f, 0x6d, 0x6f, 0x75, 0x73, 0x53,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x31, 0x0a, 0x09, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x42,
	0x67, 0x70, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x52, 0x09, 0x6e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x6b, 0x65, 0x65, 0x70, 0x61, 0x6c, 0x69,
	0x76, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x6b,
	0x65, 0x65, 0x70, 0x61, 0x6c, 0x69, 0x76, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09,
	0x68, 0x6f, 0x6c, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x08, 0x68, 0x6f, 0x6c, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x16, 0x72, 0x65, 0x64,
	0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x72, 0x65, 0x64, 0x69, 0x73,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64,
	0x12, 0x2f, 0x0a, 0x13, 0x72, 0x65, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x72,
	0x65, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69,
	0x63, 0x12, 0x32, 0x0a, 0x0a, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x70, 0x73, 0x18,
	0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x42,
	0x67, 0x70, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x4d, 0x61, 0x70, 0x52, 0x09, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x4d, 0x61, 0x70, 0x73, 0x12, 0x41, 0x0a, 0x0f, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69,
	0x74, 0x79, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x42, 0x67, 0x70, 0x43, 0x6f, 0x6d, 0x6d, 0x75,
	0x6e, 0x69, 0x74, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x0e, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e,
	0x69, 0x74, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x73, 0x12, 0x38, 0x0a, 0x0c, 0x70, 0x72, 0x65, 0x66,
	0x69, 0x78, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x42, 0x67, 0x70, 0x50, 0x72, 0x65, 0x66, 0x69,
	0x78, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x0b, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x69, 0x73,
	0x74, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x70, 0x61,
	0x74, 0x68, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x6d, 0x61, 0x78, 0x69, 0x6d,
	0x75, 0x6d, 0x50, 0x61, 0x74, 0x68, 0x73, 0x12, 0x37, 0x0a, 0x17, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x69,
	0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x76, 0x65, 0x44, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x12, 0x2b, 0x0a, 0x11, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x5f, 0x6d, 0x65, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x64, 0x65, 0x74,
	0x65, 0x72, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x69, 0x63, 0x4d, 0x65, 0x64, 0x12, 0x2c, 0x0a,
	0x12, 0x61, 0x6c, 0x77, 0x61, 0x79, 0x73, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x5f,
	0x6d, 0x65, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x61, 0x6c, 0x77, 0x61, 0x79,
	0x73, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x4d, 0x65, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x6c,
	0x6f, 0x67, 0x5f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x5f, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x6c, 0x6f, 0x67, 0x4e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x22, 0xf1, 0x06,
	0x0a, 0x0b, 0x42, 0x67, 0x70, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x12, 0x17, 0x0a,
	0x07, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x69, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x70, 0x65, 0x65, 0x72, 0x49, 0x70, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65,
	0x5f, 0x61, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x72, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x41, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x12, 0x31, 0x0a, 0x06, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x42, 0x67, 0x70, 0x4e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x73, 0x52, 0x06, 0x74, 0x69,
	0x6d, 0x65, 0x72, 0x73, 0x12, 0x3b, 0x0a, 0x0a, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x6d, 0x61,
	0x70, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x2e, 0x42, 0x67, 0x70, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x52, 0x6f, 0x75,
	0x74, 0x65, 0x4d, 0x61, 0x70, 0x73, 0x52, 0x09, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x4d, 0x61, 0x70,
	0x73, 0x12, 0x41, 0x0a, 0x0c, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x2e, 0x42, 0x67, 0x70, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x50, 0x72, 0x65, 0x66,
	0x69, 0x78, 0x4c, 0x69, 0x73, 0x74, 0x73, 0x52, 0x0b, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c,
	0x69, 0x73, 0x74, 0x73, 0x12, 0x22, 0x0a, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x68, 0x6f, 0x70,
	0x5f, 0x73, 0x65, 0x6c, 0x66, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x6e, 0x65, 0x78,
	0x74, 0x48, 0x6f, 0x70, 0x53, 0x65, 0x6c, 0x66, 0x12, 0x34, 0x0a, 0x16, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x5f, 0x72, 0x65, 0x66, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x52,
	0x65, 0x66, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x25,
	0x0a, 0x0e, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x73, 0x65, 0x6e, 0x64, 0x43, 0x6f, 0x6d, 0x6d,
	0x75, 0x6e, 0x69, 0x74, 0x79, 0x12, 0x40, 0x0a, 0x1c, 0x73, 0x6f, 0x66, 0x74, 0x5f, 0x72, 0x65,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e,
	0x62, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1a, 0x73, 0x6f, 0x66,
	0x74, 0x52, 0x65, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x68, 0x75, 0x74, 0x64,
	0x6f, 0x77, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x73, 0x68, 0x75, 0x74, 0x64,
	0x6f, 0x77, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61,
	0x6c, 0x5f, 0x61, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6c, 0x6f, 0x63, 0x61,
	0x6c, 0x41, 0x73, 0x12, 0x2d, 0x0a, 0x13, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x61, 0x73, 0x5f,
	0x6e, 0x6f, 0x5f, 0x70, 0x72, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x10, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x41, 0x73, 0x4e, 0x6f, 0x50, 0x72, 0x65, 0x70, 0x65,
	0x6e, 0x64, 0x12, 0x2d, 0x0a, 0x13, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x61, 0x73, 0x5f, 0x72,
	0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x5f, 0x61, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x10, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x41, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x41,
	0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x61, 0x73, 0x5f, 0x69, 0x6e, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x61, 0x73, 0x49, 0x6e,
	0x12, 0x16, 0x0a, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x62, 0x67, 0x70,
	0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x68, 0x6f, 0x70, 0x18, 0x13, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0c, 0x65, 0x62, 0x67, 0x70, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x68, 0x6f, 0x70, 0x12, 0x2a, 0x0a,
	0x11, 0x65, 0x62, 0x67, 0x70, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x68, 0x6f, 0x70, 0x5f, 0x74,
	0x74, 0x6c, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x65, 0x62, 0x67, 0x70, 0x4d, 0x75,
	0x6c, 0x74, 0x69, 0x68, 0x6f, 0x70, 0x54, 0x74, 0x6c, 0x12, 0x36, 0x0a, 0x17, 0x64, 0x69, 0x73,
	0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x63,
	0x68, 0x65, 0x63, 0x6b, 0x18, 0x15, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x64, 0x69, 0x73, 0x61,
	0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x22, 0x72, 0x0a, 0x11, 0x42, 0x67, 0x70, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x54, 0x69, 0x6d, 0x65, 0x72, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x6b, 0x65, 0x65, 0x70, 0x61, 0x6c,
	0x69, 0x76, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x6b, 0x65, 0x65, 0x70, 0x61,
	0x6c, 0x69, 0x76, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x6f, 0x6c, 0x64, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x68, 0x6f, 0x6c, 0x64, 0x74, 0x69, 0x6d, 0x65,
	0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x5f, 0x72, 0x65, 0x74, 0x72,
	0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x52, 0x65, 0x74, 0x72, 0x79, 0x22, 0x5c, 0x0a, 0x14, 0x42, 0x67, 0x70, 0x4e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x4d, 0x61, 0x70, 0x73, 0x12, 0x20, 0x0a,
	0x0c, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x70, 0x5f, 0x69, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x4d, 0x61, 0x70, 0x49, 0x6e, 0x12,
	0x22, 0x0a, 0x0d, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x70, 0x5f, 0x6f, 0x75, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x4d, 0x61, 0x70,
	0x4f, 0x75, 0x74, 0x22, 0x66, 0x0a, 0x16, 0x42, 0x67, 0x70, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x69, 0x73, 0x74, 0x73, 0x12, 0x24, 0x0a,
	0x0e, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x69, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x69, 0x73,
	0x74, 0x49, 0x6e, 0x12, 0x26, 0x0a, 0x0f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x5f, 0x6f, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x75, 0x74, 0x22, 0x90, 0x02, 0x0a, 0x0b,
	0x42, 0x67, 0x70, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x4d, 0x61, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x2e, 0x42, 0x67, 0x70, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x4d, 0x61, 0x70,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x43,
	0x0a, 0x10, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x2e, 0x42, 0x67, 0x70, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x4d, 0x61, 0x70, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x52, 0x0f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x37, 0x0a, 0x0b, 0x73, 0x65, 0x74, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x2e, 0x42, 0x67, 0x70, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x4d, 0x61, 0x70, 0x53, 0x65, 0x74,
	0x52, 0x0a, 0x73, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x20, 0x0a, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x73,
	0x0a, 0x10, 0x42, 0x67, 0x70, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x4d, 0x61, 0x70, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x78, 0x61, 0x63, 0x74, 0x5f, 0x6d, 0x61, 0x74, 0x63,
	0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x65, 0x78, 0x61, 0x63, 0x74, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x22, 0x64, 0x0a, 0x0e, 0x42, 0x67, 0x70, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x4d,
	0x61, 0x70, 0x53, 0x65, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x65, 0x74, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x1b, 0x0a, 0x09, 0x73, 0x65, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x76, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x08, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x76, 0x65, 0x22, 0xa0, 0x01, 0x0a, 0x10, 0x42, 0x67,
	0x70, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x31,
	0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19,
	0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x42, 0x67, 0x70, 0x52, 0x6f, 0x75, 0x74, 0x65,
	0x4d, 0x61, 0x70, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6f, 0x6d,
	0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0xaa, 0x01, 0x0a,
	0x0d, 0x42, 0x67, 0x70, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x31,
	0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19,
	0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x42, 0x67, 0x70, 0x52, 0x6f, 0x75, 0x74, 0x65,
	0x4d, 0x61, 0x70, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x0e, 0x0a, 0x02, 0x6c, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x6c, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x67, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x67, 0x65, 0x22, 0xaf, 0x01, 0x0a, 0x0e, 0x53, 0x68,
	0x6f, 0x77, 0x42, 0x67, 0x70, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x43, 0x0a, 0x09,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x25, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x68, 0x6f, 0x77, 0x42, 0x67, 0x70,
	0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x73, 0x1a, 0x58, 0x0a, 0x0e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x30, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x42, 0x67,
	0x70, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xf9, 0x02, 0x0a, 0x12,
	0x42, 0x67, 0x70, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x0e, 0x0a, 0x02, 0x61, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x61, 0x73, 0x12,
	0x23, 0x0a, 0x0d, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x69, 0x62, 0x5f, 0x65, 0x6e, 0x74, 0x72,
	0x69, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x72, 0x69, 0x62, 0x45, 0x6e,
	0x74, 0x72, 0x69, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x69, 0x62, 0x5f, 0x6d, 0x65, 0x6d,
	0x6f, 0x72, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x72, 0x69, 0x62, 0x4d, 0x65,
	0x6d, 0x6f, 0x72, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x70, 0x65, 0x65, 0x72, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x6d, 0x65, 0x6d, 0x6f,
	0x72, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x70, 0x65, 0x65, 0x72, 0x4d, 0x65,
	0x6d, 0x6f, 0x72, 0x79, 0x12, 0x3b, 0x0a, 0x05, 0x70, 0x65, 0x65, 0x72, 0x73, 0x18, 0x08, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x42, 0x67, 0x70,
	0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e,
	0x50, 0x65, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x70, 0x65, 0x65, 0x72,
	0x73, 0x1a, 0x54, 0x0a, 0x0a, 0x50, 0x65, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x30, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x42, 0x67, 0x70, 0x50, 0x65, 0x65,
	0x72, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xe8, 0x01, 0x0a, 0x12, 0x42, 0x67, 0x70, 0x50,
	0x65, 0x65, 0x72, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1b,
	0x0a, 0x09, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x61, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x08, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x41, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x6c,
	0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x61, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6c,
	0x6f, 0x63, 0x61, 0x6c, 0x41, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x75, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x75, 0x70,
	0x74, 0x69, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x72,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x70,
	0x72, 0x65, 0x66, 0x69, 0x78, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x12, 0x1f, 0x0a,
	0x0b, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x73, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0a, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x53, 0x65, 0x6e, 0x74, 0x12, 0x22,
	0x0a, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x70, 0x66, 0x78, 0x5f, 0x72, 0x63, 0x64, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x65, 0x50, 0x66, 0x78, 0x52,
	0x63, 0x64, 0x22, 0xb0, 0x01, 0x0a, 0x10, 0x53, 0x68, 0x6f, 0x77, 0x42, 0x67, 0x70, 0x4e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x12, 0x45, 0x0a, 0x09, 0x6e, 0x65, 0x69, 0x67, 0x68,
	0x62, 0x6f, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x2e, 0x53, 0x68, 0x6f, 0x77, 0x42, 0x67, 0x70, 0x4e, 0x65, 0x69, 0x67, 0x68,
	0x62, 0x6f, 0x72, 0x73, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x09, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x1a, 0x55,
	0x0a, 0x0e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x2d, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x42, 0x67, 0x70, 0x4e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xd0, 0x12, 0x0a, 0x0f, 0x42, 0x67, 0x70, 0x4e, 0x65, 0x69,
	0x67, 0x68, 0x62, 0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x6d,
	0x6f, 0x74, 0x65, 0x5f, 0x61, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x72, 0x65,
	0x6d, 0x6f, 0x74, 0x65, 0x41, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f,
	0x61, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x41,
	0x73, 0x12, 0x3b, 0x0a, 0x1b, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x61, 0x73, 0x5f, 0x72, 0x65,
	0x70, 0x6c, 0x61, 0x63, 0x65, 0x5f, 0x61, 0x73, 0x5f, 0x64, 0x75, 0x61, 0x6c, 0x5f, 0x61, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x41, 0x73, 0x52,
	0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x41, 0x73, 0x44, 0x75, 0x61, 0x6c, 0x41, 0x73, 0x12, 0x2a,
	0x0a, 0x11, 0x6e, 0x62, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x6c,
	0x69, 0x6e, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x6e, 0x62, 0x72, 0x45, 0x78,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x6f,
	0x63, 0x61, 0x6c, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x6d,
	0x6f, 0x74, 0x65, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6e, 0x62,
	0x72, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6e, 0x62,
	0x72, 0x44, 0x65, 0x73, 0x63, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x67, 0x70, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x62, 0x67, 0x70, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x10, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x65,
	0x6d, 0x6f, 0x74, 0x65, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f,
	0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x52, 0x6f, 0x75, 0x74,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x67, 0x70, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x67, 0x70, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x2d, 0x0a, 0x13, 0x62, 0x67, 0x70, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x5f, 0x6c,
	0x61, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10,
	0x62, 0x67, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x4c, 0x61, 0x73, 0x74, 0x52, 0x65, 0x61, 0x64,
	0x12, 0x2f, 0x0a, 0x14, 0x62, 0x67, 0x70, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x5f, 0x6c, 0x61,
	0x73, 0x74, 0x5f, 0x77, 0x72, 0x69, 0x74, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11,
	0x62, 0x67, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x4c, 0x61, 0x73, 0x74, 0x57, 0x72, 0x69, 0x74,
	0x65, 0x12, 0x45, 0x0a, 0x20, 0x62, 0x67, 0x70, 0x5f, 0x69, 0x6e, 0x5f, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x5f, 0x65, 0x6c, 0x61, 0x70, 0x73, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f,
	0x6d, 0x73, 0x65, 0x63, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x04, 0x52, 0x1b, 0x62, 0x67, 0x70,
	0x49, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x6c, 0x61, 0x70, 0x73, 0x65, 0x64, 0x54,
	0x69, 0x6d, 0x65, 0x4d, 0x73, 0x65, 0x63, 0x73, 0x12, 0x4d, 0x0a, 0x24, 0x62, 0x67, 0x70, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x64,
	0x5f, 0x68, 0x6f, 0x6c, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6d, 0x73, 0x65, 0x63, 0x73,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x04, 0x52, 0x1f, 0x62, 0x67, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x72,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x64, 0x48, 0x6f, 0x6c, 0x64, 0x54, 0x69,
	0x6d, 0x65, 0x4d, 0x73, 0x65, 0x63, 0x73, 0x12, 0x60, 0x0a, 0x2e, 0x62, 0x67, 0x70, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x64, 0x5f,
	0x6b, 0x65, 0x65, 0x70, 0x5f, 0x61, 0x6c, 0x69, 0x76, 0x65, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x76, 0x61, 0x6c, 0x5f, 0x6d, 0x73, 0x65, 0x63, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x28, 0x62, 0x67, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75,
	0x72, 0x65, 0x64, 0x4b, 0x65, 0x65, 0x70, 0x41, 0x6c, 0x69, 0x76, 0x65, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x4d, 0x73, 0x65, 0x63, 0x73, 0x12, 0x38, 0x0a, 0x19, 0x62, 0x67, 0x70,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x5f, 0x68, 0x6f, 0x6c, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x5f, 0x6d, 0x73, 0x65, 0x63, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x04, 0x52, 0x15, 0x62, 0x67,
	0x70, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x48, 0x6f, 0x6c, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x73,
	0x65, 0x63, 0x73, 0x12, 0x4b, 0x0a, 0x23, 0x62, 0x67, 0x70, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x72,
	0x5f, 0x6b, 0x65, 0x65, 0x70, 0x5f, 0x61, 0x6c, 0x69, 0x76, 0x65, 0x5f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x5f, 0x6d, 0x73, 0x65, 0x63, 0x73, 0x18, 0x13, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x1e, 0x62, 0x67, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x4b, 0x65, 0x65, 0x70, 0x41, 0x6c,
	0x69, 0x76, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x4d, 0x73, 0x65, 0x63, 0x73,
	0x12, 0x33, 0x0a, 0x16, 0x62, 0x67, 0x70, 0x5f, 0x74, 0x63, 0x70, 0x5f, 0x6d, 0x73, 0x73, 0x5f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x13, 0x62, 0x67, 0x70, 0x54, 0x63, 0x70, 0x4d, 0x73, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x65, 0x64, 0x12, 0x2b, 0x0a, 0x12, 0x62, 0x67, 0x70, 0x5f, 0x74, 0x63, 0x70,
	0x5f, 0x6d, 0x73, 0x73, 0x5f, 0x73, 0x79, 0x6e, 0x63, 0x65, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0f, 0x62, 0x67, 0x70, 0x54, 0x63, 0x70, 0x4d, 0x73, 0x73, 0x53, 0x79, 0x6e, 0x63,
	0x65, 0x64, 0x12, 0x4d, 0x0a, 0x23, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x5f, 0x6f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x73, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x16, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x20, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x4c, 0x65, 0x6e, 0x67, 0x74,
	0x68, 0x12, 0x6b, 0x0a, 0x33, 0x62, 0x67, 0x70, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x5f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x5f, 0x73, 0x65, 0x63, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x2e,
	0x62, 0x67, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72,
	0x65, 0x64, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x41, 0x64, 0x76,
	0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x53, 0x65, 0x63, 0x12, 0x52,
	0x0a, 0x15, 0x67, 0x72, 0x61, 0x63, 0x65, 0x66, 0x75, 0x6c, 0x5f, 0x72, 0x65, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x42, 0x67, 0x70, 0x47, 0x72, 0x61, 0x63, 0x65, 0x66,
	0x75, 0x6c, 0x52, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x13, 0x67,
	0x72, 0x61, 0x63, 0x65, 0x66, 0x75, 0x6c, 0x52, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x3c, 0x0a, 0x0d, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x73, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x2e, 0x42, 0x67, 0x70, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x73, 0x52, 0x0c, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73,
	0x12, 0x39, 0x0a, 0x0c, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73,
	0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e,
	0x42, 0x67, 0x70, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x0b,
	0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x53, 0x0a, 0x27, 0x6d,
	0x69, 0x6e, 0x5f, 0x62, 0x74, 0x77, 0x6e, 0x5f, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x75, 0x6e, 0x73, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x72,
	0x5f, 0x6d, 0x73, 0x65, 0x63, 0x73, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x22, 0x6d, 0x69,
	0x6e, 0x42, 0x74, 0x77, 0x6e, 0x41, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x75, 0x6e, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x4d, 0x73, 0x65, 0x63, 0x73,
	0x12, 0x4c, 0x0a, 0x13, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x66, 0x61, 0x6d, 0x69,
	0x6c, 0x79, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x42, 0x67, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x11, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x37,
	0x0a, 0x17, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x65, 0x73,
	0x74, 0x61, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x16, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x73, 0x74, 0x61,
	0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x12, 0x2f, 0x0a, 0x13, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x64, 0x72, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x18, 0x1e,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x44, 0x72, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x12, 0x33, 0x0a, 0x16, 0x6c, 0x61, 0x73, 0x74,
	0x5f, 0x72, 0x65, 0x73, 0x65, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x5f, 0x6d, 0x73, 0x65,
	0x63, 0x73, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x04, 0x52, 0x13, 0x6c, 0x61, 0x73, 0x74, 0x52, 0x65,
	0x73, 0x65, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x4d, 0x73, 0x65, 0x63, 0x73, 0x12, 0x29, 0x0a,
	0x11, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x74, 0x5f, 0x64, 0x75, 0x65, 0x5f,
	0x74, 0x6f, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x52, 0x65,
	0x73, 0x65, 0x74, 0x44, 0x75, 0x65, 0x54, 0x6f, 0x12, 0x26, 0x0a, 0x0f, 0x6c, 0x61, 0x73, 0x74,
	0x5f, 0x72, 0x65, 0x73, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x21, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x52, 0x65, 0x73, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x29, 0x0a, 0x10, 0x73, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x22, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x6f, 0x66, 0x74,
	0x77, 0x61, 0x72, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x41, 0x0a, 0x1e, 0x65,
	0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x62, 0x67, 0x70, 0x5f, 0x6e, 0x62, 0x72, 0x5f,
	0x6d, 0x61, 0x78, 0x5f, 0x68, 0x6f, 0x70, 0x73, 0x5f, 0x61, 0x77, 0x61, 0x79, 0x18, 0x23, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x19, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x42, 0x67, 0x70,
	0x4e, 0x62, 0x72, 0x4d, 0x61, 0x78, 0x48, 0x6f, 0x70, 0x73, 0x41, 0x77, 0x61, 0x79, 0x12, 0x1d,
	0x0a, 0x0a, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x18, 0x24, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x68, 0x6f, 0x73, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x12, 0x1d, 0x0a,
	0x0a, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x18, 0x25, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x09, 0x70, 0x6f, 0x72, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x12, 0x21, 0x0a, 0x0c,
	0x68, 0x6f, 0x73, 0x74, 0x5f, 0x66, 0x6f, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x18, 0x26, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x6f, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x12,
	0x21, 0x0a, 0x0c, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x66, 0x6f, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x18,
	0x27, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x70, 0x6f, 0x72, 0x74, 0x46, 0x6f, 0x72, 0x65, 0x69,
	0x67, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x6e, 0x65, 0x78, 0x74, 0x68, 0x6f, 0x70, 0x18, 0x28, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6e, 0x65, 0x78, 0x74, 0x68, 0x6f, 0x70, 0x12, 0x25, 0x0a, 0x0e,
	0x6e, 0x65, 0x78, 0x74, 0x68, 0x6f, 0x70, 0x5f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x18, 0x29,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x68, 0x6f, 0x70, 0x47, 0x6c, 0x6f,
	0x62, 0x61, 0x6c, 0x12, 0x23, 0x0a, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x68, 0x6f, 0x70, 0x5f, 0x6c,
	0x6f, 0x63, 0x61, 0x6c, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6e, 0x65, 0x78, 0x74,
	0x68, 0x6f, 0x70, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x12, 0x25, 0x0a, 0x0e, 0x62, 0x67, 0x70, 0x5f,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x62, 0x67, 0x70, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x2e, 0x0a, 0x13, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x5f, 0x72, 0x65, 0x74, 0x72, 0x79,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x52, 0x65, 0x74, 0x72, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x12,
	0x43, 0x0a, 0x1f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x72, 0x5f, 0x64, 0x75, 0x65, 0x5f, 0x69, 0x6e, 0x5f, 0x6d, 0x73, 0x65,
	0x63, 0x73, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x04, 0x52, 0x1a, 0x6e, 0x65, 0x78, 0x74, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x44, 0x75, 0x65, 0x49, 0x6e, 0x4d,
	0x73, 0x65, 0x63, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x74, 0x68, 0x72,
	0x65, 0x61, 0x64, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x61, 0x64, 0x54,
	0x68, 0x72, 0x65, 0x61, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x74,
	0x68, 0x72, 0x65, 0x61, 0x64, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x77, 0x72, 0x69,
	0x74, 0x65, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x22, 0xfa, 0x03, 0x0a, 0x16, 0x42, 0x67, 0x70,
	0x47, 0x72, 0x61, 0x63, 0x65, 0x66, 0x75, 0x6c, 0x52, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x57, 0x0a, 0x0f, 0x65, 0x6e, 0x64, 0x5f, 0x6f, 0x66, 0x5f, 0x72, 0x69,
	0x62, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x42, 0x67, 0x70, 0x47, 0x72, 0x61, 0x63, 0x65, 0x66, 0x75,
	0x6c, 0x52, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x45, 0x6e, 0x64,
	0x4f, 0x66, 0x52, 0x69, 0x62, 0x53, 0x65, 0x6e, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c,
	0x65, 0x6e, 0x64, 0x4f, 0x66, 0x52, 0x69, 0x62, 0x53, 0x65, 0x6e, 0x64, 0x12, 0x57, 0x0a, 0x0f,
	0x65, 0x6e, 0x64, 0x5f, 0x6f, 0x66, 0x5f, 0x72, 0x69, 0x62, 0x5f, 0x72, 0x65, 0x63, 0x76, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x42,
	0x67, 0x70, 0x47, 0x72, 0x61, 0x63, 0x65, 0x66, 0x75, 0x6c, 0x52, 0x65, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x45, 0x6e, 0x64, 0x4f, 0x66, 0x52, 0x69, 0x62, 0x52, 0x65,
	0x63, 0x76, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x65, 0x6e, 0x64, 0x4f, 0x66, 0x52, 0x69,
	0x62, 0x52, 0x65, 0x63, 0x76, 0x12, 0x22, 0x0a, 0x0d, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x67,
	0x72, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6c, 0x6f,
	0x63, 0x61, 0x6c, 0x47, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x72, 0x65, 0x6d,
	0x6f, 0x74, 0x65, 0x5f, 0x67, 0x72, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x47, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x12,
	0x13, 0x0a, 0x05, 0x72, 0x5f, 0x62, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04,
	0x72, 0x42, 0x69, 0x74, 0x12, 0x13, 0x0a, 0x05, 0x6e, 0x5f, 0x62, 0x69, 0x74, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x04, 0x6e, 0x42, 0x69, 0x74, 0x12, 0x38, 0x0a, 0x06, 0x74, 0x69, 0x6d,
	0x65, 0x72, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x2e, 0x42, 0x67, 0x70, 0x47, 0x72, 0x61, 0x63, 0x65, 0x66, 0x75, 0x6c, 0x52, 0x65,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x73, 0x52, 0x06, 0x74, 0x69, 0x6d,
	0x65, 0x72, 0x73, 0x1a, 0x3f, 0x0a, 0x11, 0x45, 0x6e, 0x64, 0x4f, 0x66, 0x52, 0x69, 0x62, 0x53,
	0x65, 0x6e, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3f, 0x0a, 0x11, 0x45, 0x6e, 0x64, 0x4f, 0x66, 0x52, 0x69, 0x62,
	0x52, 0x65, 0x63, 0x76, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xc7, 0x01, 0x0a, 0x18, 0x42, 0x67, 0x70, 0x47, 0x72, 0x61,
	0x63, 0x65, 0x66, 0x75, 0x6c, 0x52, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x72, 0x73, 0x12, 0x38, 0x0a, 0x18, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x64,
	0x5f, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x16, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x64,
	0x52, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x12, 0x3b, 0x0a, 0x1a,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x64, 0x5f, 0x6c, 0x6c, 0x67, 0x72, 0x5f,
	0x73, 0x74, 0x61, 0x6c, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x17, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x64, 0x4c, 0x6c, 0x67, 0x72,
	0x53, 0x74, 0x61, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x16, 0x72, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x72, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x64, 0x52, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x22,
	0xed, 0x04, 0x0a, 0x0f, 0x42, 0x67, 0x70, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65, 0x70, 0x74, 0x68, 0x5f, 0x69, 0x6e, 0x71,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x64, 0x65, 0x70, 0x74, 0x68, 0x49, 0x6e, 0x71,
	0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x65, 0x70, 0x74, 0x68, 0x5f, 0x6f, 0x75, 0x74, 0x71, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x64, 0x65, 0x70, 0x74, 0x68, 0x4f, 0x75, 0x74, 0x71, 0x12,
	0x1d, 0x0a, 0x0a, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x5f, 0x73, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x53, 0x65, 0x6e, 0x74, 0x12, 0x1d,
	0x0a, 0x0a, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x5f, 0x72, 0x65, 0x63, 0x76, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x52, 0x65, 0x63, 0x76, 0x12, 0x2d, 0x0a,
	0x12, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x73,
	0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x6e, 0x6f, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53, 0x65, 0x6e, 0x74, 0x12, 0x2d, 0x0a, 0x12,
	0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x72, 0x65,
	0x63, 0x76, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x63, 0x76, 0x12, 0x21, 0x0a, 0x0c, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x53, 0x65, 0x6e, 0x74, 0x12, 0x21,
	0x0a, 0x0c, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x63, 0x76, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x52, 0x65, 0x63,
	0x76, 0x12, 0x27, 0x0a, 0x0f, 0x6b, 0x65, 0x65, 0x70, 0x61, 0x6c, 0x69, 0x76, 0x65, 0x73, 0x5f,
	0x73, 0x65, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x6b, 0x65, 0x65, 0x70,
	0x61, 0x6c, 0x69, 0x76, 0x65, 0x73, 0x53, 0x65, 0x6e, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x6b, 0x65,
	0x65, 0x70, 0x61, 0x6c, 0x69, 0x76, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x63, 0x76, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0e, 0x6b, 0x65, 0x65, 0x70, 0x61, 0x6c, 0x69, 0x76, 0x65, 0x73, 0x52,
	0x65, 0x63, 0x76, 0x12, 0x2c, 0x0a, 0x12, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x66,
	0x72, 0x65, 0x73, 0x68, 0x5f, 0x73, 0x65, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x10, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x53, 0x65, 0x6e,
	0x74, 0x12, 0x2c, 0x0a, 0x12, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x72, 0x65,
	0x73, 0x68, 0x5f, 0x72, 0x65, 0x63, 0x76, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x52, 0x65, 0x63, 0x76, 0x12,
	0x27, 0x0a, 0x0f, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x65,
	0x6e, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x53, 0x65, 0x6e, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x61, 0x70, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x72, 0x65, 0x63, 0x76, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0e, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x65, 0x63,
	0x76, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x6e, 0x74, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x65, 0x6e, 0x74,
	0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x63, 0x76, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x63, 0x76, 0x22,
	0xa3, 0x02, 0x0a, 0x0e, 0x42, 0x67, 0x70, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x53, 0x74, 0x61,
	0x74, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x69, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x69, 0x6e,
	0x62, 0x6f, 0x75, 0x6e, 0x64, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x65, 0x64, 0x12, 0x1f, 0x0a,
	0x0b, 0x61, 0x73, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x6c, 0x6f, 0x6f, 0x70, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0a, 0x61, 0x73, 0x70, 0x61, 0x74, 0x68, 0x4c, 0x6f, 0x6f, 0x70, 0x12, 0x27,
	0x0a, 0x0f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x6c, 0x6f, 0x6f,
	0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61,
	0x74, 0x6f, 0x72, 0x4c, 0x6f, 0x6f, 0x70, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x5f, 0x6c, 0x6f, 0x6f, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4c, 0x6f, 0x6f, 0x70, 0x12, 0x28, 0x0a, 0x10, 0x69, 0x6e,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x68, 0x6f, 0x70, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x4e, 0x65, 0x78,
	0x74, 0x48, 0x6f, 0x70, 0x12, 0x1c, 0x0a, 0x09, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77,
	0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61,
	0x77, 0x6e, 0x12, 0x31, 0x0a, 0x14, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73,
	0x5f, 0x64, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x13, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x44, 0x69, 0x73, 0x63,
	0x61, 0x72, 0x64, 0x65, 0x64, 0x22, 0x55, 0x0a, 0x14, 0x42, 0x67, 0x70, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3d, 0x0a,
	0x0c, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x42, 0x67, 0x70,
	0x49, 0x70, 0x76, 0x34, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x0b, 0x69, 0x70, 0x76, 0x34, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x22, 0xb9, 0x02, 0x0a,
	0x12, 0x42, 0x67, 0x70, 0x49, 0x70, 0x76, 0x34, 0x55, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x32, 0x0a, 0x16, 0x63, 0x6f, 0x6d, 0x6d, 0x5f, 0x61, 0x74, 0x74, 0x72,
	0x69, 0x5f, 0x73, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x6f, 0x5f, 0x6e, 0x62, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x12, 0x63, 0x6f, 0x6d, 0x6d, 0x41, 0x74, 0x74, 0x72, 0x69, 0x53, 0x65,
	0x6e, 0x74, 0x54, 0x6f, 0x4e, 0x62, 0x72, 0x12, 0x3f, 0x0a, 0x1c, 0x69, 0x6e, 0x62, 0x6f, 0x75,
	0x6e, 0x64, 0x5f, 0x65, 0x62, 0x67, 0x70, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x73,
	0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x19, 0x69,
	0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x45, 0x62, 0x67, 0x70, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72,
	0x65, 0x73, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x41, 0x0a, 0x1d, 0x6f, 0x75, 0x74, 0x62,
	0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x65, 0x62, 0x67, 0x70, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72,
	0x65, 0x73, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x1a, 0x6f, 0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x45, 0x62, 0x67, 0x70, 0x52, 0x65, 0x71,
	0x75, 0x69, 0x72, 0x65, 0x73, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x36, 0x0a, 0x17, 0x61,
	0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x61, 0x63,
	0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x65, 0x72, 0x12, 0x33, 0x0a, 0x16, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x61, 0x6c,
	0x77, 0x61, 0x79, 0x73, 0x5f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x68, 0x6f, 0x70, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x13, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x41, 0x6c, 0x77, 0x61, 0x79,
	0x73, 0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x22, 0x9b, 0x01, 0x0a, 0x0d, 0x53, 0x68, 0x6f,
	0x77, 0x42, 0x67, 0x70, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x12, 0x39, 0x0a, 0x06, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x2e, 0x53, 0x68, 0x6f, 0x77, 0x42, 0x67, 0x70, 0x52, 0x6f, 0x75, 0x74, 0x65,
	0x73, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x73, 0x1a, 0x4f, 0x0a, 0x0b, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2a, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x42,
	0x67, 0x70, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x35, 0x0a, 0x0c, 0x42, 0x67, 0x70, 0x52, 0x6f, 0x75,
	0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x25, 0x0a, 0x05, 0x70, 0x61, 0x74, 0x68, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x42,
	0x67, 0x70, 0x50, 0x61, 0x74, 0x68, 0x52, 0x05, 0x70, 0x61, 0x74, 0x68, 0x73, 0x22, 0x87, 0x02,
	0x0a, 0x07, 0x42, 0x67, 0x70, 0x50, 0x61, 0x74, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x62, 0x65, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x62,
	0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x6e, 0x65, 0x78, 0x74, 0x68, 0x6f, 0x70, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6e, 0x65, 0x78, 0x74, 0x68, 0x6f, 0x70, 0x12, 0x16, 0x0a,
	0x06, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x70,
	0x72, 0x65, 0x66, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x6c, 0x6f, 0x63, 0x61, 0x6c,
	0x50, 0x72, 0x65, 0x66, 0x12, 0x16, 0x0a, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x17, 0x0a, 0x07,
	0x61, 0x73, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61,
	0x73, 0x50, 0x61, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x12, 0x1f, 0x0a,
	0x0b, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x17,
	0x0a, 0x07, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x70, 0x65, 0x65, 0x72, 0x49, 0x64, 0x22, 0xb1, 0x01, 0x0a, 0x08, 0x42, 0x67, 0x70, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x2b,
	0x0a, 0x11, 0x61, 0x75, 0x74, 0x6f, 0x6e, 0x6f, 0x6d, 0x6f, 0x75, 0x73, 0x5f, 0x73, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x61, 0x75, 0x74, 0x6f, 0x6e,
	0x6f, 0x6d, 0x6f, 0x75, 0x73, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x1b, 0x0a, 0x09, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x41, 0x0a, 0x0f, 0x6e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x42, 0x67, 0x70, 0x4e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0e, 0x6e, 0x65, 0x69,
	0x67, 0x68, 0x62, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x22, 0xab, 0x01, 0x0a, 0x10,
	0x42, 0x67, 0x70, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x17, 0x0a, 0x07, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x69, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x70, 0x65, 0x65, 0x72, 0x49, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x75, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x06, 0x75, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x70, 0x72, 0x65, 0x66, 0x69,
	0x78, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x10, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x52, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73,
	0x5f, 0x73, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x70, 0x72, 0x65,
	0x66, 0x69, 0x78, 0x65, 0x73, 0x53, 0x65, 0x6e, 0x74, 0x22, 0xfb, 0x03, 0x0a, 0x0d, 0x42, 0x67,
	0x70, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4e, 0x65, 0x69, 0x67, 0x68,
	0x62, 0x6f, 0x72, 0x73, 0x12, 0x33, 0x0a, 0x15, 0x65, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x69, 0x73,
	0x68, 0x65, 0x64, 0x5f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x14, 0x65, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64,
	0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b,
	0x69, 0x70, 0x76, 0x34, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0a, 0x69, 0x70, 0x76, 0x34, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x12, 0x1f, 0x0a,
	0x0b, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0a, 0x69, 0x70, 0x76, 0x36, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x12, 0x21,
	0x0a, 0x0c, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x55, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x3e, 0x0a, 0x0c, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x2e, 0x42, 0x67, 0x70, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x73, 0x52, 0x0b, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74,
	0x73, 0x12, 0x3b, 0x0a, 0x0b, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73,
	0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e,
	0x42, 0x67, 0x70, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x73, 0x52, 0x0a, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x41,
	0x0a, 0x0d, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x42,
	0x67, 0x70, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x73, 0x52, 0x0c, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x73, 0x12, 0x44, 0x0a, 0x0e, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x2e, 0x42, 0x67, 0x70, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x53, 0x74,
	0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x0d, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x73, 0x22, 0xf5, 0x02, 0x0a, 0x13, 0x42, 0x67, 0x70, 0x47,
	0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12,
	0x21, 0x0a, 0x0c, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x6e, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x53, 0x65,
	0x6e, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x5f, 0x72, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x73, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x12, 0x2e, 0x0a,
	0x13, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f,
	0x73, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x53, 0x65, 0x6e, 0x74, 0x12, 0x36, 0x0a,
	0x17, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f,
	0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x15,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x64, 0x61, 0x6d, 0x70, 0x65, 0x6e, 0x65,
	0x64, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e,
	0x64, 0x61, 0x6d, 0x70, 0x65, 0x6e, 0x65, 0x64, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x12, 0x25,
	0x0a, 0x0e, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52,
	0x6f, 0x75, 0x74, 0x65, 0x73, 0x12, 0x2b, 0x0a, 0x11, 0x73, 0x75, 0x70, 0x70, 0x72, 0x65, 0x73,
	0x73, 0x65, 0x64, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x10, 0x73, 0x75, 0x70, 0x70, 0x72, 0x65, 0x73, 0x73, 0x65, 0x64, 0x52, 0x6f, 0x75, 0x74,
	0x65, 0x73, 0x12, 0x2b, 0x0a, 0x11, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x5f, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x77,
	0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x22,
	0xfc, 0x01, 0x0a, 0x12, 0x42, 0x67, 0x70, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x70,
	0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x12, 0x21, 0x0a, 0x0c,
	0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0b, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x55, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x2b, 0x0a, 0x11, 0x64, 0x61, 0x6d, 0x70, 0x65, 0x6e, 0x65, 0x64, 0x5f, 0x70, 0x72, 0x65, 0x66,
	0x69, 0x78, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x64, 0x61, 0x6d, 0x70,
	0x65, 0x6e, 0x65, 0x64, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x12, 0x29, 0x0a, 0x10,
	0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x50,
	0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0d, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x22, 0xee,
	0x04, 0x0a, 0x14, 0x42, 0x67, 0x70, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x6f, 0x70, 0x65, 0x6e, 0x73,
	0x5f, 0x73, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x6f, 0x70, 0x65,
	0x6e, 0x73, 0x53, 0x65, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x6f, 0x70, 0x65, 0x6e, 0x73, 0x5f,
	0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d,
	0x6f, 0x70, 0x65, 0x6e, 0x73, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x12, 0x2d, 0x0a,
	0x12, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x73,
	0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x6e, 0x6f, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53, 0x65, 0x6e, 0x74, 0x12, 0x35, 0x0a, 0x16,
	0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x72, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x15, 0x6e, 0x6f,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x5f, 0x73,
	0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x73, 0x53, 0x65, 0x6e, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x73, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x64, 0x12, 0x27, 0x0a, 0x0f, 0x6b, 0x65, 0x65, 0x70, 0x61, 0x6c, 0x69, 0x76, 0x65, 0x73, 0x5f,
	0x73, 0x65, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x6b, 0x65, 0x65, 0x70,
	0x61, 0x6c, 0x69, 0x76, 0x65, 0x73, 0x53, 0x65, 0x6e, 0x74, 0x12, 0x2f, 0x0a, 0x13, 0x6b, 0x65,
	0x65, 0x70, 0x61, 0x6c, 0x69, 0x76, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x12, 0x6b, 0x65, 0x65, 0x70, 0x61, 0x6c, 0x69,
	0x76, 0x65, 0x73, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f, 0x73, 0x65, 0x6e,
	0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x65,
	0x66, 0x72, 0x65, 0x73, 0x68, 0x53, 0x65, 0x6e, 0x74, 0x12, 0x34, 0x0a, 0x16, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x14, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x12,
	0x27, 0x0a, 0x0f, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x65,
	0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x53, 0x65, 0x6e, 0x74, 0x12, 0x2f, 0x0a, 0x13, 0x63, 0x61, 0x70, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x04, 0x52, 0x12, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x5f, 0x73, 0x65, 0x6e, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x53, 0x65, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x22,
	0xfc, 0x04, 0x0a, 0x15, 0x42, 0x67, 0x70, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x53,
	0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x65, 0x65,
	0x72, 0x5f, 0x69, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x65, 0x65, 0x72,
	0x49, 0x70, 0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x73,
	0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x53, 0x65, 0x6e, 0x74, 0x12, 0x2b, 0x0a, 0x11, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x10, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x5f,
	0x73, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x73, 0x53, 0x65, 0x6e, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x73, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x6b, 0x65, 0x65, 0x70, 0x61, 0x6c, 0x69, 0x76, 0x65, 0x73,
	0x5f, 0x73, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x6b, 0x65, 0x65,
	0x70, 0x61, 0x6c, 0x69, 0x76, 0x65, 0x73, 0x53, 0x65, 0x6e, 0x74, 0x12, 0x2f, 0x0a, 0x13, 0x6b,
	0x65, 0x65, 0x70, 0x61, 0x6c, 0x69, 0x76, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x12, 0x6b, 0x65, 0x65, 0x70, 0x61, 0x6c,
	0x69, 0x76, 0x65, 0x73, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x12, 0x2d, 0x0a, 0x12,
	0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x73, 0x65,
	0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53, 0x65, 0x6e, 0x74, 0x12, 0x35, 0x0a, 0x16, 0x6e,
	0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x72, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x15, 0x6e, 0x6f, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x72,
	0x65, 0x73, 0x68, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x12, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x65, 0x73,
	0x53, 0x65, 0x6e, 0x74, 0x12, 0x38, 0x0a, 0x18, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x72, 0x65,
	0x66, 0x72, 0x65, 0x73, 0x68, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x04, 0x52, 0x16, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x65, 0x66,
	0x72, 0x65, 0x73, 0x68, 0x65, 0x73, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x12, 0x2b,
	0x0a, 0x11, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x70, 0x72, 0x65, 0x66, 0x69,
	0x78, 0x65, 0x73, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x70,
	0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x5f, 0x73, 0x65, 0x6e, 0x74, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0c, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x53, 0x65, 0x6e, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x70, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x75, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x22, 0xfc,
	0x01, 0x0a, 0x0c, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x2b, 0x0a, 0x06, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x52,
	0x6f, 0x75, 0x74, 0x65, 0x52, 0x06, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x12, 0x3b, 0x0a, 0x0c,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x69, 0x63, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x0b, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x41, 0x0a, 0x0e, 0x6e, 0x65, 0x78,
	0x74, 0x68, 0x6f, 0x70, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69,
	0x63, 0x4e, 0x65, 0x78, 0x74, 0x68, 0x6f, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x0d, 0x6e,
	0x65, 0x78, 0x74, 0x68, 0x6f, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x3f, 0x0a, 0x0d,
	0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x69, 0x63, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x0c, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0xa2, 0x01,
	0x0a, 0x12, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x46, 0x0a, 0x1f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x64,
	0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1d, 0x64,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61,
	0x74, 0x69, 0x76, 0x65, 0x44, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x25, 0x0a, 0x0e,
	0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x4d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x70, 0x5f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x70, 0x46, 0x6f, 0x72, 0x77, 0x61,
	0x72, 0x64, 0x22, 0xbf, 0x03, 0x0a, 0x0b, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x52, 0x6f, 0x75,
	0x74, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x12, 0x1c,
	0x0a, 0x09, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x12, 0x37, 0x0a, 0x17, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74,
	0x72, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x16, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72,
	0x61, 0x74, 0x69, 0x76, 0x65, 0x44, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x0a, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x09, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2e, 0x0a,
	0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x52, 0x6f, 0x75, 0x74,
	0x65, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x52, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x68, 0x6f, 0x70,
	0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x6e, 0x65,
	0x78, 0x74, 0x68, 0x6f, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x76, 0x72,
	0x66, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x76, 0x72, 0x66, 0x12, 0x16, 0x0a, 0x06,
	0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x6f, 0x6e,
	0x6c, 0x69, 0x6e, 0x6b, 0x22, 0x7f, 0x0a, 0x10, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x52, 0x6f,
	0x75, 0x74, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x6a, 0x65,
	0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74,
	0x12, 0x1c, 0x0a, 0x09, 0x62, 0x6c, 0x61, 0x63, 0x6b, 0x68, 0x6f, 0x6c, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x09, 0x62, 0x6c, 0x61, 0x63, 0x6b, 0x68, 0x6f, 0x6c, 0x65, 0x12, 0x1d,
	0x0a, 0x0a, 0x6e, 0x6f, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x09, 0x6e, 0x6f, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x6f,
	0x6e, 0x6c, 0x69, 0x6e, 0x6b, 0x22, 0x9b, 0x01, 0x0a, 0x10, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63,
	0x52, 0x6f, 0x75, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x06, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x06, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x73, 0x22, 0xb1, 0x01, 0x0a, 0x12, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x4e, 0x65,
	0x78, 0x74, 0x68, 0x6f, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x31,
	0x0a, 0x08, 0x6e, 0x65, 0x78, 0x74, 0x68, 0x6f, 0x70, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63,
	0x4e, 0x65, 0x78, 0x74, 0x68, 0x6f, 0x70, 0x52, 0x08, 0x6e, 0x65, 0x78, 0x74, 0x68, 0x6f, 0x70,
	0x73, 0x12, 0x32, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1e, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x4e,
	0x65, 0x78, 0x74, 0x68, 0x6f, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x97, 0x01, 0x0a, 0x0d, 0x53, 0x74, 0x61, 0x74,
	0x69, 0x63, 0x4e, 0x65, 0x78, 0x74, 0x68, 0x6f, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x61, 0x74,
	0x65, 0x77, 0x61, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x61, 0x74, 0x65,
	0x77, 0x61, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x72, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x70,
	0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x61, 0x63,
	0x6b, 0x75, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x62, 0x61, 0x63, 0x6b, 0x75,
	0x70, 0x22, 0xa5, 0x01, 0x0a, 0x10, 0x53, 0x68, 0x6f, 0x77, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63,
	0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x12, 0x3c, 0x0a, 0x06, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e,
	0x53, 0x68, 0x6f, 0x77, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73,
	0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x73, 0x1a, 0x53, 0x0a, 0x0b, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2e, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x69, 0x63, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x62, 0x0a, 0x10, 0x53, 0x74, 0x61,
	0x74, 0x69, 0x63, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x16, 0x0a,
	0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70,
	0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x36, 0x0a, 0x08, 0x6e, 0x65, 0x78, 0x74, 0x68, 0x6f, 0x70,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x4e, 0x65, 0x78, 0x74,
	0x68, 0x6f, 0x70, 0x52, 0x08, 0x6e, 0x65, 0x78, 0x74, 0x68, 0x6f, 0x70, 0x73, 0x22, 0xc7, 0x01,
	0x0a, 0x12, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x4e, 0x65, 0x78,
	0x74, 0x68, 0x6f, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x6e, 0x65, 0x78, 0x74, 0x68, 0x6f, 0x70, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6e, 0x65, 0x78, 0x74, 0x68, 0x6f, 0x70, 0x12, 0x1c,
	0x0a, 0x09, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x12, 0x37, 0x0a, 0x17, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74,
	0x72, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x16, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72,
	0x61, 0x74, 0x69, 0x76, 0x65, 0x44, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x66, 0x69, 0x62, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x03, 0x66, 0x69, 0x62, 0x22, 0x87, 0x03, 0x0a, 0x10, 0x53, 0x74, 0x61, 0x74,
	0x69, 0x63, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x21, 0x0a, 0x0c,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x12,
	0x1f, 0x0a, 0x0b, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x69, 0x70, 0x76, 0x34, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73,
	0x12, 0x23, 0x0a, 0x0d, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x52,
	0x6f, 0x75, 0x74, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x69, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e,
	0x69, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x12, 0x3e,
	0x0a, 0x0b, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x69, 0x63, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x73, 0x52, 0x0a, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x4b,
	0x0a, 0x10, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x0e, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x54, 0x0a, 0x13, 0x6e,
	0x65, 0x78, 0x74, 0x68, 0x6f, 0x70, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x4e, 0x65, 0x78, 0x74, 0x68, 0x6f, 0x70, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x11,
	0x6e, 0x65, 0x78, 0x74, 0x68, 0x6f, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x74, 0x61, 0x74,
	0x73, 0x22, 0xc0, 0x01, 0x0a, 0x15, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x69,
	0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x69, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x52, 0x6f,
	0x75, 0x74, 0x65, 0x73, 0x22, 0xe8, 0x01, 0x0a, 0x19, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x52,
	0x6f, 0x75, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x75, 0x6e, 0x69, 0x63,
	0x61, 0x73, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x62, 0x6c, 0x61,
	0x63, 0x6b, 0x68, 0x6f, 0x6c, 0x65, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0f, 0x62, 0x6c, 0x61, 0x63, 0x6b, 0x68, 0x6f, 0x6c, 0x65, 0x52, 0x6f,
	0x75, 0x74, 0x65, 0x73, 0x12, 0x2d, 0x0a, 0x12, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x63, 0x68, 0x61,
	0x62, 0x6c, 0x65, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x11, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x63, 0x68, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x6f, 0x75,
	0x74, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x68, 0x69, 0x62, 0x69, 0x74, 0x5f,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x70, 0x72,
	0x6f, 0x68, 0x69, 0x62, 0x69, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x12, 0x21, 0x0a, 0x0c,
	0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0b, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x22,
	0xe7, 0x01, 0x0a, 0x1c, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x4e, 0x65, 0x78, 0x74, 0x68, 0x6f,
	0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73,
	0x12, 0x21, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x61, 0x74, 0x68,
	0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x6d,
	0x75, 0x6c, 0x74, 0x69, 0x70, 0x61, 0x74, 0x68, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x29,
	0x0a, 0x10, 0x72, 0x65, 0x73, 0x69, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x72, 0x65, 0x73, 0x69, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x5f, 0x6e, 0x65, 0x78, 0x74, 0x68, 0x6f, 0x70, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4e, 0x65, 0x78, 0x74, 0x68, 0x6f, 0x70, 0x73,
	0x12, 0x27, 0x0a, 0x0f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x6e, 0x65, 0x78, 0x74, 0x68,
	0x6f, 0x70, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x4e, 0x65, 0x78, 0x74, 0x68, 0x6f, 0x70, 0x73, 0x22, 0x94, 0x07, 0x0a, 0x0a, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x67, 0x70, 0x12, 0x36, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x2e, 0x42, 0x67, 0x70, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x29, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x42, 0x67, 0x70, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x2f, 0x0a, 0x08, 0x6e,
	0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x42, 0x67, 0x70, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x52, 0x08, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x12, 0x17, 0x0a, 0x07,
	0x70, 0x65, 0x65, 0x72, 0x5f, 0x69, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70,
	0x65, 0x65, 0x72, 0x49, 0x70, 0x12, 0x25, 0x0a, 0x0e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x30, 0x0a, 0x09,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x42, 0x67, 0x70, 0x52, 0x6f, 0x75, 0x74,
	0x65, 0x4d, 0x61, 0x70, 0x52, 0x08, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x4d, 0x61, 0x70, 0x12, 0x3f,
	0x0a, 0x0e, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e,
	0x42, 0x67, 0x70, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x0d, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x36, 0x0a, 0x0b, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x42, 0x67,
	0x70, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x0a, 0x70, 0x72, 0x65,
	0x66, 0x69, 0x78, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x75,
	0x6e, 0x69, 0x74, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x6d,
	0x75, 0x6e, 0x69, 0x74, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x73, 0x5f, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x61, 0x73, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x54, 0x0a, 0x15, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x2e, 0x42, 0x67, 0x70, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x14, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x4b, 0x0a, 0x12, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x2e, 0x42, 0x67, 0x70, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x11, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c,
	0x69, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x0f, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0b, 0x69, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12,
	0x19, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x61, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x07, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x41, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65,
	0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x61, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x72,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x41, 0x73, 0x12, 0x30, 0x0a, 0x14, 0x73, 0x6f, 0x66, 0x74, 0x5f,
	0x72, 0x65, 0x73, 0x65, 0x74, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x73, 0x6f, 0x66, 0x74, 0x52, 0x65, 0x73, 0x65, 0x74,
	0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x29, 0x0a, 0x10,
	0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x69, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x49,
	0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x5f, 0x63, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x61, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x43, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x61,
	0x22, 0xcd, 0x0f, 0x0a, 0x0b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x67, 0x70,
	0x12, 0x36, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x42, 0x67, 0x70,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x29, 0x0a, 0x06,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x42, 0x67, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x31, 0x0a, 0x09, 0x6e, 0x65, 0x69, 0x67, 0x68,
	0x62, 0x6f, 0x72, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x2e, 0x42, 0x67, 0x70, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x52,
	0x09, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x12, 0x26, 0x0a, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x2e, 0x42, 0x67, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x35, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e,
	0x42, 0x67, 0x70, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x0a, 0x73,
	0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x32, 0x0a, 0x0a, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x5f, 0x6d, 0x61, 0x70, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x42, 0x67, 0x70, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x4d,
	0x61, 0x70, 0x52, 0x09, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x4d, 0x61, 0x70, 0x73, 0x12, 0x41, 0x0a,
	0x0f, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x73,
	0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e,
	0x42, 0x67, 0x70, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x0e, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x73,
	0x12, 0x38, 0x0a, 0x0c, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x73,
	0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e,
	0x42, 0x67, 0x70, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x0b, 0x70,
	0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x69, 0x73, 0x74, 0x73, 0x12, 0x39, 0x0a, 0x0c, 0x73, 0x68,
	0x6f, 0x77, 0x5f, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x68, 0x6f, 0x77, 0x42, 0x67,
	0x70, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x0b, 0x73, 0x68, 0x6f, 0x77, 0x53, 0x75,
	0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x3f, 0x0a, 0x0e, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x6e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x68, 0x6f, 0x77, 0x42, 0x67, 0x70, 0x4e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x52, 0x0d, 0x73, 0x68, 0x6f, 0x77, 0x4e, 0x65, 0x69,
	0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x12, 0x36, 0x0a, 0x0b, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x68, 0x6f, 0x77, 0x42, 0x67, 0x70, 0x52, 0x6f, 0x75, 0x74,
	0x65, 0x73, 0x52, 0x0a, 0x73, 0x68, 0x6f, 0x77, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x12, 0x29,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x42, 0x67, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2f, 0x0a, 0x08, 0x6e, 0x65, 0x69,
	0x67, 0x68, 0x62, 0x6f, 0x72, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x2e, 0x42, 0x67, 0x70, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x52, 0x08, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x12, 0x4e, 0x0a, 0x13, 0x6e, 0x65,
	0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x73, 0x18, 0x11, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x2e, 0x42, 0x67, 0x70, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x12, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x3c, 0x0a, 0x0d, 0x68, 0x65,
	0x61, 0x6c, 0x74, 0x68, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x42, 0x67, 0x70, 0x48, 0x65,
	0x61, 0x6c, 0x74, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0c, 0x68, 0x65, 0x61, 0x6c,
	0x74, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x42, 0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x13, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x42, 0x67, 0x70, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x4e, 0x0a, 0x13,
	0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x73, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x2e, 0x42, 0x67, 0x70, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63,
	0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x12, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x6e, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x51, 0x0a, 0x14,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x2e, 0x42, 0x67, 0x70, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x13, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x25, 0x0a, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x4b, 0x0a, 0x12, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x17, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x42, 0x67, 0x70, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x11, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x4e, 0x0a, 0x13, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x42, 0x67, 0x70, 0x56, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52,
	0x12, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x19, 0x20, 0x03, 0x28, 0x09, 0x52, 0x10,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73,
	0x12, 0x2f, 0x0a, 0x13, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x77,
	0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x1a, 0x20, 0x03, 0x28, 0x09, 0x52, 0x12, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67,
	0x73, 0x12, 0x53, 0x0a, 0x10, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x18, 0x1b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x67, 0x70,
	0x2e, 0x43, 0x61, 0x63, 0x68, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0f, 0x63, 0x61, 0x63, 0x68, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x51, 0x0a, 0x10, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f,
	0x68, 0x69, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x73, 0x18, 0x1c, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x27, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x42, 0x67, 0x70, 0x2e, 0x43, 0x61, 0x63, 0x68, 0x65, 0x48, 0x69, 0x74, 0x52, 0x61,
	0x74, 0x69, 0x6f, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x63, 0x61, 0x63, 0x68, 0x65,
	0x48, 0x69, 0x74, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x6e, 0x65, 0x69,
	0x67, 0x68, 0x62, 0x6f, 0x72, 0x5f, 0x75, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x1d, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0e, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x55, 0x70, 0x74, 0x69,
	0x6d, 0x65, 0x12, 0x32, 0x0a, 0x15, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x1e, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x13, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x36, 0x0a, 0x17, 0x69, 0x73, 0x5f, 0x6e, 0x65, 0x69,
	0x67, 0x68, 0x62, 0x6f, 0x72, 0x5f, 0x65, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65,
	0x64, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x69, 0x73, 0x4e, 0x65, 0x69, 0x67, 0x68,
	0x62, 0x6f, 0x72, 0x45, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x12, 0x23,
	0x0a, 0x0d, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x20, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x54, 0x0a, 0x15, 0x72, 0x65, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x21, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x42, 0x67, 0x70, 0x52,
	0x65, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x14, 0x72, 0x65, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x1a, 0x42, 0x0a, 0x14, 0x43, 0x61, 0x63,
	0x68, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x41, 0x0a,
	0x13, 0x43, 0x61, 0x63, 0x68, 0x65, 0x48, 0x69, 0x74, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0xe3, 0x02, 0x0a, 0x0d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x69, 0x63, 0x12, 0x39, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x69, 0x63, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x0a,
	0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x29, 0x0a, 0x05, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x52,
	0x05, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x12, 0x39, 0x0a, 0x0b, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x52, 0x6f, 0x75, 0x74, 0x65,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x0a, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x12, 0x3f, 0x0a, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x68, 0x6f, 0x70, 0x5f, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x4e, 0x65, 0x78, 0x74, 0x68, 0x6f, 0x70, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x52, 0x0c, 0x6e, 0x65, 0x78, 0x74, 0x68, 0x6f, 0x70, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x27, 0x0a,
	0x0f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x63, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x61,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x43, 0x72,
	0x69, 0x74, 0x65, 0x72, 0x69, 0x61, 0x22, 0xcf, 0x03, 0x0a, 0x0e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x12, 0x39, 0x0a, 0x09, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x18,
	0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2c, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x2b, 0x0a, 0x06, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x06, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x73, 0x12, 0x3b, 0x0a, 0x0c, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x52, 0x0b, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73,
	0x12, 0x41, 0x0a, 0x0e, 0x6e, 0x65, 0x78, 0x74, 0x68, 0x6f, 0x70, 0x5f, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x4e, 0x65, 0x78, 0x74, 0x68, 0x6f, 0x70, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x68, 0x6f, 0x70, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x73, 0x12, 0x38, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x73, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x39, 0x0a,
	0x0b, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x68, 0x6f, 0x77,
	0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x52, 0x0a, 0x73, 0x68,
	0x6f, 0x77, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x22, 0x89, 0x05, 0x0a, 0x09, 0x42, 0x67, 0x70,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x73, 0x5f, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x61, 0x73, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x25, 0x0a,
	0x0e, 0x64, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x5f, 0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x64, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x52, 0x75, 0x6e,
	0x6e, 0x69, 0x6e, 0x67, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x12, 0x51, 0x0a, 0x10, 0x63, 0x61, 0x63, 0x68, 0x65,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x42, 0x67, 0x70, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x2e, 0x43, 0x61, 0x63, 0x68, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0f, 0x63, 0x61, 0x63, 0x68, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x4e, 0x0a, 0x0f, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x18, 0x06, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x42, 0x67, 0x70,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x4e, 0x0a, 0x13, 0x70, 0x65,
	0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x2e, 0x42, 0x67, 0x70, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x4d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x12, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x6e, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x3c, 0x0a, 0x0d, 0x68, 0x65,
	0x61, 0x6c, 0x74, 0x68, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x42, 0x67, 0x70, 0x48, 0x65,
	0x61, 0x6c, 0x74, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0c, 0x68, 0x65, 0x61, 0x6c,
	0x74, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x42, 0x0a,
	0x14, 0x43, 0x61, 0x63, 0x68, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x1a, 0x41, 0x0a, 0x13, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0xca, 0x03, 0x0a, 0x15, 0x42, 0x67, 0x70, 0x50, 0x65, 0x72, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x5b,
	0x0a, 0x10, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x68, 0x69, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x2e, 0x42, 0x67, 0x70, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2e, 0x43, 0x61, 0x63, 0x68, 0x65, 0x48, 0x69, 0x74,
	0x52, 0x61, 0x74, 0x69, 0x6f, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x63, 0x61, 0x63,
	0x68, 0x65, 0x48, 0x69, 0x74, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x73, 0x12, 0x39, 0x0a, 0x19, 0x65,
	0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x6d,
	0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x6b, 0x62, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x16,
	0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x43, 0x61, 0x63, 0x68, 0x65, 0x4d, 0x65,
	0x6d, 0x6f, 0x72, 0x79, 0x4b, 0x62, 0x12, 0x1f, 0x0a, 0x0b, 0x67, 0x6f, 0x5f, 0x72, 0x6f, 0x75,
	0x74, 0x69, 0x6e, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x67, 0x6f, 0x52,
	0x6f, 0x75, 0x74, 0x69, 0x6e, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6d, 0x65, 0x6d, 0x6f, 0x72,
	0x79, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x5f, 0x6d, 0x62, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0d, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x4d, 0x62, 0x12,
	0x24, 0x0a, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x5f, 0x6d,
	0x62, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x6c,
	0x6c, 0x6f, 0x63, 0x4d, 0x62, 0x12, 0x15, 0x0a, 0x06, 0x73, 0x79, 0x73, 0x5f, 0x6d, 0x62, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x73, 0x79, 0x73, 0x4d, 0x62, 0x12, 0x15, 0x0a, 0x06,
	0x6e, 0x75, 0x6d, 0x5f, 0x67, 0x63, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6e, 0x75,
	0x6d, 0x47, 0x63, 0x12, 0x39, 0x0a, 0x18, 0x6f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x17, 0x6f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x1a, 0x41,
	0x0a, 0x13, 0x43, 0x61, 0x63, 0x68, 0x65, 0x48, 0x69, 0x74, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0x92, 0x02, 0x0a, 0x0f, 0x42, 0x67, 0x70, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x79, 0x12,
	0x25, 0x0a, 0x0e, 0x64, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x5f, 0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e,
	0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x64, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x52,
	0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x12, 0x2f, 0x0a, 0x13, 0x6e, 0x65, 0x69,
	0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72,
	0x73, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x5f, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x73, 0x73, 0x75, 0x65, 0x73, 0x18, 0x06, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x06, 0x69, 0x73, 0x73, 0x75, 0x65, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x22, 0xd8, 0x01, 0x0a, 0x0c, 0x42, 0x67, 0x70, 0x43, 0x61,
	0x63, 0x68, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x61, 0x63, 0x68, 0x65,
	0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x63, 0x61,
	0x63, 0x68, 0x65, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x61, 0x63, 0x68,
	0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x63, 0x61,
	0x63, 0x68, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x61, 0x63, 0x68, 0x65,
	0x5f, 0x68, 0x69, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x63, 0x61, 0x63,
	0x68, 0x65, 0x48, 0x69, 0x74, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x12, 0x21, 0x0a,
	0x0c, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x74, 0x6c, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x74, 0x74, 0x6c, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64,
	0x73, 0x22, 0x99, 0x02, 0x0a, 0x0a, 0x42, 0x67, 0x70, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79,
	0x12, 0x19, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x61, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x07, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x41, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x5f, 0x70, 0x65, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x50, 0x65, 0x65, 0x72, 0x73, 0x12, 0x2b, 0x0a, 0x11, 0x65, 0x73, 0x74,
	0x61, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x5f, 0x70, 0x65, 0x65, 0x72, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x65, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65,
	0x64, 0x50, 0x65, 0x65, 0x72, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f,
	0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x12, 0x23, 0x0a,
	0x0d, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x39, 0x0a, 0x0c, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x73, 0x75, 0x6d, 0x6d, 0x61,
	0x72, 0x79, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x2e, 0x42, 0x67, 0x70, 0x50, 0x65, 0x65, 0x72, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79,
	0x52, 0x0b, 0x70, 0x65, 0x65, 0x72, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x22, 0xea, 0x01,
	0x0a, 0x0e, 0x42, 0x67, 0x70, 0x50, 0x65, 0x65, 0x72, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79,
	0x12, 0x17, 0x0a, 0x07, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x69, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x70, 0x65, 0x65, 0x72, 0x49, 0x70, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x6d,
	0x6f, 0x74, 0x65, 0x5f, 0x61, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x72, 0x65,
	0x6d, 0x6f, 0x74, 0x65, 0x41, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x75, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x75, 0x70,
	0x74, 0x69, 0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73,
	0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x10, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x64, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x5f, 0x73, 0x65,
	0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78,
	0x65, 0x73, 0x53, 0x65, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f,
	0x70, 0x66, 0x78, 0x5f, 0x72, 0x63, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x50, 0x66, 0x78, 0x52, 0x63, 0x64, 0x22, 0xe9, 0x02, 0x0a, 0x17, 0x42,
	0x67, 0x70, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x29, 0x0a,
	0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x42, 0x67, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x2f, 0x0a, 0x08, 0x6e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x2e, 0x42, 0x67, 0x70, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x52,
	0x08, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x12, 0x30, 0x0a, 0x09, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x42, 0x67, 0x70, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x4d, 0x61,
	0x70, 0x52, 0x08, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x4d, 0x61, 0x70, 0x12, 0x3f, 0x0a, 0x0e, 0x63,
	0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x42, 0x67, 0x70,
	0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x0d, 0x63,
	0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x0b,
	0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x42, 0x67, 0x70, 0x50, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x0a, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xf7, 0x01, 0x0a, 0x16, 0x42, 0x67, 0x70, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2b, 0x0a, 0x11,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x10, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6d, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x73,
	0x22, 0xf3, 0x02, 0x0a, 0x14, 0x42, 0x67, 0x70, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x29, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x42, 0x67, 0x70, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x2f, 0x0a,
	0x08, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x42, 0x67, 0x70, 0x4e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x52, 0x08, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x12, 0x30,
	0x0a, 0x09, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x42, 0x67, 0x70, 0x52, 0x6f,
	0x75, 0x74, 0x65, 0x4d, 0x61, 0x70, 0x52, 0x08, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x4d, 0x61, 0x70,
	0x12, 0x3f, 0x0a, 0x0e, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x2e, 0x42, 0x67, 0x70, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x0d, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x36, 0x0a, 0x0b, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e,
	0x42, 0x67, 0x70, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x0a, 0x70,
	0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x11, 0x73, 0x74, 0x72,
	0x69, 0x63, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x56, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xdc, 0x03, 0x0a, 0x15, 0x42, 0x67, 0x70, 0x56, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x32, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x42, 0x67, 0x70, 0x56, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x06, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x73, 0x12, 0x38, 0x0a, 0x08, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x42,
	0x67, 0x70, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x61, 0x72, 0x6e,
	0x69, 0x6e, 0x67, 0x52, 0x08, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x63, 0x0a,
	0x12, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x2e, 0x42, 0x67, 0x70, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x11, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x68, 0x65, 0x63,
	0x6b, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x61, 0x73, 0x73, 0x65, 0x64, 0x5f,
	0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x70, 0x61,
	0x73, 0x73, 0x65, 0x64, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x66, 0x61,
	0x69, 0x6c, 0x65, 0x64, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0c, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x1a,
	0x44, 0x0a, 0x16, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xb4, 0x01, 0x0a, 0x12, 0x42, 0x67, 0x70, 0x56, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x1d, 0x0a, 0x0a,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x1f, 0x0a, 0x0b, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x22, 0xca, 0x01, 0x0a,
	0x14, 0x42, 0x67, 0x70, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x61,
	0x72, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x21, 0x0a, 0x0c, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x77, 0x61, 0x72,
	0x6e, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x77, 0x61, 0x72, 0x6e,
	0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x26, 0x0a, 0x0e, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x65, 0x63, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xd7, 0x03, 0x0a, 0x11, 0x42, 0x67,
	0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x25, 0x0a, 0x0e, 0x64, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x5f, 0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e,
	0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x64, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x52,
	0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x2f, 0x0a, 0x13, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x12, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x64, 0x61, 0x65, 0x6d, 0x6f,
	0x6e, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x64, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x23,
	0x0a, 0x0d, 0x64, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x5f, 0x75, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x64, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x55, 0x70, 0x74,
	0x69, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x75, 0x73,
	0x61, 0x67, 0x65, 0x5f, 0x6b, 0x62, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x6d, 0x65,
	0x6d, 0x6f, 0x72, 0x79, 0x55, 0x73, 0x61, 0x67, 0x65, 0x4b, 0x62, 0x12, 0x2a, 0x0a, 0x11, 0x63,
	0x70, 0x75, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x63, 0x70, 0x75, 0x55, 0x73, 0x61, 0x67, 0x65,
	0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x5f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73,
	0x12, 0x5c, 0x0a, 0x11, 0x64, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x2e, 0x42, 0x67, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x44, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x53, 0x74, 0x61,
	0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x10, 0x64, 0x61,
	0x65, 0x6d, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x1a, 0x43,
	0x0a, 0x15, 0x44, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0xb7, 0x03, 0x0a, 0x17, 0x42, 0x67, 0x70, 0x52, 0x65, 0x64, 0x69, 0x73,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x2b, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x65, 0x64, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x25, 0x0a, 0x0e,
	0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x45, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x6f, 0x73, 0x70, 0x66, 0x5f, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x6f, 0x73, 0x70, 0x66, 0x45,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x69, 0x70, 0x5f, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x72, 0x69, 0x70,
	0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x6b, 0x65, 0x72, 0x6e, 0x65,
	0x6c, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0d, 0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x71,
	0x0a, 0x16, 0x72, 0x65, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3a,
	0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x42, 0x67, 0x70, 0x52, 0x65, 0x64, 0x69, 0x73,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e,
	0x52, 0x65, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x15, 0x72, 0x65, 0x64, 0x69,
	0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x73, 0x1a, 0x6a, 0x0a, 0x1a, 0x52, 0x65, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x36, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x42, 0x67, 0x70, 0x52, 0x65, 0x64,
	0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xc9, 0x01,
	0x0a, 0x18, 0x42, 0x67, 0x70, 0x52, 0x65, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x31, 0x0a, 0x14, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73,
	0x5f, 0x72, 0x65, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x52, 0x65, 0x64, 0x69,
	0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x73, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x65, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x70, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x4d, 0x61, 0x70, 0x12,
	0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x22, 0x5e, 0x0a, 0x10, 0x42, 0x67, 0x70,
	0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x27, 0x0a,
	0x0f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x21, 0x0a, 0x0c, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x5f,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x66, 0x6f,
	0x72, 0x63, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x22, 0xd8, 0x02, 0x0a, 0x14, 0x42, 0x67,
	0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x43, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e,
	0x63, 0x79, 0x12, 0x30, 0x0a, 0x14, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x5f,
	0x63, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x12, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x49, 0x64, 0x43, 0x6f, 0x6e, 0x73, 0x69, 0x73,
	0x74, 0x65, 0x6e, 0x74, 0x12, 0x30, 0x0a, 0x14, 0x61, 0x73, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x12, 0x61, 0x73, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x73,
	0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x2b, 0x0a, 0x11, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x73,
	0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x10, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x73, 0x43, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74,
	0x65, 0x6e, 0x74, 0x12, 0x2f, 0x0a, 0x13, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73,
	0x5f, 0x72, 0x65, 0x61, 0x63, 0x68, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x12, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x52, 0x65, 0x61, 0x63, 0x68,
	0x61, 0x62, 0x6c, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73,
	0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x12, 0x2d, 0x0a, 0x12, 0x63,
	0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x69, 0x73, 0x73, 0x75, 0x65,
	0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x11, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74,
	0x65, 0x6e, 0x63, 0x79, 0x49, 0x73, 0x73, 0x75, 0x65, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x72, 0x65,
	0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x07, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0f, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x22, 0xe4, 0x02, 0x0a, 0x18, 0x42, 0x67, 0x70, 0x4e, 0x65, 0x69, 0x67,
	0x68, 0x62, 0x6f, 0x72, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x69, 0x70, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x70, 0x65, 0x65, 0x72, 0x49, 0x70, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x73,
	0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69, 0x62, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0c, 0x61, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69, 0x62, 0x6c, 0x65, 0x12,
	0x3a, 0x0a, 0x19, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x66, 0x61, 0x6d, 0x69, 0x6c,
	0x79, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69, 0x62, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x17, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x46, 0x61, 0x6d, 0x69, 0x6c,
	0x79, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69, 0x62, 0x6c, 0x65, 0x12, 0x37, 0x0a, 0x17, 0x63,
	0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x5f, 0x63, 0x6f, 0x6d, 0x70,
	0x61, 0x74, 0x69, 0x62, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x63, 0x61,
	0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x74,
	0x69, 0x62, 0x6c, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x73, 0x5f, 0x63,
	0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69, 0x62, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x10, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69, 0x62, 0x6c,
	0x65, 0x12, 0x31, 0x0a, 0x14, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x5f, 0x69, 0x73, 0x73, 0x75, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x13, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x49, 0x73,
	0x73, 0x75, 0x65, 0x73, 0x12, 0x35, 0x0a, 0x16, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x07,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x15, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x22, 0xcd, 0x02, 0x0a, 0x16,
	0x42, 0x67, 0x70, 0x41, 0x53, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x56, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f,
	0x61, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x41,
	0x73, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x61, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x41, 0x73, 0x12, 0x24,
	0x0a, 0x0e, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x61, 0x73, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x41, 0x73, 0x56,
	0x61, 0x6c, 0x69, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x61,
	0x73, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x72,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x41, 0x73, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x12, 0x2a, 0x0a, 0x11,
	0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x61, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x41, 0x73,
	0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x72, 0x65, 0x6d, 0x6f,
	0x74, 0x65, 0x5f, 0x61, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x41, 0x73, 0x52, 0x65,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x61, 0x73, 0x5f, 0x70, 0x61, 0x74,
	0x68, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x61,
	0x73, 0x50, 0x61, 0x74, 0x68, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x12, 0x2f, 0x0a, 0x13, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x12, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x22, 0xef, 0x03, 0x0a, 0x0f,
	0x42, 0x67, 0x70, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x32, 0x0a, 0x0a, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x70, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x42, 0x67, 0x70,
	0x52, 0x6f, 0x75, 0x74, 0x65, 0x4d, 0x61, 0x70, 0x52, 0x09, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x4d,
	0x61, 0x70, 0x73, 0x12, 0x41, 0x0a, 0x0f, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x42, 0x67, 0x70, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69,
	0x74, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x0e, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74,
	0x79, 0x4c, 0x69, 0x73, 0x74, 0x73, 0x12, 0x38, 0x0a, 0x0c, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x42, 0x67, 0x70, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x0b, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x69, 0x73, 0x74, 0x73,
	0x12, 0x28, 0x0a, 0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f,
	0x6d, 0x61, 0x70, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x4d, 0x61, 0x70, 0x73, 0x12, 0x32, 0x0a, 0x15, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x73, 0x12, 0x2c,
	0x0a, 0x12, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x69, 0x73, 0x74, 0x73, 0x12, 0x5a, 0x0a, 0x11,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x2e, 0x42, 0x67, 0x70, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x10, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x53, 0x74,
	0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x1a, 0x43, 0x0a, 0x15, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x2a, 0x5a, 0x0a,
	0x0f, 0x46, 0x72, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x18, 0x0a, 0x14, 0x46, 0x52, 0x52, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c,
	0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x46, 0x52,
	0x52, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x42, 0x47, 0x50, 0x10, 0x01,
	0x12, 0x17, 0x0a, 0x13, 0x46, 0x52, 0x52, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x49, 0x43, 0x10, 0x02, 0x2a, 0xa1, 0x0c, 0x0a, 0x10, 0x42, 0x67,
	0x70, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0f,
	0x0a, 0x0b, 0x42, 0x47, 0x50, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12,
	0x12, 0x0a, 0x0e, 0x42, 0x47, 0x50, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49,
	0x47, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x42, 0x47, 0x50, 0x5f, 0x53, 0x45, 0x54, 0x5f, 0x43,
	0x4f, 0x4e, 0x46, 0x49, 0x47, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x42, 0x47, 0x50, 0x5f, 0x47,
	0x45, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x10, 0x03, 0x12, 0x14, 0x0a, 0x10, 0x42, 0x47,
	0x50, 0x5f, 0x41, 0x44, 0x44, 0x5f, 0x4e, 0x45, 0x49, 0x47, 0x48, 0x42, 0x4f, 0x52, 0x10, 0x04,
	0x12, 0x17, 0x0a, 0x13, 0x42, 0x47, 0x50, 0x5f, 0x52, 0x45, 0x4d, 0x4f, 0x56, 0x45, 0x5f, 0x4e,
	0x45, 0x49, 0x47, 0x48, 0x42, 0x4f, 0x52, 0x10, 0x05, 0x12, 0x17, 0x0a, 0x13, 0x42, 0x47, 0x50,
	0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x4e, 0x45, 0x49, 0x47, 0x48, 0x42, 0x4f, 0x52,
	0x10, 0x06, 0x12, 0x16, 0x0a, 0x12, 0x42, 0x47, 0x50, 0x5f, 0x52, 0x45, 0x53, 0x45, 0x54, 0x5f,
	0x4e, 0x45, 0x49, 0x47, 0x48, 0x42, 0x4f, 0x52, 0x10, 0x07, 0x12, 0x15, 0x0a, 0x11, 0x42, 0x47,
	0x50, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x4e, 0x45, 0x49, 0x47, 0x48, 0x42, 0x4f, 0x52, 0x53, 0x10,
	0x08, 0x12, 0x13, 0x0a, 0x0f, 0x42, 0x47, 0x50, 0x5f, 0x41, 0x44, 0x44, 0x5f, 0x4e, 0x45, 0x54,
	0x57, 0x4f, 0x52, 0x4b, 0x10, 0x09, 0x12, 0x16, 0x0a, 0x12, 0x42, 0x47, 0x50, 0x5f, 0x52, 0x45,
	0x4d, 0x4f, 0x56, 0x45, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x10, 0x0a, 0x12, 0x12,
	0x0a, 0x0e, 0x42, 0x47, 0x50, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x53,
	0x10, 0x0b, 0x12, 0x16, 0x0a, 0x12, 0x42, 0x47, 0x50, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x49, 0x53, 0x54, 0x49, 0x43, 0x53, 0x10, 0x0c, 0x12, 0x14, 0x0a, 0x10, 0x42, 0x47,
	0x50, 0x5f, 0x43, 0x4c, 0x45, 0x41, 0x52, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x53, 0x10, 0x0d,
	0x12, 0x0e, 0x0a, 0x0a, 0x42, 0x47, 0x50, 0x5f, 0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x0e,
	0x12, 0x0f, 0x0a, 0x0b, 0x42, 0x47, 0x50, 0x5f, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x10,
	0x0f, 0x12, 0x17, 0x0a, 0x13, 0x42, 0x47, 0x50, 0x5f, 0x41, 0x50, 0x50, 0x4c, 0x59, 0x5f, 0x52,
	0x4f, 0x55, 0x54, 0x45, 0x5f, 0x4d, 0x41, 0x50, 0x10, 0x10, 0x12, 0x18, 0x0a, 0x14, 0x42, 0x47,
	0x50, 0x5f, 0x52, 0x45, 0x4d, 0x4f, 0x56, 0x45, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x5f, 0x4d,
	0x41, 0x50, 0x10, 0x11, 0x12, 0x15, 0x0a, 0x11, 0x42, 0x47, 0x50, 0x5f, 0x53, 0x45, 0x54, 0x5f,
	0x43, 0x4f, 0x4d, 0x4d, 0x55, 0x4e, 0x49, 0x54, 0x59, 0x10, 0x12, 0x12, 0x17, 0x0a, 0x13, 0x42,
	0x47, 0x50, 0x5f, 0x43, 0x4c, 0x45, 0x41, 0x52, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x55, 0x4e, 0x49,
	0x54, 0x59, 0x10, 0x13, 0x12, 0x13, 0x0a, 0x0f, 0x42, 0x47, 0x50, 0x5f, 0x47, 0x45, 0x54, 0x5f,
	0x53, 0x55, 0x4d, 0x4d, 0x41, 0x52, 0x59, 0x10, 0x14, 0x12, 0x15, 0x0a, 0x11, 0x42, 0x47, 0x50,
	0x5f, 0x43, 0x4c, 0x45, 0x41, 0x52, 0x5f, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0x15,
	0x12, 0x0d, 0x0a, 0x09, 0x42, 0x47, 0x50, 0x5f, 0x52, 0x45, 0x53, 0x45, 0x54, 0x10, 0x16, 0x12,
	0x16, 0x0a, 0x12, 0x42, 0x47, 0x50, 0x5f, 0x53, 0x48, 0x4f, 0x57, 0x5f, 0x4e, 0x45, 0x49, 0x47,
	0x48, 0x42, 0x4f, 0x52, 0x53, 0x10, 0x17, 0x12, 0x13, 0x0a, 0x0f, 0x42, 0x47, 0x50, 0x5f, 0x53,
	0x48, 0x4f, 0x57, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x53, 0x10, 0x18, 0x12, 0x12, 0x0a, 0x0e,
	0x42, 0x47, 0x50, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x10, 0x19,
	0x12, 0x13, 0x0a, 0x0f, 0x42, 0x47, 0x50, 0x5f, 0x43, 0x4c, 0x45, 0x41, 0x52, 0x5f, 0x43, 0x41,
	0x43, 0x48, 0x45, 0x10, 0x1a, 0x12, 0x16, 0x0a, 0x12, 0x42, 0x47, 0x50, 0x5f, 0x4f, 0x50, 0x54,
	0x49, 0x4d, 0x49, 0x5a, 0x45, 0x5f, 0x43, 0x41, 0x43, 0x48, 0x45, 0x10, 0x1b, 0x12, 0x1c, 0x0a,
	0x18, 0x42, 0x47, 0x50, 0x5f, 0x41, 0x50, 0x50, 0x4c, 0x59, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x55,
	0x4e, 0x49, 0x54, 0x59, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x10, 0x1c, 0x12, 0x1d, 0x0a, 0x19, 0x42,
	0x47, 0x50, 0x5f, 0x52, 0x45, 0x4d, 0x4f, 0x56, 0x45, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x55, 0x4e,
	0x49, 0x54, 0x59, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x10, 0x1d, 0x12, 0x19, 0x0a, 0x15, 0x42, 0x47,
	0x50, 0x5f, 0x41, 0x50, 0x50, 0x4c, 0x59, 0x5f, 0x50, 0x52, 0x45, 0x46, 0x49, 0x58, 0x5f, 0x4c,
	0x49, 0x53, 0x54, 0x10, 0x1e, 0x12, 0x1a, 0x0a, 0x16, 0x42, 0x47, 0x50, 0x5f, 0x52, 0x45, 0x4d,
	0x4f, 0x56, 0x45, 0x5f, 0x50, 0x52, 0x45, 0x46, 0x49, 0x58, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x10,
	0x1f, 0x12, 0x1a, 0x0a, 0x16, 0x42, 0x47, 0x50, 0x5f, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x41, 0x54,
	0x45, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x5f, 0x4d, 0x41, 0x50, 0x10, 0x20, 0x12, 0x1f, 0x0a,
	0x1b, 0x42, 0x47, 0x50, 0x5f, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x4f,
	0x4d, 0x4d, 0x55, 0x4e, 0x49, 0x54, 0x59, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x10, 0x21, 0x12, 0x1c,
	0x0a, 0x18, 0x42, 0x47, 0x50, 0x5f, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x50,
	0x52, 0x45, 0x46, 0x49, 0x58, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x10, 0x22, 0x12, 0x19, 0x0a, 0x15,
	0x42, 0x47, 0x50, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x5f, 0x43,
	0x4f, 0x4e, 0x46, 0x49, 0x47, 0x10, 0x23, 0x12, 0x14, 0x0a, 0x10, 0x42, 0x47, 0x50, 0x5f, 0x47,
	0x45, 0x54, 0x5f, 0x4e, 0x45, 0x49, 0x47, 0x48, 0x42, 0x4f, 0x52, 0x10, 0x24, 0x12, 0x16, 0x0a,
	0x12, 0x42, 0x47, 0x50, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x4e, 0x45, 0x49, 0x47, 0x48, 0x42,
	0x4f, 0x52, 0x53, 0x10, 0x25, 0x12, 0x1d, 0x0a, 0x19, 0x42, 0x47, 0x50, 0x5f, 0x43, 0x48, 0x45,
	0x43, 0x4b, 0x5f, 0x4e, 0x45, 0x49, 0x47, 0x48, 0x42, 0x4f, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x10, 0x26, 0x12, 0x1a, 0x0a, 0x16, 0x42, 0x47, 0x50, 0x5f, 0x47, 0x45, 0x54, 0x5f,
	0x4e, 0x45, 0x49, 0x47, 0x48, 0x42, 0x4f, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x10, 0x27,
	0x12, 0x19, 0x0a, 0x15, 0x42, 0x47, 0x50, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x48, 0x45, 0x41, 0x4c,
	0x54, 0x48, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x10, 0x28, 0x12, 0x1b, 0x0a, 0x17, 0x42,
	0x47, 0x50, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x10, 0x29, 0x12, 0x1f, 0x0a, 0x1b, 0x42, 0x47, 0x50, 0x5f,
	0x47, 0x45, 0x54, 0x5f, 0x4e, 0x45, 0x49, 0x47, 0x48, 0x42, 0x4f, 0x52, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x49, 0x53, 0x54, 0x49, 0x43, 0x53, 0x10, 0x2a, 0x12, 0x1f, 0x0a, 0x1b, 0x42, 0x47, 0x50,
	0x5f, 0x47, 0x45, 0x54, 0x5f, 0x50, 0x45, 0x52, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x4e, 0x43, 0x45,
	0x5f, 0x4d, 0x45, 0x54, 0x52, 0x49, 0x43, 0x53, 0x10, 0x2b, 0x12, 0x1b, 0x0a, 0x17, 0x42, 0x47,
	0x50, 0x5f, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45,
	0x5f, 0x44, 0x41, 0x54, 0x41, 0x10, 0x2c, 0x12, 0x1f, 0x0a, 0x1b, 0x42, 0x47, 0x50, 0x5f, 0x49,
	0x53, 0x5f, 0x4e, 0x45, 0x49, 0x47, 0x48, 0x42, 0x4f, 0x52, 0x5f, 0x45, 0x53, 0x54, 0x41, 0x42,
	0x4c, 0x49, 0x53, 0x48, 0x45, 0x44, 0x10, 0x2d, 0x12, 0x1b, 0x0a, 0x17, 0x42, 0x47, 0x50, 0x5f,
	0x47, 0x45, 0x54, 0x5f, 0x4e, 0x45, 0x49, 0x47, 0x48, 0x42, 0x4f, 0x52, 0x5f, 0x55, 0x50, 0x54,
	0x49, 0x4d, 0x45, 0x10, 0x2e, 0x12, 0x21, 0x0a, 0x1d, 0x42, 0x47, 0x50, 0x5f, 0x47, 0x45, 0x54,
	0x5f, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x53, 0x5f, 0x52, 0x45, 0x43, 0x45, 0x49, 0x56, 0x45, 0x44,
	0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0x2f, 0x12, 0x23, 0x0a, 0x1f, 0x42, 0x47, 0x50, 0x5f,
	0x56, 0x41, 0x4c, 0x49, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f,
	0x43, 0x4f, 0x4e, 0x53, 0x49, 0x53, 0x54, 0x45, 0x4e, 0x43, 0x59, 0x10, 0x36, 0x12, 0x27, 0x0a,
	0x23, 0x42, 0x47, 0x50, 0x5f, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x4e, 0x45,
	0x49, 0x47, 0x48, 0x42, 0x4f, 0x52, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x41, 0x54, 0x49, 0x42, 0x49,
	0x4c, 0x49, 0x54, 0x59, 0x10, 0x37, 0x12, 0x1b, 0x0a, 0x17, 0x42, 0x47, 0x50, 0x5f, 0x56, 0x41,
	0x4c, 0x49, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x41, 0x53, 0x5f, 0x4e, 0x55, 0x4d, 0x42, 0x45, 0x52,
	0x53, 0x10, 0x38, 0x12, 0x1d, 0x0a, 0x19, 0x42, 0x47, 0x50, 0x5f, 0x56, 0x41, 0x4c, 0x49, 0x44,
	0x41, 0x54, 0x45, 0x5f, 0x49, 0x50, 0x5f, 0x41, 0x44, 0x44, 0x52, 0x45, 0x53, 0x53, 0x45, 0x53,
	0x10, 0x39, 0x12, 0x19, 0x0a, 0x15, 0x42, 0x47, 0x50, 0x5f, 0x43, 0x48, 0x45, 0x43, 0x4b, 0x5f,
	0x52, 0x45, 0x53, 0x45, 0x52, 0x56, 0x45, 0x44, 0x5f, 0x41, 0x53, 0x10, 0x3a, 0x12, 0x19, 0x0a,
	0x15, 0x42, 0x47, 0x50, 0x5f, 0x52, 0x45, 0x53, 0x45, 0x54, 0x5f, 0x42, 0x47, 0x50, 0x5f, 0x53,
	0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0x41, 0x12, 0x1e, 0x0a, 0x1a, 0x42, 0x47, 0x50, 0x5f,
	0x53, 0x4f, 0x46, 0x54, 0x5f, 0x52, 0x45, 0x53, 0x45, 0x54, 0x5f, 0x42, 0x47, 0x50, 0x5f, 0x53,
	0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0x42, 0x12, 0x16, 0x0a, 0x12, 0x42, 0x47, 0x50, 0x5f,
	0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x10, 0x43,
	0x12, 0x19, 0x0a, 0x15, 0x42, 0x47, 0x50, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x4e, 0x45, 0x54, 0x57,
	0x4f, 0x52, 0x4b, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0x44, 0x12, 0x21, 0x0a, 0x1d, 0x42,
	0x47, 0x50, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x52, 0x45, 0x44, 0x49, 0x53, 0x54, 0x52, 0x49, 0x42,
	0x55, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x10, 0x45, 0x12, 0x18,
	0x0a, 0x14, 0x42, 0x47, 0x50, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52,
	0x4b, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x10, 0x46, 0x12, 0x13, 0x0a, 0x0f, 0x42, 0x47, 0x50, 0x5f,
	0x47, 0x45, 0x54, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x10, 0x47, 0x2a, 0x54, 0x0a,
	0x11, 0x42, 0x67, 0x70, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x4d, 0x61, 0x70, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x15, 0x0a, 0x11, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x5f, 0x4d, 0x41, 0x50, 0x5f,
	0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x52, 0x4f, 0x55,
	0x54, 0x45, 0x5f, 0x4d, 0x41, 0x50, 0x5f, 0x50, 0x45, 0x52, 0x4d, 0x49, 0x54, 0x10, 0x01, 0x12,
	0x12, 0x0a, 0x0e, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x5f, 0x4d, 0x41, 0x50, 0x5f, 0x44, 0x45, 0x4e,
	0x59, 0x10, 0x02, 0x2a, 0x86, 0x02, 0x0a, 0x13, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x0e, 0x53,
	0x54, 0x41, 0x54, 0x49, 0x43, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12,
	0x15, 0x0a, 0x11, 0x53, 0x54, 0x41, 0x54, 0x49, 0x43, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x52, 0x4f,
	0x55, 0x54, 0x45, 0x53, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x54, 0x41, 0x54, 0x49, 0x43,
	0x5f, 0x41, 0x44, 0x44, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x10, 0x02, 0x12, 0x17, 0x0a, 0x13,
	0x53, 0x54, 0x41, 0x54, 0x49, 0x43, 0x5f, 0x52, 0x45, 0x4d, 0x4f, 0x56, 0x45, 0x5f, 0x52, 0x4f,
	0x55, 0x54, 0x45, 0x10, 0x03, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x54, 0x41, 0x54, 0x49, 0x43, 0x5f,
	0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x10, 0x04, 0x12, 0x15,
	0x0a, 0x11, 0x53, 0x54, 0x41, 0x54, 0x49, 0x43, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x43, 0x4f, 0x4e,
	0x46, 0x49, 0x47, 0x10, 0x05, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x54, 0x41, 0x54, 0x49, 0x43, 0x5f,
	0x53, 0x45, 0x54, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x10, 0x06, 0x12, 0x1b, 0x0a, 0x17,
	0x53, 0x54, 0x41, 0x54, 0x49, 0x43, 0x5f, 0x43, 0x4c, 0x45, 0x41, 0x52, 0x5f, 0x41, 0x4c, 0x4c,
	0x5f, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x53, 0x10, 0x07, 0x12, 0x19, 0x0a, 0x15, 0x53, 0x54, 0x41,
	0x54, 0x49, 0x43, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x49, 0x53, 0x54, 0x49,
	0x43, 0x53, 0x10, 0x08, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x54, 0x41, 0x54, 0x49, 0x43, 0x5f, 0x53,
	0x48, 0x4f, 0x57, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x53, 0x10, 0x09, 0x2a, 0xb2, 0x01, 0x0a,
	0x0f, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x18, 0x0a, 0x14, 0x53, 0x54, 0x41, 0x54, 0x49, 0x43, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x45,
	0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x53, 0x54,
	0x41, 0x54, 0x49, 0x43, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x5f, 0x55, 0x4e, 0x49, 0x43, 0x41,
	0x53, 0x54, 0x10, 0x01, 0x12, 0x1a, 0x0a, 0x16, 0x53, 0x54, 0x41, 0x54, 0x49, 0x43, 0x5f, 0x52,
	0x4f, 0x55, 0x54, 0x45, 0x5f, 0x42, 0x4c, 0x41, 0x43, 0x4b, 0x48, 0x4f, 0x4c, 0x45, 0x10, 0x02,
	0x12, 0x1c, 0x0a, 0x18, 0x53, 0x54, 0x41, 0x54, 0x49, 0x43, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x45,
	0x5f, 0x55, 0x4e, 0x52, 0x45, 0x41, 0x43, 0x48, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x03, 0x12, 0x19,
	0x0a, 0x15, 0x53, 0x54, 0x41, 0x54, 0x49, 0x43, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x5f, 0x50,
	0x52, 0x4f, 0x48, 0x49, 0x42, 0x49, 0x54, 0x10, 0x04, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x54, 0x41,
	0x54, 0x49, 0x43, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x5f, 0x4c, 0x4f, 0x43, 0x41, 0x4c, 0x10,
	0x05, 0x2a, 0x6d, 0x0a, 0x16, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x4e, 0x65, 0x78, 0x74, 0x68,
	0x6f, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x4e,
	0x45, 0x58, 0x54, 0x48, 0x4f, 0x50, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x55, 0x4e, 0x4b,
	0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x1b, 0x0a, 0x17, 0x4e, 0x45, 0x58, 0x54, 0x48, 0x4f,
	0x50, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x4d, 0x55, 0x4c, 0x54, 0x49, 0x50, 0x41, 0x54,
	0x48, 0x10, 0x01, 0x12, 0x1b, 0x0a, 0x17, 0x4e, 0x45, 0x58, 0x54, 0x48, 0x4f, 0x50, 0x5f, 0x47,
	0x52, 0x4f, 0x55, 0x50, 0x5f, 0x52, 0x45, 0x53, 0x49, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x10, 0x02,
	0x2a, 0xb5, 0x01, 0x0a, 0x14, 0x42, 0x67, 0x70, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x17, 0x0a, 0x13, 0x54, 0x52, 0x41,
	0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e,
	0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x1b, 0x0a, 0x17, 0x54,
	0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x4e, 0x5f, 0x50, 0x52,
	0x4f, 0x47, 0x52, 0x45, 0x53, 0x53, 0x10, 0x02, 0x12, 0x19, 0x0a, 0x15, 0x54, 0x52, 0x41, 0x4e,
	0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x49, 0x54, 0x54, 0x45,
	0x44, 0x10, 0x03, 0x12, 0x1b, 0x0a, 0x17, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x52, 0x4f, 0x4c, 0x4c, 0x45, 0x44, 0x5f, 0x42, 0x41, 0x43, 0x4b, 0x10, 0x04,
	0x12, 0x16, 0x0a, 0x12, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x05, 0x42, 0x2d, 0x5a, 0x2b, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x45, 0x6c, 0x63, 0x68, 0x69, 0x54, 0x68, 0x65, 0x47,
	0x72, 0x65, 0x61, 0x74, 0x2f, 0x65, 0x6c, 0x63, 0x68, 0x69, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_client_frr_proto_rawDescOnce sync.Once
	file_client_frr_proto_rawDescData = file_client_frr_proto_rawDesc
)

func file_client_frr_proto_rawDescGZIP() []byte {
	file_client_frr_proto_rawDescOnce.Do(func() {
		file_client_frr_proto_rawDescData = protoimpl.X.CompressGZIP(file_client_frr_proto_rawDescData)
	})
	return file_client_frr_proto_rawDescData
}

var file_client_frr_proto_enumTypes = make([]protoimpl.EnumInfo, 7)
var file_client_frr_proto_msgTypes = make([]protoimpl.MessageInfo, 85)
var file_client_frr_proto_goTypes = []any{
	(FrrProtocolType)(0),                 // 0: client.FrrProtocolType
	(BgpOperationType)(0),                // 1: client.BgpOperationType
	(BgpRouteMapAction)(0),               // 2: client.BgpRouteMapAction
	(StaticOperationType)(0),             // 3: client.StaticOperationType
	(StaticRouteType)(0),                 // 4: client.StaticRouteType
	(StaticNexthopGroupType)(0),          // 5: client.StaticNexthopGroupType
	(BgpTransactionStatus)(0),            // 6: client.BgpTransactionStatus
	(*BgpConfig)(nil),                    // 7: client.BgpConfig
	(*BgpNeighbor)(nil),                  // 8: client.BgpNeighbor
	(*BgpNeighborTimers)(nil),            // 9: client.BgpNeighborTimers
	(*BgpNeighborRouteMaps)(nil),         // 10: client.BgpNeighborRouteMaps
	(*BgpNeighborPrefixLists)(nil),       // 11: client.BgpNeighborPrefixLists
	(*BgpRouteMap)(nil),                  // 12: client.BgpRouteMap
	(*BgpRouteMapMatch)(nil),             // 13: client.BgpRouteMapMatch
	(*BgpRouteMapSet)(nil),               // 14: client.BgpRouteMapSet
	(*BgpCommunityList)(nil),             // 15: client.BgpCommunityList
	(*BgpPrefixList)(nil),                // 16: client.BgpPrefixList
	(*ShowBgpSummary)(nil),               // 17: client.ShowBgpSummary
	(*BgpSummaryInstance)(nil),           // 18: client.BgpSummaryInstance
	(*BgpPeerSummaryInfo)(nil),           // 19: client.BgpPeerSummaryInfo
	(*ShowBgpNeighbors)(nil),             // 20: client.ShowBgpNeighbors
	(*BgpNeighborInfo)(nil),              // 21: client.BgpNeighborInfo
	(*BgpGracefulRestartInfo)(nil),       // 22: client.BgpGracefulRestartInfo
	(*BgpGracefulRestartTimers)(nil),     // 23: client.BgpGracefulRestartTimers
	(*BgpMessageStats)(nil),              // 24: client.BgpMessageStats
	(*BgpPrefixStats)(nil),               // 25: client.BgpPrefixStats
	(*BgpAddressFamilyInfo)(nil),         // 26: client.BgpAddressFamilyInfo
	(*BgpIpv4UnicastInfo)(nil),           // 27: client.BgpIpv4UnicastInfo
	(*ShowBgpRoutes)(nil),                // 28: client.ShowBgpRoutes
	(*BgpRouteInfo)(nil),                 // 29: client.BgpRouteInfo
	(*BgpPath)(nil),                      // 30: client.BgpPath
	(*BgpState)(nil),                     // 31: client.BgpState
	(*BgpNeighborState)(nil),             // 32: client.BgpNeighborState
	(*BgpStatistics)(nil),                // 33: client.BgpStatistics
	(*BgpGlobalStatistics)(nil),          // 34: client.BgpGlobalStatistics
	(*BgpTableStatistics)(nil),           // 35: client.BgpTableStatistics
	(*BgpMessageStatistics)(nil),         // 36: client.BgpMessageStatistics
	(*BgpNeighborStatistics)(nil),        // 37: client.BgpNeighborStatistics
	(*StaticConfig)(nil),                 // 38: client.StaticConfig
	(*StaticGlobalConfig)(nil),           // 39: client.StaticGlobalConfig
	(*StaticRoute)(nil),                  // 40: client.StaticRoute
	(*StaticRouteFlags)(nil),             // 41: client.StaticRouteFlags
	(*StaticRouteTable)(nil),             // 42: client.StaticRouteTable
	(*StaticNexthopGroup)(nil),           // 43: client.StaticNexthopGroup
	(*StaticNexthop)(nil),                // 44: client.StaticNexthop
	(*ShowStaticRoutes)(nil),             // 45: client.ShowStaticRoutes
	(*StaticRouteEntry)(nil),             // 46: client.StaticRouteEntry
	(*StaticRouteNexthop)(nil),           // 47: client.StaticRouteNexthop
	(*StaticStatistics)(nil),             // 48: client.StaticStatistics
	(*StaticTableStatistics)(nil),        // 49: client.StaticTableStatistics
	(*StaticRouteTypeStatistics)(nil),    // 50: client.StaticRouteTypeStatistics
	(*StaticNexthopGroupStatistics)(nil), // 51: client.StaticNexthopGroupStatistics
	(*RequestBgp)(nil),                   // 52: client.RequestBgp
	(*ResponseBgp)(nil),                  // 53: client.ResponseBgp
	(*RequestStatic)(nil),                // 54: client.RequestStatic
	(*ResponseStatic)(nil),               // 55: client.ResponseStatic
	(*BgpStatus)(nil),                    // 56: client.BgpStatus
	(*BgpPerformanceMetrics)(nil),        // 57: client.BgpPerformanceMetrics
	(*BgpHealthStatus)(nil),              // 58: client.BgpHealthStatus
	(*BgpCacheInfo)(nil),                 // 59: client.BgpCacheInfo
	(*BgpSummary)(nil),                   // 60: client.BgpSummary
	(*BgpPeerSummary)(nil),               // 61: client.BgpPeerSummary
	(*BgpTransactionOperation)(nil),      // 62: client.BgpTransactionOperation
	(*BgpTransactionResponse)(nil),       // 63: client.BgpTransactionResponse
	(*BgpValidationRequest)(nil),         // 64: client.BgpValidationRequest
	(*BgpValidationResponse)(nil),        // 65: client.BgpValidationResponse
	(*BgpValidationError)(nil),           // 66: client.BgpValidationError
	(*BgpValidationWarning)(nil),         // 67: client.BgpValidationWarning
	(*BgpProtocolStatus)(nil),            // 68: client.BgpProtocolStatus
	(*BgpRedistributionStatus)(nil),      // 69: client.BgpRedistributionStatus
	(*BgpRedistributionMetrics)(nil),     // 70: client.BgpRedistributionMetrics
	(*BgpNetworkUpdate)(nil),             // 71: client.BgpNetworkUpdate
	(*BgpConfigConsistency)(nil),         // 72: client.BgpConfigConsistency
	(*BgpNeighborCompatibility)(nil),     // 73: client.BgpNeighborCompatibility
	(*BgpASNumbersValidation)(nil),       // 74: client.BgpASNumbersValidation
	(*BgpPolicyConfig)(nil),              // 75: client.BgpPolicyConfig
	nil,                                  // 76: client.ShowBgpSummary.InstancesEntry
	nil,                                  // 77: client.BgpSummaryInstance.PeersEntry
	nil,                                  // 78: client.ShowBgpNeighbors.NeighborsEntry
	nil,                                  // 79: client.BgpGracefulRestartInfo.EndOfRibSendEntry
	nil,                                  // 80: client.BgpGracefulRestartInfo.EndOfRibRecvEntry
	nil,                                  // 81: client.ShowBgpRoutes.RoutesEntry
	nil,                                  // 82: client.ShowStaticRoutes.RoutesEntry
	nil,                                  // 83: client.ResponseBgp.CacheStatisticsEntry
	nil,                                  // 84: client.ResponseBgp.CacheHitRatiosEntry
	nil,                                  // 85: client.BgpStatus.CacheStatisticsEntry
	nil,                                  // 86: client.BgpStatus.NetworkMetricsEntry
	nil,                                  // 87: client.BgpPerformanceMetrics.CacheHitRatiosEntry
	nil,                                  // 88: client.BgpValidationResponse.ValidationDetailsEntry
	nil,                                  // 89: client.BgpProtocolStatus.DaemonStatisticsEntry
	nil,                                  // 90: client.BgpRedistributionStatus.RedistributionMetricsEntry
	nil,                                  // 91: client.BgpPolicyConfig.PolicyStatisticsEntry
}
var file_client_frr_proto_depIdxs = []int32{
	8,   // 0: client.BgpConfig.neighbors:type_name -> client.BgpNeighbor
	12,  // 1: client.BgpConfig.route_maps:type_name -> client.BgpRouteMap
	15,  // 2: client.BgpConfig.community_lists:type_name -> client.BgpCommunityList
	16,  // 3: client.BgpConfig.prefix_lists:type_name -> client.BgpPrefixList
	9,   // 4: client.BgpNeighbor.timers:type_name -> client.BgpNeighborTimers
	10,  // 5: client.BgpNeighbor.route_maps:type_name -> client.BgpNeighborRouteMaps
	11,  // 6: client.BgpNeighbor.prefix_lists:type_name -> client.BgpNeighborPrefixLists
	2,   // 7: client.BgpRouteMap.action:type_name -> client.BgpRouteMapAction
	13,  // 8: client.BgpRouteMap.match_conditions:type_name -> client.BgpRouteMapMatch
	14,  // 9: client.BgpRouteMap.set_actions:type_name -> client.BgpRouteMapSet
	2,   // 10: client.BgpCommunityList.action:type_name -> client.BgpRouteMapAction
	2,   // 11: client.BgpPrefixList.action:type_name -> client.BgpRouteMapAction
	76,  // 12: client.ShowBgpSummary.instances:type_name -> client.ShowBgpSummary.InstancesEntry
	77,  // 13: client.BgpSummaryInstance.peers:type_name -> client.BgpSummaryInstance.PeersEntry
	78,  // 14: client.ShowBgpNeighbors.neighbors:type_name -> client.ShowBgpNeighbors.NeighborsEntry
	22,  // 15: client.BgpNeighborInfo.graceful_restart_info:type_name -> client.BgpGracefulRestartInfo
	24,  // 16: client.BgpNeighborInfo.message_stats:type_name -> client.BgpMessageStats
	25,  // 17: client.BgpNeighborInfo.prefix_stats:type_name -> client.BgpPrefixStats
	26,  // 18: client.BgpNeighborInfo.address_family_info:type_name -> client.BgpAddressFamilyInfo
	79,  // 19: client.BgpGracefulRestartInfo.end_of_rib_send:type_name -> client.BgpGracefulRestartInfo.EndOfRibSendEntry
	80,  // 20: client.BgpGracefulRestartInfo.end_of_rib_recv:type_name -> client.BgpGracefulRestartInfo.EndOfRibRecvEntry
	23,  // 21: client.BgpGracefulRestartInfo.timers:type_name -> client.BgpGracefulRestartTimers
	27,  // 22: client.BgpAddressFamilyInfo.ipv4_unicast:type_name -> client.BgpIpv4UnicastInfo
	81,  // 23: client.ShowBgpRoutes.routes:type_name -> client.ShowBgpRoutes.RoutesEntry
	30,  // 24: client.BgpRouteInfo.paths:type_name -> client.BgpPath
	32,  // 25: client.BgpState.neighbor_states:type_name -> client.BgpNeighborState
	34,  // 26: client.BgpStatistics.global_stats:type_name -> client.BgpGlobalStatistics
	35,  // 27: client.BgpStatistics.table_stats:type_name -> client.BgpTableStatistics
	36,  // 28: client.BgpStatistics.message_stats:type_name -> client.BgpMessageStatistics
	37,  // 29: client.BgpStatistics.neighbor_stats:type_name -> client.BgpNeighborStatistics
	40,  // 30: client.StaticConfig.routes:type_name -> client.StaticRoute
	42,  // 31: client.StaticConfig.route_tables:type_name -> client.StaticRouteTable
	43,  // 32: client.StaticConfig.nexthop_groups:type_name -> client.StaticNexthopGroup
	39,  // 33: client.StaticConfig.global_config:type_name -> client.StaticGlobalConfig
	4,   // 34: client.StaticRoute.route_type:type_name -> client.StaticRouteType
	41,  // 35: client.StaticRoute.flags:type_name -> client.StaticRouteFlags
	40,  // 36: client.StaticRouteTable.routes:type_name -> client.StaticRoute
	44,  // 37: client.StaticNexthopGroup.nexthops:type_name -> client.StaticNexthop
	5,   // 38: client.StaticNexthopGroup.type:type_name -> client.StaticNexthopGroupType
	82,  // 39: client.ShowStaticRoutes.routes:type_name -> client.ShowStaticRoutes.RoutesEntry
	47,  // 40: client.StaticRouteEntry.nexthops:type_name -> client.StaticRouteNexthop
	49,  // 41: client.StaticStatistics.table_stats:type_name -> client.StaticTableStatistics
	50,  // 42: client.StaticStatistics.route_type_stats:type_name -> client.StaticRouteTypeStatistics
	51,  // 43: client.StaticStatistics.nexthop_group_stats:type_name -> client.StaticNexthopGroupStatistics
	1,   // 44: client.RequestBgp.operation:type_name -> client.BgpOperationType
	7,   // 45: client.RequestBgp.config:type_name -> client.BgpConfig
	8,   // 46: client.RequestBgp.neighbor:type_name -> client.BgpNeighbor
	12,  // 47: client.RequestBgp.route_map:type_name -> client.BgpRouteMap
	15,  // 48: client.RequestBgp.community_list:type_name -> client.BgpCommunityList
	16,  // 49: client.RequestBgp.prefix_list:type_name -> client.BgpPrefixList
	62,  // 50: client.RequestBgp.transaction_operation:type_name -> client.BgpTransactionOperation
	64,  // 51: client.RequestBgp.validation_request:type_name -> client.BgpValidationRequest
	1,   // 52: client.ResponseBgp.operation:type_name -> client.BgpOperationType
	7,   // 53: client.ResponseBgp.config:type_name -> client.BgpConfig
	8,   // 54: client.ResponseBgp.neighbors:type_name -> client.BgpNeighbor
	31,  // 55: client.ResponseBgp.state:type_name -> client.BgpState
	33,  // 56: client.ResponseBgp.statistics:type_name -> client.BgpStatistics
	12,  // 57: client.ResponseBgp.route_maps:type_name -> client.BgpRouteMap
	15,  // 58: client.ResponseBgp.community_lists:type_name -> client.BgpCommunityList
	16,  // 59: client.ResponseBgp.prefix_lists:type_name -> client.BgpPrefixList
	17,  // 60: client.ResponseBgp.show_summary:type_name -> client.ShowBgpSummary
	20,  // 61: client.ResponseBgp.show_neighbors:type_name -> client.ShowBgpNeighbors
	28,  // 62: client.ResponseBgp.show_routes:type_name -> client.ShowBgpRoutes
	56,  // 63: client.ResponseBgp.status:type_name -> client.BgpStatus
	8,   // 64: client.ResponseBgp.neighbor:type_name -> client.BgpNeighbor
	37,  // 65: client.ResponseBgp.neighbor_statistics:type_name -> client.BgpNeighborStatistics
	58,  // 66: client.ResponseBgp.health_status:type_name -> client.BgpHealthStatus
	68,  // 67: client.ResponseBgp.protocol_status:type_name -> client.BgpProtocolStatus
	57,  // 68: client.ResponseBgp.performance_metrics:type_name -> client.BgpPerformanceMetrics
	63,  // 69: client.ResponseBgp.transaction_response:type_name -> client.BgpTransactionResponse
	6,   // 70: client.ResponseBgp.transaction_status:type_name -> client.BgpTransactionStatus
	65,  // 71: client.ResponseBgp.validation_response:type_name -> client.BgpValidationResponse
	83,  // 72: client.ResponseBgp.cache_statistics:type_name -> client.ResponseBgp.CacheStatisticsEntry
	84,  // 73: client.ResponseBgp.cache_hit_ratios:type_name -> client.ResponseBgp.CacheHitRatiosEntry
	69,  // 74: client.ResponseBgp.redistribution_status:type_name -> client.BgpRedistributionStatus
	3,   // 75: client.RequestStatic.operation:type_name -> client.StaticOperationType
	38,  // 76: client.RequestStatic.config:type_name -> client.StaticConfig
	40,  // 77: client.RequestStatic.route:type_name -> client.StaticRoute
	42,  // 78: client.RequestStatic.route_table:type_name -> client.StaticRouteTable
	43,  // 79: client.RequestStatic.nexthop_group:type_name -> client.StaticNexthopGroup
	3,   // 80: client.ResponseStatic.operation:type_name -> client.StaticOperationType
	38,  // 81: client.ResponseStatic.config:type_name -> client.StaticConfig
	40,  // 82: client.ResponseStatic.routes:type_name -> client.StaticRoute
	42,  // 83: client.ResponseStatic.route_tables:type_name -> client.StaticRouteTable
	43,  // 84: client.ResponseStatic.nexthop_groups:type_name -> client.StaticNexthopGroup
	48,  // 85: client.ResponseStatic.statistics:type_name -> client.StaticStatistics
	45,  // 86: client.ResponseStatic.show_routes:type_name -> client.ShowStaticRoutes
	85,  // 87: client.BgpStatus.cache_statistics:type_name -> client.BgpStatus.CacheStatisticsEntry
	86,  // 88: client.BgpStatus.network_metrics:type_name -> client.BgpStatus.NetworkMetricsEntry
	57,  // 89: client.BgpStatus.performance_metrics:type_name -> client.BgpPerformanceMetrics
	58,  // 90: client.BgpStatus.health_status:type_name -> client.BgpHealthStatus
	87,  // 91: client.BgpPerformanceMetrics.cache_hit_ratios:type_name -> client.BgpPerformanceMetrics.CacheHitRatiosEntry
	61,  // 92: client.BgpSummary.peer_summary:type_name -> client.BgpPeerSummary
	7,   // 93: client.BgpTransactionOperation.config:type_name -> client.BgpConfig
	8,   // 94: client.BgpTransactionOperation.neighbor:type_name -> client.BgpNeighbor
	12,  // 95: client.BgpTransactionOperation.route_map:type_name -> client.BgpRouteMap
	15,  // 96: client.BgpTransactionOperation.community_list:type_name -> client.BgpCommunityList
	16,  // 97: client.BgpTransactionOperation.prefix_list:type_name -> client.BgpPrefixList
	7,   // 98: client.BgpValidationRequest.config:type_name -> client.BgpConfig
	8,   // 99: client.BgpValidationRequest.neighbor:type_name -> client.BgpNeighbor
	12,  // 100: client.BgpValidationRequest.route_map:type_name -> client.BgpRouteMap
	15,  // 101: client.BgpValidationRequest.community_list:type_name -> client.BgpCommunityList
	16,  // 102: client.BgpValidationRequest.prefix_list:type_name -> client.BgpPrefixList
	66,  // 103: client.BgpValidationResponse.errors:type_name -> client.BgpValidationError
	67,  // 104: client.BgpValidationResponse.warnings:type_name -> client.BgpValidationWarning
	88,  // 105: client.BgpValidationResponse.validation_details:type_name -> client.BgpValidationResponse.ValidationDetailsEntry
	89,  // 106: client.BgpProtocolStatus.daemon_statistics:type_name -> client.BgpProtocolStatus.DaemonStatisticsEntry
	90,  // 107: client.BgpRedistributionStatus.redistribution_metrics:type_name -> client.BgpRedistributionStatus.RedistributionMetricsEntry
	12,  // 108: client.BgpPolicyConfig.route_maps:type_name -> client.BgpRouteMap
	15,  // 109: client.BgpPolicyConfig.community_lists:type_name -> client.BgpCommunityList
	16,  // 110: client.BgpPolicyConfig.prefix_lists:type_name -> client.BgpPrefixList
	91,  // 111: client.BgpPolicyConfig.policy_statistics:type_name -> client.BgpPolicyConfig.PolicyStatisticsEntry
	18,  // 112: client.ShowBgpSummary.InstancesEntry.value:type_name -> client.BgpSummaryInstance
	19,  // 113: client.BgpSummaryInstance.PeersEntry.value:type_name -> client.BgpPeerSummaryInfo
	21,  // 114: client.ShowBgpNeighbors.NeighborsEntry.value:type_name -> client.BgpNeighborInfo
	29,  // 115: client.ShowBgpRoutes.RoutesEntry.value:type_name -> client.BgpRouteInfo
	46,  // 116: client.ShowStaticRoutes.RoutesEntry.value:type_name -> client.StaticRouteEntry
	70,  // 117: client.BgpRedistributionStatus.RedistributionMetricsEntry.value:type_name -> client.BgpRedistributionMetrics
	118, // [118:118] is the sub-list for method output_type
	118, // [118:118] is the sub-list for method input_type
	118, // [118:118] is the sub-list for extension type_name
	118, // [118:118] is the sub-list for extension extendee
	0,   // [0:118] is the sub-list for field type_name
}

func init() { file_client_frr_proto_init() }
func file_client_frr_proto_init() {
	if File_client_frr_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_client_frr_proto_rawDesc,
			NumEnums:      7,
			NumMessages:   85,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_client_frr_proto_goTypes,
		DependencyIndexes: file_client_frr_proto_depIdxs,
		EnumInfos:         file_client_frr_proto_enumTypes,
		MessageInfos:      file_client_frr_proto_msgTypes,
	}.Build()
	File_client_frr_proto = out.File
	file_client_frr_proto_rawDesc = nil
	file_client_frr_proto_goTypes = nil
	file_client_frr_proto_depIdxs = nil
}
