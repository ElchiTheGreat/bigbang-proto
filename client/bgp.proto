syntax = "proto3";

package client;

option go_package = "github.com/ElchiTheGreat/elchi-proto/client";

// BGP temel konfigürasyon
message BgpConfig {
  uint32 router_id = 1;                    // Router ID (IP formated uint32)
  uint32 autonomous_system = 2;            // AS Number
  bool redistribute_connected = 3;         // Redistribute connected routes
  bool redistribute_static = 4;            // Redistribute static routes
  repeated BgpNeighbor neighbors = 5;      // BGP neighbors
  repeated BgpNetwork networks = 6;        // Announce networks
  BgpGlobalSettings global_settings = 7;   // Global BGP settings
}

// BGP neighbor configuration
message BgpNeighbor {
  string peer_ip = 1;                      // Neighbor IP address
  uint32 remote_as = 2;                    // Remote AS number
  string description = 3;                  // Neighbor açıklaması
  bool enabled = 4;                        // Neighbor aktif mi?
  
  // Authentication
  string password = 5;                     // BGP MD5 password
  
  // Timers
  uint32 keepalive_time = 6;              // Keepalive timer (saniye)
  uint32 hold_time = 7;                   // Hold timer (saniye)
  uint32 connect_retry_interval = 8;       // Connect retry timer
  
  // Route filtering
  repeated RouteMap route_map_in = 9;      // Incoming route-map
  repeated RouteMap route_map_out = 10;    // Outgoing route-map
  repeated PrefixList prefix_list_in = 11; // Incoming prefix-list
  repeated PrefixList prefix_list_out = 12;// Outgoing prefix-list
  
  // Neighbor kapasiteleri
  BgpNeighborCapabilities capabilities = 13;
  
  // Address families
  repeated AddressFamily address_families = 14;
  
  // Soft reconfiguration
  bool soft_reconfiguration_inbound = 15;
  
  // Next-hop-self
  bool next_hop_self = 16;
  
  // Remove private AS
  bool remove_private_as = 17;
  
  // Maximum prefixes
  uint32 maximum_prefix_limit = 18;
  uint32 maximum_prefix_threshold = 19;    // Warning threshold %
  bool maximum_prefix_restart = 20;        // Auto restart after limit
  uint32 maximum_prefix_restart_interval = 21; // Restart interval (dakika)
}

// BGP neighbor capabilities
message BgpNeighborCapabilities {
  bool graceful_restart = 1;               // Graceful restart support
  bool route_refresh = 2;                  // Route refresh support
  bool four_octet_as = 3;                  // 4-byte AS number support
  bool add_path = 4;                       // Add-path support
  bool extended_nexthop = 5;               // Extended next-hop support
}

// Address Family configuration
message AddressFamily {
  enum Type {
    IPV4_UNICAST = 0;
    IPV6_UNICAST = 1;
    IPV4_MULTICAST = 2;
    IPV6_MULTICAST = 3;
    VPNV4_UNICAST = 4;
    VPNV6_UNICAST = 5;
    EVPN = 6;
  }
  
  Type family_type = 1;
  bool activated = 2;                      // Is this AF active?
  bool send_community = 3;                 // Send community attribute
  bool send_extended_community = 4;        // Send extended community
  bool send_large_community = 5;           // Send large community
  bool reflector_client = 6;               // Route reflector client
  bool next_hop_unchanged = 7;             // Next-hop change
  string route_map_in = 8;                 // AF-specific route-map in
  string route_map_out = 9;                // AF-specific route-map out
}

// Announce edilecek network
message BgpNetwork {
  string network = 1;                      // Network CIDR (e.g. 192.168.1.0/24)
  string route_map = 2;                    // Optional route-map
  uint32 backdoor = 3;                     // Backdoor route (administrative distance)
}

// Global BGP settings
message BgpGlobalSettings {
  bool deterministic_med = 1;              // Deterministic MED
  bool always_compare_med = 2;             // Always compare MED
  bool bestpath_as_path_ignore = 3;        // AS-path ignore in bestpath
  bool bestpath_as_path_confed = 4;        // AS-path confederation in bestpath
  bool bestpath_med_confed = 5;            // MED confederation in bestpath
  bool bestpath_med_missing_as_worst = 6;  // Missing MED as worst
  bool no_client_to_client_reflection = 7; // Disable client-to-client reflection
  string cluster_id = 8;                   // Route reflector cluster ID
  bool graceful_restart = 9;               // Global graceful restart
  uint32 graceful_restart_time = 10;       // Graceful restart timer
  uint32 stalepath_time = 11;              // Stale path timer
  bool log_neighbor_changes = 12;          // Log neighbor state changes
  uint32 default_local_preference = 13;    // Default local preference
  repeated string confederation_peers = 14; // Confederation peers
  uint32 confederation_identifier = 15;     // Confederation identifier
}

// Route-map configuration
message RouteMap {
  string name = 1;                         // Route-map name
  uint32 sequence = 2;                     // Sequence number
  enum Action {
    PERMIT = 0;
    DENY = 1;
  }
  Action action = 3;                       // Permit/Deny
  repeated MatchCondition match_conditions = 4; // Match conditions
  repeated SetAction set_actions = 5;      // Set actions
}

// Route-map match conditions
message MatchCondition {
  enum Type {
    IP_ADDRESS = 0;                        // Match IP address
    IP_ADDRESS_PREFIX_LIST = 1;            // Match IP address prefix-list
    AS_PATH = 2;                           // Match AS path
    COMMUNITY = 3;                         // Match community
    EXTENDED_COMMUNITY = 4;                // Match extended community
    LARGE_COMMUNITY = 5;                   // Match large community
    ORIGIN = 6;                            // Match origin
    METRIC = 7;                            // Match metric (MED)
    LOCAL_PREFERENCE = 8;                  // Match local preference
    TAG = 9;                               // Match tag
    INTERFACE = 10;                        // Match interface
  }
  
  Type condition_type = 1;
  string value = 2;                        // Match value
}

// Route-map set actions
message SetAction {
  enum Type {
    LOCAL_PREFERENCE = 0;                  // Set local preference
    METRIC = 1;                            // Set metric (MED)
    NEXT_HOP = 2;                          // Set next-hop
    AS_PATH_PREPEND = 3;                   // AS path prepend
    COMMUNITY = 4;                         // Set community
    EXTENDED_COMMUNITY = 5;                // Set extended community
    LARGE_COMMUNITY = 6;                   // Set large community
    ORIGIN = 7;                            // Set origin
    WEIGHT = 8;                            // Set weight
    TAG = 9;                               // Set tag
    ATOMIC_AGGREGATE = 10;                 // Set atomic aggregate
  }
  
  Type action_type = 1;
  string value = 2;                        // Set value
}

// Prefix-list configuration
message PrefixList {
  string name = 1;                         // Prefix-list name
  uint32 sequence = 2;                     // Sequence number
  enum Action {
    PERMIT = 0;
    DENY = 1;
  }
  Action action = 3;                       // Permit/Deny
  string prefix = 4;                       // Network prefix (CIDR)
  uint32 ge = 5;                           // Greater or equal prefix length
  uint32 le = 6;                           // Less or equal prefix length
}

// BGP state information (read-only)
message BgpState {
  bool running = 1;                        // Is BGP daemon running?
  string router_id = 2;                    // Active router ID
  uint32 autonomous_system = 3;            // Active AS number
  repeated BgpNeighborState neighbor_states = 4; // Neighbor states
  repeated BgpRoute routes = 5;            // BGP routing table
  BgpStatistics statistics = 6;            // BGP statistics
}

// BGP neighbor state
message BgpNeighborState {
  string peer_ip = 1;                      // Neighbor IP
  uint32 remote_as = 2;                    // Remote AS
  string state = 3;                        // BGP state (Idle, Connect, OpenSent, etc.)
  uint64 uptime = 4;                       // Uptime (seconds)
  uint64 prefixes_received = 5;            // Received prefixes
  uint64 prefixes_sent = 6;                // Sent prefixes
  string last_error = 7;                   // Last error message
  repeated AddressFamilyState address_family_states = 8; // AF durumları
}

// Address Family state
message AddressFamilyState {
  AddressFamily.Type family_type = 1;
  bool active = 2;
  uint64 prefixes_received = 3;
  uint64 prefixes_sent = 4;
  uint64 prefixes_accepted = 5;
  uint64 prefixes_filtered = 6;
}

// BGP route information
message BgpRoute {
  string network = 1;                      // Network CIDR
  string next_hop = 2;                     // Next-hop IP
  uint32 metric = 3;                       // MED value
  uint32 local_preference = 4;             // Local preference
  string as_path = 5;                      // AS path string
  string origin = 6;                       // Origin (i, e, ?)
  repeated string communities = 7;         // Community list
  bool best = 8;                           // Best path?
  string source = 9;                       // Route source (neighbor IP)
  uint64 age = 10;                         // Route age (seconds)
}

// BGP statistics
message BgpStatistics {
  uint64 total_neighbors = 1;              // Total neighbors
  uint64 established_neighbors = 2;        // Established neighbors
  uint64 total_routes = 3;                 // Total routes
  uint64 best_routes = 4;                  // Best routes
  uint64 memory_usage = 5;                 // Memory usage (bytes)
  uint64 update_messages_sent = 6;         // Sent UPDATE messages
  uint64 update_messages_received = 7;     // Received UPDATE messages
  uint64 notification_messages_sent = 8;   // Sent NOTIFICATION messages
  uint64 notification_messages_received = 9; // Received NOTIFICATION messages
}


// BGP Operation Types
enum BgpOperationType {
  // Configuration operations
  BGP_GET_CONFIG = 0;                      // Get BGP configuration
  BGP_SET_CONFIG = 1;                      // Set BGP configuration
  BGP_GET_STATE = 2;                       // Get BGP state
  
  // Neighbor operations  
  BGP_ADD_NEIGHBOR = 10;                   // Add BGP neighbor
  BGP_REMOVE_NEIGHBOR = 11;                // Remove BGP neighbor
  BGP_UPDATE_NEIGHBOR = 12;                // Update BGP neighbor
  BGP_RESET_NEIGHBOR = 13;                 // Reset BGP neighbor (clear)
  BGP_GET_NEIGHBORS = 14;                  // Get BGP neighbor states
  
  // Network operations
  BGP_ADD_NETWORK = 20;                    // Add BGP network announce
  BGP_REMOVE_NETWORK = 21;                 // Remove BGP network announce
  BGP_GET_ROUTES = 22;                     // Get BGP routing table
  
  // Route-map operations
  BGP_ADD_ROUTE_MAP = 30;                  // Add Route-map
  BGP_REMOVE_ROUTE_MAP = 31;               // Remove Route-map
  BGP_UPDATE_ROUTE_MAP = 32;               // Update Route-map
  
  // Prefix-list operations
  BGP_ADD_PREFIX_LIST = 40;                // Add Prefix-list
  BGP_REMOVE_PREFIX_LIST = 41;             // Remove Prefix-list
  BGP_UPDATE_PREFIX_LIST = 42;             // Update Prefix-list
  
  // Operational commands
  BGP_CLEAR_ALL = 50;                      // Clear all BGP sessions
  BGP_SOFT_RESET_IN = 51;                  // Soft reset inbound
  BGP_SOFT_RESET_OUT = 52;                 // Soft reset outbound
  BGP_GET_STATISTICS = 53;                 // Get BGP statistics
}
